{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"OsiriXgrpc","text":"<p>NOTE: This repository is still in development. Bare with us, it will be released soon!</p> <p>Welcome to the OsiriXgrpc documentation. Here you will find some of the setup routines required to run OsiriXgrpc  from within OsiriX and how it can be used to create OsiriX plugins at speed.</p> <p>Note that typically this plugin is not used in isolation and will be used alongside a supporting tool.  Currently, this is exclusively pyosirix (pyosirix.com), which provides OsiriX functionality through a convenient Python interface.</p>"},{"location":"getting_started.html","title":"Getting Started","text":"<p>The following steps demonstrate how to install the plugin and subsequently start up a local OsiriX server and run  scripts that can be defined in any source file on your system. To see how to write GRPC client code for use with  OsiriXgrpc please see defining client code.  </p> <p>The OsiriXgrpc plugin consists of three core functionalities, all of which are accessible from the OsiriX submenus at <code>Plugins</code> \u2192 <code>Database</code> \u2192 <code>osirixgrpc</code>:</p> <ol> <li>Server Configuration allows you to start and stop OsiriXgrpc servers. At lease one server must be active in     clients to be able to communicate with OsiriX.</li> <li>Script Management provides the list of client files currently registered by OsiriXgrpc that can be run through     the OsiriXgrpc menu bars. This includes the locations of the scripts and executable used to run them. </li> <li>Task Console shows the currently running scripts and provides a location for all stdout and stderr messages to    recorded.</li> </ol>"},{"location":"getting_started.html#installation","title":"Installation","text":"<ol> <li>Download the latest release.</li> <li>Extract the downloaded archive.</li> <li>Drag the <code>osirixgrpc.osirixplugin</code> file to the OsiriX application you want to install to.</li> <li>Follow instructions for further installation.</li> </ol>"},{"location":"getting_started.html#server-configuration","title":"Server Configuration","text":"<p>OsiriXgrpc servers can be started and paused using the server configuration window.  To start one of the available servers, press the \u25b6 button and the <code>Active</code> status will turn green once this has  been successful (\u25cf). Alternatively, to stop a running server press \u25a0 and the <code>Active</code> status will turn red (\u25cf). If, for any reason, the server cannot be started or shutdown, an error message should appear at the bottom of the window.</p> <p>By pressing the \"+\" it is possible to add a new server, or remove one by \"-\". Any unique port number can be chosen, and  checks will be made prior to starting the server that the port is available.</p> <p>Note: For security reasons, all OsiriXgrpc servers are local (IP address 127.0.0.1). Only clients run on the same machine as the OsiriX app have access to the API. If communication is required with another machine on a network (a GPU  node for example), this can be achieved by the client as necessary.</p> <p>Note: All servers are run on a separate thread to the main OsiriX thread.</p> <p>Note: The list of available server port numbers are available to outside applications as a JSON file located in   the directory <code>/Users/username/Library/Application Support/OsiriXGRPC/server_configs.json</code>.  For each server the IP   address (always 127.0.0.1), port, and active status are available.  The order of preference matches that in server    configuration window.</p>"},{"location":"getting_started.html#script-management","title":"Script Management","text":"<p>Although not necessary, scripts can be registered with OsiriXgrpc so that users can run them without needing to see any  code whatsoever. To register a script, select the <code>Script Management</code> plugin sub-menu to start the script database  console. </p> <ul> <li><code>Name</code>: The name of the script, which is automatically taken as the filename (without file extension).</li> <li><code>Type</code>: A drop-down that determines which drop-down menu contains the button to start the script.<ul> <li><code>Database</code>: Scripts that generally deal with user-selection in the OsiriX Dicom database (main screen).</li> <li><code>Image</code>: Scripts that generally perform some image manipulation (e.g. filtering or segmentation)</li> <li><code>VRController</code>: Scripts that generally operate on the 3D viewer.</li> <li><code>ROI</code>: Scripts that generally manipulate drawn regions of interest.</li> </ul> </li> <li><code>Blocking</code>: Scripts that are blocking, block the OsiriX runtime until the script has finished running. This is     generally undesired, but might be necessary to avoid conflicts of user operation.</li> <li><code>Language</code>: Automatically detects which language is used. Currently, we only support Python.</li> <li><code>Location</code>: The complete path to the script file. This cannot be edited - please remove the script if no longer      accurate.</li> <li><code>Interpreter</code>: The complete path to the binary file used to run the script. We strongly suggest that for Python      scripts this should be an interpreter managed by an environment manager such as conda. This      will make package management easy!</li> </ul> <p>To add or remove a script, press the \"+\" or \"-\" keys. When adding a script, the console will ask for the location of  the script file.  The location of the interpreter should be manually set afterwards.</p>"},{"location":"getting_started.html#drop-down-menus","title":"Drop-down menus","text":"<p>All registered scripts can be started from dedicated menus.  These menus are not visible by default.  To add them to  either (i) the Database viewer, (ii) the image viewer, or (iii) the volume-render viewer, please right-click the top  ribbon toolbar in each of these windows, select <code>Customize Toolbar...</code>, and drag-and-drop the OsiriXgrpc menu item (<code>gRPC Tasks</code>) into a free slot on the toolbar.</p> <p>Note: Please restart OsiriX for all changes to take effect.</p>"},{"location":"getting_started.html#task-console","title":"Task Console","text":"<p>The task console provides all stdout and stderr messages for the registered scripts run through the script management  interface. Outputs can be saved and the console can be cleared. </p> <p>Congratulations! You should now be ready to create client scripts to interact with OsiriX!</p>"},{"location":"api/index.html","title":"Basics","text":"<p>Note: This is the long-winded way to do things. We strongly encourage using the pyosirix library   for day-to-day development. However, this does provide an indication of what is happening \"under the hood\".</p> <p>gRPC supports many languages, including C++, Java, Go, Node.js, and PHP.  We currently only support use of Python because the libraries available image processing and machine-learning, and offers a relatively short learning curve. All examples are therefore shown in Python, but if you are  interested in generating the GRPC code for other client languages, then please see the  contributing section and enclosed pages.</p>"},{"location":"api/index.html#requirements","title":"Requirements","text":"<p>The requirements for working with the Python osirixgrpc library are <pre><code>grpcio&gt;=1.60.0\ngrpcio-tools&gt;=1.60.0\n</code></pre></p>"},{"location":"api/index.html#connecting-to-the-server","title":"Connecting to the Server","text":"<p>To establish a connection with the OsiriXgrpc plugin server, you initiate a service instance (<code>OsiriXServiceStub</code>)  provided by the <code>osirix_pb2_grpc</code> module. Currently, this process necessitates the use of an insecure channel on the  local system (localhost), as detailed below. Please be aware that the specified port must align with one of the active  ports displayed in the OsiriXgrpc plugin.(see Server Configuration).</p> Example Python code to establish gRPC connection<pre><code>import grpc\nfrom osirixgrpc import osirix_pb2_grpc\n\nport = 50001  # (1)\nserver_url_localhost = 'localhost:' + str(port)\nchannel_opt = [('grpc.max_send_message_length', 512 * 1024 * 1024), \n               ('grpc.max_receive_message_length', 512 * 1024 * 1024)] # (2)\nchannel = grpc.insecure_channel(server_url_localhost, options=channel_opt)\nstub = osirix_pb2_grpc.OsiriXServiceStub(channel)\n</code></pre> <ol> <li>Must match activated port in the OsiriX plugin.  See Server Configuration.</li> <li>This could change depending on intended use.</li> </ol>"},{"location":"api/index.html#requests-and-responses","title":"Requests and Responses","text":"<p>After establishing a connection, following the conventions of standard  gRPC practices, OsiriXgrpc utilizes two classes of 'message' for  communication with the OsiriX plugin server: requests and responses . Similar to conventional functions,  requests encapsulate all arguments passed to defined service methods, while responses encapsulate the returned results.  The definitions for all service methods are outlined in the <code>osirix.proto</code> source file. Details about available methods are provided in specific pages in the API documentation.   </p> <p>In order to replicate methods that don't necessitate input arguments (e.g., getters) or those that don't require  returning results (e.g., setters), we have introduced a base response and request for these specific cases.  These base definitions are located in the <code>utilities.proto</code> file Empty response and request definition (utilities.proto)<pre><code>// Base response for methods that don't pass results (e.g. setters)\nmessage Response{\n    Status status = 1;\n}\n\n// Empty request for methods that don't expect arguments (e.g. getters)\nmessage Empty{\n\n}\n</code></pre></p> <p>Note that even empty responses contain a field called <code>Status</code> Status definition (utilities.proto)<pre><code>message Status{\n    int32 status = 1;  // 0 for error, 1 for success\n    string message = 2;\n}\n</code></pre></p> <p>This message contains a single (binary) integer <code>status</code>, with values 0 and 1 representing unsuccessful and successful  method execution respectively, and a string <code>message</code>, which contains an error message in the even that <code>status=0</code>.</p>"},{"location":"api/index.html#osirixgrpc-types","title":"OsiriXGRPC types","text":"<p>By default, gRPC is designed to work with standard data types (<code>int32</code>, <code>int64</code>, <code>uint32</code>, <code>uint64</code>, <code>float</code>, <code>double</code>,  <code>bool</code>, <code>and</code> <code>string</code>) within messages. However, OsiriXgrpc goes beyond this default capability by introducing support  for arbitrary classes defined within OsiriX. This extension is achieved through the definition of several \"types\" in the  <code>types.proto</code> file.</p> <p>In each defined type, there is an <code>osirixrpc_uid</code> field, containing a Universally Unique Identifier (UUID) string,  specifically a NextStep UUID string  (NSSUID string). This UUID is managed by  the OsiriXgrpc plugin and serves as a unique identifier linked to elements within the OsiriX application. This mechanism  enables seamless access to and interaction with various elements of the OsiriX app through gRPC communication.</p> Type definitions (types.proto)<pre><code>message BrowserController{\n    string osirixrpc_uid = 1;\n}\n\nmessage ViewerController{\n    string osirixrpc_uid = 1;\n}\n\nmessage VRController{\n    string osirixrpc_uid = 1;\n}\n\nmessage DCMPix{\n    string osirixrpc_uid = 1;\n}\n\nmessage ROI{\n    string osirixrpc_uid = 1;\n}\n\nmessage ROIVolume{\n    string osirixrpc_uid = 1;\n}\n\nmessage DicomImage{\n    string osirixrpc_uid = 1;\n}\n\nmessage DicomSeries{\n    string osirixrpc_uid = 1;\n}\n\nmessage DicomStudy{\n    string osirixrpc_uid = 1;\n}\n</code></pre>"},{"location":"api/index.html#core-osirxgrpc-methods","title":"Core OsirXgrpc methods","text":"<p>\"The secret of getting ahead is getting started\" (Mark Twain). </p> <p>To begin accessing elements of OsiriX, it is first necessary to get a hook onto one of the core objects it contains. There are five methods that can be used for this.</p> Core OsiriX access methods (osirix.proto)<pre><code>rpc OsirixCurrentBrowser (Empty) returns (OsirixCurrentBrowserResponse) {}\nrpc OsirixFrontmostViewer (Empty) returns (OsirixFrontmostViewerResponse) {}\nrpc OsirixDisplayed2DViewers (Empty) returns (OsirixDisplayed2DViewersResponse) {}\nrpc OsirixFrontmostVRController (Empty) returns (OsirixFrontmostVRControllerResponse) {}\nrpc OsirixDisplayedVRControllers (Empty) returns (OsirixDisplayedVRControllersResponse) {}\n</code></pre> <p>All methods require <code>Empty</code> requests, but have the following responses. Core OsiriX responses (osirix.proto)<pre><code>message OsirixCurrentBrowserResponse{\n    Status status = 1;\n    BrowserController browser_controller = 2;\n}\n\nmessage OsirixFrontmostViewerResponse{\n    Status status = 1;\n    ViewerController viewer_controller = 2;\n}\n\nmessage OsirixDisplayed2DViewersResponse{\n    Status status = 1;\n    repeated ViewerController viewer_controllers = 2;\n}\n\nmessage OsirixFrontmostVRControllerResponse{\n    Status status = 1;\n    VRController vr_controller = 2;\n}\n\nmessage OsirixDisplayedVRControllersResponse{\n    Status status = 1;\n    repeated VRController vr_controllers = 2;\n}\n</code></pre></p>"},{"location":"api/index.html#examples","title":"Examples","text":"<p>Below are examples of how to use these functions using Python.  These all assume that a connection has been established as detailed in Connecting to the Server.</p>"},{"location":"api/index.html#accessing-information-from-the-database-browsercontroller","title":"Accessing information from the database (BrowserController)","text":"<p>This code can be used obtain a hook for the OsiriX database browser. <pre><code>from osirixgrpc import utilities_pb2\n\nempty_request = utilities_pb2.Empty()  # (1)\nbrowser_response = stub.OsirixCurrentBrowser(empty_request)\nif browser_response.status.status == 0: # (2)\n    raise Exception(f\"Could not get browser.  Reason: {browser_response.status.message}\")\nbrowser_controller = browser_response.browser_controller # (3)\n</code></pre></p> <ol> <li>Used for methods that do not require arguments </li> <li>Check that the method did not end in error and deal with it.</li> <li>A <code>BrowserController</code> type.</li> </ol> <p>This may subsequently be used get the current user selection (series and/or studies) within the browser. <pre><code>from osirixgrpc import browsercontroller_pb2\n\nselection_response = stub.BrowserControllerDatabaseSelection(browser_controller)\nseries = selection_response.series # (1)\nstudies = selection_response.studies # (2)\n</code></pre></p> <ol> <li>A list of <code>DicomSeries</code> types. </li> <li>A list of <code>DicomStudy</code> types.</li> </ol> <p>In turn, we can access and print the selected study names. <pre><code>from osirixgrpc import dicomstudy_pb2\n\nfor dicom_study in studies:\n    studyname_response = stub.DicomStudyName(dicom_study)\n    print(\"Study name: \", studyname_response.name)\n</code></pre></p> <p>Other methods are documented in the API documents for BrowserController.</p>"},{"location":"api/index.html#accessing-displayed-images-viewercontroller","title":"Accessing displayed images (ViewerController)","text":"<p>There are two ways to access a 2D viewer from OsiriX; either by accessing a list of all displayed viewers or by accessing the \"front-most\" viewer (currently selected). <pre><code>from osirixgrpc import utilities_pb2\n\nempty_request = utilities_pb2.Empty()\nfrontmostviewer_response = stub.OsirixFrontmostViewer(empty_request)\nfrontmost_viewer = frontmostviewer_response.viewer_controller  # (1)\n\nviewers_response = stub.OsirixDisplayed2DViewers(empty_request)\nviewers = viewers_response.viewer_controllers  # (2)\n</code></pre></p> <ol> <li>A <code>ViewerController</code> type.</li> <li>A list of <code>ViewerController</code> types.</li> </ol> <p>It is then possible to access the list of <code>DCMPix</code> objects attributed to the particular viewer <pre><code>from osirixgrpc import viewercontroller_pb2\n\npixlist_request = viewercontroller_pb2.ViewerControllerPixListRequest(viewer_controller=frontmost_viewer, \n                                                                      movie_idx=0) # (1)\npixlist_response = stub.ViewerControllerPixList(pixlist_request) # (2)\ndcm_pix = pixlist_response.pix # (3)\n</code></pre></p> <ol> <li>Note that the requested frame number must be provided (0 is first frame).</li> <li>A <code>ViewerControllerPixListResponse</code>.</li> <li>A list of <code>DCMPix</code> types.</li> </ol> <p>It then possible to get access to the contained image data. <pre><code>import numpy as np\n\npix_0 = dcm_pix[0]\nimage_response = stub.DCMPixImage(pix_0) # (1)\nrows = image_response.rows\ncolumns = image_response.columns\nif image_response.is_argb: # (2)\n    image_array = np.array(image_response.image_data_argb).reshape(rows, columns, 4)\nelse:\n    image_array = np.array(image_response.image_data_float).reshape(rows, columns) # (3)\n</code></pre></p> <ol> <li>An example of using a type as a request</li> <li>Images are either float (greyscale) or ARGB format</li> <li>The datastream does not contain dimensional information.</li> </ol> <p>This example introduced a case where the method request is a data type rather than an <code>Empty</code> request. This is typical  where the method obtains information about a given OsiriX object (<code>DCMPix</code> in this instance). The request for the list if <code>DCMPix</code> (<code>ViewerControllerPixListRequest</code>), however, is a dedicated request that must be built prior to calling the  method.</p>"},{"location":"api/index.html#manipulating-regions-of-interest-roi","title":"Manipulating regions of interest (ROI)","text":"<p>There are different kind of Region of Interest (ROI) available within OsiriX, but this can be somewhat broken into two core types: brush and polygon.  The former is defined by a boolean array, where true values are considered to be part of the ROI and false values outside, and the latter is defined by an ordered set of vertices. </p> <p>The following example demonstrates how ROIs can be obtained from a (2D) viewer controller, and subsequently rotates them  about the centroid by 30 degrees. Note that will not operate on brush ROIs, though no error is raised if attempted. <pre><code>from osirixgrpc import roi_pb2\n\nroilist_request = viewercontroller_pb2.ViewerControllerROIListRequest(viewer_controller=frontmost_viewer, \n                                                                      movie_idx=0) # (1)\nroilist_response = stub.ViewerControllerROIList(roilist_request) # (2)\nfor roi_slice in roilist_response.roi_slices:\n    for roi in roi_slice.rois:\n        centroid_response = stub.ROICentroid(roi)\n        rotate_request = roi_pb2.ROIRotateRequest(roi=roi,\n                                                  x=centroid_response.x,\n                                                  y=centroid_response.y,\n                                                  degrees=30.0)\n        rotate_response = stub.ROIRotate(rotate_request)\n        if rotate_response.status.status == 0:\n            raise ValueError(f\"Could not rotate: {rotate_response.status.meessage}\")\n</code></pre></p> <ol> <li>As for the <code>ViewerControllerPixListRequest</code>, this requires definition of the frame from which ROIs are needed.</li> <li><code>ViewerControllerROIListResponse</code> contains a list of ROI slices, one per image slice, each containing &gt;= 0 ROIs.</li> </ol> <p>A full breakdown of the other methods, requests and responses is provided in the remainder of the API documentation.</p>"},{"location":"api/browsercontroller.html","title":"Browser Controller","text":"<p>BrowserController is a class representing the database window of OsiriX. It provides some functionality for accessing user study/series selection, and a tool for data import.</p>"},{"location":"api/browsercontroller.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 5-7)<pre><code>message BrowserController{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/browsercontroller.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc BrowserControllerXyz (BrowserControllerXyzRequest) returns (BrowserControllerXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.BrowserControllerXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>BrowserControllerXyzResponse</code> class, and <code>request</code> a <code>BrowserControllerXyzRequest</code> class.</li> </ol> osirix.proto (lines 118-119)<pre><code>rpc BrowserControllerDatabaseSelection (BrowserController) returns (BrowserControllerDatabaseSelectionResponse) {}\nrpc BrowserControllerCopyFilesIfNeeded (BrowserControllerCopyFilesIfNeededRequest) returns (Response) {}\n</code></pre>"},{"location":"api/browsercontroller.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message BrowserControllerXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> browsercontroller.proto (lines 9-13)<pre><code>message BrowserControllerDatabaseSelectionResponse{\n    Status status = 1;\n    repeated DicomSeries series = 2;\n    repeated DicomStudy studies = 3;\n}\n</code></pre>"},{"location":"api/browsercontroller.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message BrowserControllerXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import browsercontroller_pb2\n\nrequest = browsercontroller_pb2.BrowserControllerXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> browsercontroller.proto (lines 16-)<pre><code>message BrowserControllerCopyFilesIfNeededRequest{\n    BrowserController browser = 1;\n    repeated string paths = 2;\n}\n</code></pre>"},{"location":"api/dcmpix.html","title":"DCMPix","text":"<p>DCMPix is a class of objects contained within a 2D OsiriX viewer. It contains information about the displayed image, including the number fo rows/columns, the source file from which it is generated, whether it is greyscale of ARGB format, and ultimately the pixel data.</p>"},{"location":"api/dcmpix.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 17-19)<pre><code>message DCMPix{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dcmpix.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DCMPixXyz (DCMPixXyzRequest) returns (DCMPixXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DCMPixXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DCMPixXyzResponse</code> class, and <code>request</code> a <code>DCMPixXyzRequest</code> class.</li> </ol> osirix.proto (lines 60-76)<pre><code>rpc DCMPixConvertToRGB (DCMPixConvertToRGBRequest) returns (Response) {}\nrpc DCMPixConvertToBW (DCMPixConvertToBWRequest) returns (Response) {}\nrpc DCMPixIsRGB (DCMPix) returns (DCMPixIsRGBResponse) {}\nrpc DCMPixComputeROI (DCMPixComputeROIRequest) returns (DCMPixComputeROIResponse) {}\nrpc DCMPixROIValues (DCMPixROIValuesRequest) returns (DCMPixROIValuesResponse) {}\nrpc DCMPixShape (DCMPix) returns (DCMPixShapeResponse) {}\nrpc DCMPixSpacing (DCMPix) returns (DCMPixSpacingResponse) {}\nrpc DCMPixOrigin (DCMPix) returns (DCMPixOriginResponse) {}\nrpc DCMPixOrientation (DCMPix) returns (DCMPixOrientationResponse) {}\nrpc DCMPixSliceLocation (DCMPix) returns (DCMPixSliceLocationResponse) {}\nrpc DCMPixSourceFile (DCMPix) returns (DCMPixSourceFileResponse) {}\nrpc DCMPixImage (DCMPix) returns (DCMPixImageResponse) {}\nrpc DCMPixSetImage (DCMPixSetImageRequest) returns (Response) {}\nrpc DCMPixGetMapFromROI (DCMPixGetMapFromROIRequest) returns (DCMPixGetMapFromROIResponse) {}\nrpc DCMPixDicomImage (DCMPix) returns (DCMPixDicomImageResponse) {}\nrpc DCMPixDicomSeries (DCMPix) returns (DCMPixDicomSeriesResponse) {}\nrpc DCMPixDicomStudy (DCMPix) returns (DCMPixDicomStudyResponse) {}\n</code></pre>"},{"location":"api/dcmpix.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DCMPixXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dcmpix.proto (lines 9-95)<pre><code>message DCMPixIsRGBResponse{\n    Status status = 1;\n    bool is_rgb = 2;\n}\n\nmessage DCMPixComputeROIResponse{\n    Status status = 1;\n    float mean = 2;\n    float total = 3;\n    float std_dev = 4;\n    float min = 5;\n    float max = 6;\n    float skewness = 7;\n    float kurtosis = 8;\n}\n\nmessage DCMPixROIValuesResponse{\n    Status status = 1;\n    repeated float values = 2;\n    repeated int32 row_indices = 3;\n    repeated int32 column_indices = 4;\n}\n\nmessage DCMPixDicomImageResponse{\n    Status status = 1;\n    DicomImage dicom_image = 2;\n}\n\nmessage DCMPixDicomSeriesResponse{\n    Status status = 1;\n    DicomSeries dicom_series = 2;\n}\n\nmessage DCMPixDicomStudyResponse{\n    Status status = 1;\n    DicomStudy dicom_study = 2;\n}\n\nmessage DCMPixImageResponse{\n    Status status = 1;\n    int32 rows = 2;\n    int32 columns = 3;\n    bool is_argb = 4;\n    repeated float image_data_float = 5;\n    repeated int32 image_data_argb = 6;\n}\n\nmessage DCMPixGetMapFromROIResponse{\n    Status status = 1;\n    int32 rows = 2;\n    int32 columns = 3;\n    repeated bool map = 4;\n}\n\nmessage DCMPixShapeResponse{\n    Status status = 1;\n    int32 rows = 2;\n    int32 columns = 3;\n}\n\nmessage DCMPixSpacingResponse{\n    Status status = 1;\n    float spacing_rows = 2;\n    float spacing_columns = 3;\n}\n\nmessage DCMPixOriginResponse{\n    Status status = 1;\n    float origin_rows = 2;\n    float origin_columns = 3;\n    float origin_slices = 4;\n}\n\nmessage DCMPixOrientationResponse{\n    Status status = 1;\n    repeated float orientation = 2;\n}\n\nmessage DCMPixSliceLocationResponse{\n    Status status = 1;\n    float slice_location = 2;\n}\n\nmessage DCMPixSourceFileResponse{\n    Status status = 1;\n    string source_file = 2;\n}\n</code></pre>"},{"location":"api/dcmpix.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message DCMPixXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import dcmpix_pb2\n\nrequest = dcmpix_pb2.DCMPixXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> dcmpix.proto (lines 98-)<pre><code>message DCMPixConvertToRGBRequest{\n    DCMPix pix = 1;\n    int32 rgb_channel = 2;\n}\n\nmessage DCMPixConvertToBWRequest{\n    DCMPix pix = 1;\n    int32 bw_channel = 2;\n}\n\nmessage DCMPixComputeROIRequest{\n    DCMPix pix = 1;\n    ROI roi = 2;\n}\n\nmessage DCMPixROIValuesRequest{\n    DCMPix pix = 1;\n    ROI roi = 2;\n}\n\nmessage DCMPixSetImageRequest{\n    DCMPix pix = 1;\n    repeated float image_data_float = 2;\n    repeated int32 image_data_argb = 3;\n}\n\nmessage DCMPixGetMapFromROIRequest{\n    DCMPix pix = 1;\n    ROI roi = 2;\n}\n</code></pre>"},{"location":"api/dicomimage.html","title":"Dicom Image","text":"<p>DicomImage is a class representing a dicom file/slice within the OsiriX database. It contains information including  patient details, modality, and file location. </p>"},{"location":"api/dicomimage.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 29-31)<pre><code>message DicomImage{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dicomimage.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DicomImageXyz (DicomImage) returns (DicomImageXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DicomImageXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DicomImageXyzResponse</code> class, and <code>request</code> a <code>DicomImage</code> class.</li> </ol> osirix.proto (lines 122-131)<pre><code>rpc DicomImageWidth (DicomImage) returns (DicomImageWidthResponse) {}\nrpc DicomImageHeight (DicomImage) returns (DicomImageHeightResponse) {}\nrpc DicomImageSOPInstanceUID (DicomImage) returns (DicomImageSOPInstanceUIDResponse) {}\nrpc DicomImageCompletePath (DicomImage) returns (DicomImageCompletePathResponse) {}\nrpc DicomImageDate (DicomImage) returns (DicomImageDateResponse) {}\nrpc DicomImageNumberOfFrames (DicomImage) returns (DicomImageNumberOfFramesResponse) {}\nrpc DicomImageModality (DicomImage) returns (DicomImageModalityResponse) {}\nrpc DicomImageSeries (DicomImage) returns (DicomImageSeriesResponse) {}\nrpc DicomImageSliceLocation (DicomImage) returns (DicomImageSliceLocationResponse) {}\nrpc DicomImageInstanceNumber (DicomImage) returns (DicomImageInstanceNumberResponse) {}\n</code></pre>"},{"location":"api/dicomimage.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DicomImageXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dicomimage.proto (lines 9-)<pre><code> message DicomImageWidthResponse{\n    Status status = 1;\n    uint32 width = 2;\n }\n\n message DicomImageHeightResponse{\n    Status status = 1;\n    uint32 height = 2;\n }\n\n message DicomImageSOPInstanceUIDResponse{\n    Status status = 1;\n    string sop_instance_uid = 2;\n }\n\n message DicomImageCompletePathResponse{\n    Status status = 1;\n    string path_name = 2;\n }\n\n message DicomImageDateResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n }\n\n message DicomImageNumberOfFramesResponse{\n    Status status = 1;\n    uint32 number_of_frames = 2;\n }\n\n message DicomImageModalityResponse{\n    Status status = 1;\n    string modality = 2;\n }\n\n message DicomImageSeriesResponse{\n    Status status = 1;\n    DicomSeries series = 2;\n }\n\n message DicomImageSliceLocationResponse{\n    Status status = 1;\n    float slice_locations = 2;\n }\n\n message DicomImageInstanceNumberResponse{\n    Status status = 1;\n    uint32 instance_number = 2;\n }\n</code></pre>"},{"location":"api/dicomimage.html#requests","title":"Requests","text":"<p>No specialized requests available for this class (class is immutable).</p>"},{"location":"api/dicomseries.html","title":"Dicom Series","text":"<p>DicomSeries is a class representing a group of DicomImage objects within the same series. It contains information  including patient details, modality, and file location(s). </p>"},{"location":"api/dicomseries.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 33-35)<pre><code>message DicomSeries{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dicomseries.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DicomSeriesXyz (DicomSeries) returns (DicomSeriesXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DicomSeriesXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DicomSeriesXyzResponse</code> class, and <code>request</code> a <code>DicomSeries</code> class.</li> </ol> osirix.proto (lines 134-146)<pre><code>rpc DicomSeriesPaths (DicomSeries) returns (DicomSeriesPathsResponse) {}\nrpc DicomSeriesPreviousSeries (DicomSeries) returns (DicomSeriesPreviousSeriesResponse) {}\nrpc DicomSeriesNextSeries (DicomSeries) returns (DicomSeriesNextSeriesResponse) {}\nrpc DicomSeriesSortedImages (DicomSeries) returns (DicomSeriesSortedImagesResponse) {}\nrpc DicomSeriesStudy (DicomSeries) returns (DicomSeriesStudyResponse) {}\nrpc DicomSeriesImages (DicomSeries) returns (DicomSeriesImagesResponse) {}\nrpc DicomSeriesSeriesInstanceUID (DicomSeries) returns (DicomSeriesSeriesInstanceUIDResponse) {}\nrpc DicomSeriesSeriesSOPClassUID (DicomSeries) returns (DicomSeriesSeriesSOPClassUIDResponse) {}\nrpc DicomSeriesSeriesDescription (DicomSeries) returns (DicomSeriesSeriesDescriptionResponse) {}\nrpc DicomSeriesModality (DicomSeries) returns (DicomSeriesModalityResponse) {}\nrpc DicomSeriesName (DicomSeries) returns (DicomSeriesNameResponse) {}\nrpc DicomSeriesDate (DicomSeries) returns (DicomSeriesDateResponse) {}\nrpc DicomSeriesNumberOfImages (DicomSeries) returns (DicomSeriesNumberOfImagesResponse) {}\n</code></pre>"},{"location":"api/dicomseries.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DicomSeriesXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dicomseries.proto (lines 9-)<pre><code>message DicomSeriesPathsResponse{\n    Status status = 1;\n    repeated string paths = 2;\n}\n\nmessage DicomSeriesPreviousSeriesResponse{\n    Status status = 1;\n    DicomSeries previous_series = 2;\n}\n\nmessage DicomSeriesNextSeriesResponse{\n    Status status = 1;\n    DicomSeries next_series = 2;\n}\n\nmessage DicomSeriesSortedImagesResponse{\n    Status status = 1;\n    repeated DicomImage sorted_images  = 2;\n}\n\nmessage DicomSeriesStudyResponse{\n    Status status = 1;\n    DicomStudy study = 2;\n}\n\nmessage DicomSeriesImagesResponse{\n    Status status = 1;\n    repeated DicomImage images = 2;\n}\n\nmessage DicomSeriesSeriesInstanceUIDResponse{\n    Status status = 1;\n    string series_instance_uid = 2;\n}\n\nmessage DicomSeriesSeriesSOPClassUIDResponse{\n    Status status = 1;\n    string series_sop_class_uid = 2;\n}\n\nmessage DicomSeriesSeriesDescriptionResponse{\n    Status status = 1;\n    string series_description = 2;\n}\n\nmessage DicomSeriesModalityResponse{\n    Status status = 1;\n    string modality = 2;\n}\n\nmessage DicomSeriesNameResponse{\n    Status status = 1;\n    string name = 2;\n}\n\n\nmessage DicomSeriesNumberOfImagesResponse{\n    Status status = 1;\n    int32 number_of_images = 2;\n}\n\nmessage DicomSeriesDateResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n}\n</code></pre>"},{"location":"api/dicomseries.html#requests","title":"Requests","text":"<p>No specialized requests available for this class (class is immutable).</p>"},{"location":"api/dicomstudy.html","title":"Dicom Study","text":"<p>DicomStudy is a class representing a group of DicomSeries objects within the same study. It contains information  including patient details, modality, and file location(s). </p>"},{"location":"api/dicomstudy.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 37-39)<pre><code>message DicomStudy{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dicomstudy.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DicomStudyXyz (DicomStudy) returns (DicomStudyXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DicomStudyXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DicomStudyXyzResponse</code> class, and <code>request</code> a <code>DicomStudy</code> class.</li> </ol> osirix.proto (lines 149-169)<pre><code>rpc DicomStudyPaths (DicomStudy) returns (DicomStudyPathsResponse) {}\nrpc DicomStudyImages (DicomStudy) returns (DicomStudyImagesResponse) {}\nrpc DicomStudyModalities (DicomStudy) returns (DicomStudyModalitiesResponse) {}\nrpc DicomStudyNoFiles (DicomStudy) returns (DicomStudyNoFilesResponse) {}\nrpc DicomStudyRawNoFiles (DicomStudy) returns (DicomStudyRawNoFilesResponse) {}\nrpc DicomStudyNoFilesExcludingMultiFrames (DicomStudy) returns (DicomStudyNoFilesExcludingMultiFramesResponse) {}\nrpc DicomStudyNumberOfImages (DicomStudy) returns (DicomStudyNumberOfImagesResponse) {}\nrpc DicomStudySeries (DicomStudy) returns (DicomStudySeriesResponse) {}\nrpc DicomStudyName (DicomStudy) returns (DicomStudyNameResponse) {}\nrpc DicomStudyDate (DicomStudy) returns (DicomStudyDateResponse) {}\nrpc DicomStudyDateAdded (DicomStudy) returns (DicomStudyDateAddedResponse) {}\nrpc DicomStudyDateOfBirth (DicomStudy) returns (DicomStudyDateOfBirthResponse) {}\nrpc DicomStudyInstitutionName (DicomStudy) returns (DicomStudyInstitutionNameResponse) {}\nrpc DicomStudyModality (DicomStudy) returns (DicomStudyModalityResponse) {}\nrpc DicomStudyPatientID (DicomStudy) returns (DicomStudyPatientIDResponse) {}\nrpc DicomStudyPatientUID (DicomStudy) returns (DicomStudyPatientUIDResponse) {}\nrpc DicomStudyPatientSex (DicomStudy) returns (DicomStudyPatientSexResponse) {}\nrpc DicomStudyPerformingPhysician (DicomStudy) returns (DicomStudyPerformingPhysicianResponse) {}\nrpc DicomStudyReferringPhysician (DicomStudy) returns (DicomStudyReferringPhysicianResponse) {}\nrpc DicomStudyStudyInstanceUID (DicomStudy) returns (DicomStudyStudyInstanceUIDResponse) {}\nrpc DicomStudyStudyName (DicomStudy) returns (DicomStudyStudyNameResponse) {}\n</code></pre>"},{"location":"api/dicomstudy.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DicomStudyXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dicomstudy.proto (lines 9-)<pre><code>message DicomStudyPathsResponse{\n    Status status = 1;\n    repeated string paths = 2;\n}\n\nmessage DicomStudyImagesResponse{\n    Status status = 1;\n    repeated DicomImage images = 2;\n}\n\nmessage DicomStudyModalitiesResponse{\n    Status status = 1;\n    string modalities = 2;\n}\n\nmessage DicomStudyNoFilesResponse{\n    Status status = 1;\n    int32 no_files = 2;\n}\n\nmessage DicomStudyRawNoFilesResponse{\n    Status status = 1;\n    int32 no_files = 2;\n}\n\nmessage DicomStudyNoFilesExcludingMultiFramesResponse{\n    Status status = 1;\n    int32 no_files = 2;\n}\n\nmessage DicomStudyNumberOfImagesResponse{\n    Status status = 1;\n    int32 no_images = 2;\n}\n\nmessage DicomStudySeriesResponse{\n    Status status = 1;\n    repeated DicomSeries series = 2;\n}\n\nmessage DicomStudyNameResponse{\n    Status status = 1;\n    string name = 2;\n}\n\nmessage DicomStudyDateResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n}\n\nmessage DicomStudyDateAddedResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n}\n\nmessage DicomStudyDateOfBirthResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n}\n\nmessage DicomStudyInstitutionNameResponse{\n    Status status = 1;\n    string institution_name = 2;\n}\n\nmessage DicomStudyModalityResponse{\n    Status status = 1;\n    string modality = 2;\n}\n\nmessage DicomStudyPatientIDResponse{\n    Status status = 1;\n    string patient_id = 2;\n}\n\nmessage DicomStudyPatientUIDResponse{\n    Status status = 1;\n    string patient_uid = 2;\n}\n\nmessage DicomStudyPatientSexResponse{\n    Status status = 1;\n    string patient_sex = 2;\n}\n\nmessage DicomStudyPerformingPhysicianResponse{\n    Status status = 1;\n    string performing_physician = 2;\n}\n\nmessage DicomStudyReferringPhysicianResponse{\n    Status status = 1;\n    string referring_physician = 2;\n}\n\nmessage DicomStudyStudyInstanceUIDResponse{\n    Status status = 1;\n    string study_instance_uid = 2;\n}\n\nmessage DicomStudyStudyNameResponse{\n    Status status = 1;\n    string study_name = 2;\n}\n</code></pre>"},{"location":"api/dicomstudy.html#requests","title":"Requests","text":"<p>No specialized requests available for this class (class is immutable).</p>"},{"location":"api/roi.html","title":"Regions of Interest","text":"<p>ROI is a class representing regions of interest within an OsiriX 2D display window. It provides control of the  vertices/mask, color, and thickness of the object.</p>"},{"location":"api/roi.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 21-23)<pre><code>message ROI{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/roi.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc ROIXyz (ROIXyzRequest) returns (ROIXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.ROIXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>ROIXyzResponse</code> class, and <code>request</code> a <code>ROIXyzRequest</code> class.</li> </ol> osirix.proto (lines 27-44)<pre><code>rpc ROIFlipHorizontally (ROI) returns (Response) {}\nrpc ROIFlipVertically (ROI) returns (Response) {}\nrpc ROIArea (ROI) returns (ROIAreaResponse) {}\nrpc ROICentroid (ROI) returns (ROICentroidResponse) {}\nrpc ROIRotate (ROIRotateRequest) returns (Response) {}\nrpc ROIMove (ROIMoveRequest) returns (Response) {}\nrpc ROIPix (ROI) returns (ROIPixResponse) {}\nrpc ROIName (ROI) returns (ROINameResponse) {}\nrpc ROIIType (ROI) returns (ROIITypeResponse) {}\nrpc ROISetName (ROISetNameRequest) returns (Response) {}\nrpc ROIColor (ROI) returns (ROIColorResponse) {}\nrpc ROISetColor (ROISetColorRequest) returns (Response) {}\nrpc ROIOpacity (ROI) returns (ROIOpacityResponse) {}\nrpc ROISetOpacity (ROISetOpacityRequest) returns (Response) {}\nrpc ROIThickness (ROI) returns (ROIThicknessResponse) {}\nrpc ROISetThickness (ROISetThicknessRequest) returns (Response) {}\nrpc ROIPoints (ROI) returns (ROIPointsResponse) {}\nrpc ROISetPoints (ROISetPointsRequest) returns (Response) {}\n</code></pre>"},{"location":"api/roi.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message ROIXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> roi.proto (lines 9-59)<pre><code>message ROIAreaResponse{\n    Status status = 1;\n    float area = 2;\n}\n\nmessage ROICentroidResponse{\n    Status status = 1;\n    float x = 2;\n    float y = 3;\n}\n\nmessage ROIPixResponse{\n    Status status = 1;\n    DCMPix pix = 2;\n}\n\nmessage ROINameResponse{\n    Status status = 1;\n    string name = 2;\n}\n\nmessage ROIColorResponse{\n    Status status = 1;\n    int32 r = 2;\n    int32 g = 3;\n    int32 b = 4; \n}\n\nmessage ROIOpacityResponse{\n    Status status = 1;\n    float opacity = 2;\n}\n\nmessage ROIThicknessResponse{\n    Status status = 1;\n    float thickness = 2;\n}\n\nmessage ROIPointsResponse{\n    message Point2D{\n        float x = 1;\n        float y = 2;\n    }\n    Status status = 1;\n    repeated Point2D points = 2;\n}\n\nmessage ROIITypeResponse{\n    Status status = 1;\n    int32 itype = 2;\n}\n</code></pre>"},{"location":"api/roi.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message ROIXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import roi_pb2\n\nrequest = roi_pb2.ROIXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> roi.proto (lines 61-)<pre><code>// Message requests\nmessage ROIRotateRequest{\n    ROI roi = 1;\n    float degrees = 2;\n    float x = 3;\n    float y = 4;\n}\n\nmessage ROIMoveRequest{\n    ROI roi = 1;\n    int32 columns = 2;\n    int32 rows = 3;\n}\n\nmessage ROISetNameRequest{\n    ROI roi = 1;\n    string name = 2;\n}\n\nmessage ROISetColorRequest{\n    ROI roi = 1;\n    int32 r = 2;\n    int32 g = 3;\n    int32 b = 4;\n}\n\nmessage ROISetOpacityRequest{\n    ROI roi = 1;\n    float opacity = 2;\n}\n\nmessage ROISetThicknessRequest{\n    ROI roi = 1;\n    float thickness = 2;\n}\n\nmessage ROISetPointsRequest{\n    message Point2D{\n        float x = 1;\n        float y = 2;\n    }\n    ROI roi = 1;\n    repeated Point2D points = 2;\n}\n</code></pre>"},{"location":"api/roivolume.html","title":"ROI Volumes","text":"<p>ROIVolume is a class representing volumetric regions of interest within an OsiriX 3D display window. It provides  control of the visibility and color of the object.</p>"},{"location":"api/roivolume.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 25-27)<pre><code>message ROIVolume{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/roivolume.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc ROIVolumeXyz (ROIVolumeXyzRequest) returns (ROIVolumeXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.ROIVolumeXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>ROIVolumeXyzResponse</code> class, and <code>request</code> a <code>ROIVolumeXyzRequest</code> class.</li> </ol> osirix.proto (lines 47-57)<pre><code>rpc ROIVolumeTexture (ROIVolume) returns (ROIVolumeTextureResponse) {}\nrpc ROIVolumeSetTexture (ROIVolumeSetTextureRequest) returns (Response) {}\nrpc ROIVolumeVolume (ROIVolume) returns (ROIVolumeVolumeResponse) {}\nrpc ROIVolumeColor(ROIVolume) returns (ROIVolumeColorResponse) {}\nrpc ROIVolumeSetColor(ROIVolumeSetColorRequest) returns (Response) {}\nrpc ROIVolumeOpacity(ROIVolume) returns (ROIVolumeOpacityResponse) {}\nrpc ROIVolumeSetOpacity(ROIVolumeSetOpacityRequest) returns (Response) {}\nrpc ROIVolumeFactor(ROIVolume) returns (ROIVolumeFactorResponse) {}\nrpc ROIVolumeSetFactor(ROIVolumeSetFactorRequest) returns (Response) {}\nrpc ROIVolumeName(ROIVolume) returns (ROIVolumeNameResponse) {}\nrpc ROIVolumeVisible (ROIVolume) returns (ROIVolumeVisibleResponse) {}\n</code></pre>"},{"location":"api/roivolume.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message ROIVolumeXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> roivolume.proto (lines 9-44)<pre><code>message ROIVolumeTextureResponse{\n    Status status = 1;\n    bool texture = 2;\n}\n\nmessage ROIVolumeVolumeResponse{\n    Status status = 1;\n    float volume = 2;\n}\n\nmessage ROIVolumeColorResponse{\n    Status status = 1;\n    float r = 2;\n    float g = 3;\n    float b = 4;\n}\n\nmessage ROIVolumeOpacityResponse{\n    Status status = 1;\n    float opacity = 2;\n}\n\nmessage ROIVolumeFactorResponse{\n    Status status = 1;\n    float factor = 2;\n}\n\nmessage ROIVolumeVisibleResponse{\n    Status status = 1;\n    bool visible = 2;\n}\n\nmessage ROIVolumeNameResponse{\n    Status status = 1;\n    string name = 2;\n}\n</code></pre>"},{"location":"api/roivolume.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message ROIVolumeXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import roivolume_pb2\n\nrequest = roivolume_pb2.ROIVolumeXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> roivolume.proto (lines 48-)<pre><code>message ROIVolumeSetTextureRequest{\n    ROIVolume roi = 1;\n    bool texture = 2;\n}\n\nmessage ROIVolumeSetColorRequest{\n    ROIVolume roi = 1;\n    float r = 2;\n    float g = 3;\n    float b = 4;\n}\n\nmessage ROIVolumeSetOpacityRequest{\n    ROIVolume roi = 1;\n    float opacity = 2;\n}\n\nmessage ROIVolumeSetFactorRequest{\n    ROIVolume roi = 1;\n    float factor = 2;\n}\n</code></pre>"},{"location":"api/viewercontroller.html","title":"Viewer Controller","text":"<p>ViewerController is a class representing the 2D image rendering viewer of OsiriX.  It is used to obtain  display information such as window settings and window title, and control contents (DCMPix and ROIs).</p>"},{"location":"api/viewercontroller.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 13-15)<pre><code>message ViewerController{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/viewercontroller.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc ViewerControllerXyz (ViewerControllerXyzRequest) returns (ViewerControllerXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.ViewerControllerXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>ViewerControllerXyzResponse</code> class, and <code>request</code> a <code>ViewerControllerXyzRequest</code> class.</li> </ol> osirix.proto (lines 93-115)<pre><code>rpc ViewerControllerCloseViewer (ViewerController) returns (Response) {}\nrpc ViewerControllerPixList (ViewerControllerPixListRequest) returns (ViewerControllerPixListResponse) {}\nrpc ViewerControllerNeedsDisplayUpdate (ViewerController) returns (Response) {}\nrpc ViewerControllerROIList (ViewerControllerROIListRequest) returns (ViewerControllerROIListResponse) {}\nrpc ViewerControllerNewROI (ViewerControllerNewROIRequest) returns (ViewerControllerNewROIResponse) {}\nrpc ViewerControllerCurDCM (ViewerController) returns (ViewerControllerCurDCMResponse) {}\nrpc ViewerControllerROIsWithName (ViewerControllerROIsWithNameRequest) returns (ViewerControllerROIsWithNameResponse) {}\nrpc ViewerControllerSelectedROIs (ViewerController) returns (ViewerControllerSelectedROIsResponse) {}\nrpc ViewerControllerIsDataVolumic (ViewerControllerIsDataVolumicRequest) returns (ViewerControllerIsDataVolumicResponse) {}\nrpc ViewerControllerCopyViewerWindow (ViewerControllerCopyViewerWindowRequest) returns (Response) {}\nrpc ViewerControllerResampleViewerController (ViewerControllerResampleViewerControllerRequest) returns (Response) {}\nrpc ViewerControllerBlendingController (ViewerController) returns (ViewerControllerBlendingControllerResponse) {}\nrpc ViewerControllerVRControllers (ViewerController) returns (ViewerControllerVRControllersResponse) {}\nrpc ViewerControllerTitle (ViewerController) returns (ViewerControllerTitleResponse) {}\nrpc ViewerControllerModality (ViewerController) returns (ViewerControllerModalityResponse) {}\nrpc ViewerControllerMovieIdx (ViewerController) returns (ViewerControllerMovieIdxResponse) {}\nrpc ViewerControllerSetMovieIdx (ViewerControllerSetMovieIdxRequest) returns (Response) {}\nrpc ViewerControllerMaxMovieIdx (ViewerController) returns (ViewerControllerMaxMovieIdxResponse) {}\nrpc ViewerControllerIdx (ViewerController) returns (ViewerControllerIdxResponse) {}\nrpc ViewerControllerSetIdx (ViewerControllerSetIdxRequest) returns (Response) {}\nrpc ViewerControllerWLWW (ViewerController) returns (ViewerControllerWLWWResponse) {}\nrpc ViewerControllerSetWLWW (ViewerControllerSetWLWWRequest) returns (Response) {}\nrpc ViewerControllerOpenVRViewerForMode (ViewerControllerOpenVRViewerForModeRequest) returns (ViewerControllerOpenVRViewerForModeResponse) {}\n</code></pre>"},{"location":"api/viewercontroller.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message ViewerControllerXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> viewercontroller.proto (lines 9-91)<pre><code>message ViewerControllerPixListResponse{\n    Status status = 1;\n    repeated DCMPix pix = 2;\n}\n\nmessage ViewerControllerROIListResponse{\n    message ROISlice{\n        repeated ROI rois = 1; \n    }\n    Status status = 1;\n    repeated ROISlice roi_slices = 2;\n}\n\nmessage ViewerControllerNewROIResponse{\n    Status status = 1;\n    ROI roi = 2;\n}\n\nmessage ViewerControllerCurDCMResponse{\n    Status status = 1;\n    DCMPix pix = 2;\n}\n\nmessage ViewerControllerROIsWithNameResponse{\n    Status status = 1;\n    repeated ROI rois = 2;\n}\n\nmessage ViewerControllerSelectedROIsResponse{\n    Status status = 1;\n    repeated ROI rois = 2;\n}\n\nmessage ViewerControllerIsDataVolumicResponse{\n    Status status = 1;\n    bool is_volumic = 2;\n}\n\nmessage ViewerControllerBlendingControllerResponse{\n    Status status = 1;\n    ViewerController blending_viewer = 2;\n}\n\nmessage ViewerControllerVRControllersResponse{\n    Status status = 1;\n    repeated VRController vr_controllers = 2;\n}\n\nmessage ViewerControllerTitleResponse{\n    Status status = 1;\n    string title = 2;\n}\n\nmessage ViewerControllerModalityResponse{\n    Status status = 1;\n    string modality = 2;\n}\n\nmessage ViewerControllerMovieIdxResponse{\n    Status status = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerMaxMovieIdxResponse{\n    Status status = 1;\n    int32 max_movie_idx = 2;\n}\n\nmessage ViewerControllerIdxResponse{\n    Status status = 1;\n    int32 idx = 2;\n}\n\nmessage ViewerControllerWLWWResponse{\n    Status status = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage ViewerControllerOpenVRViewerForModeResponse{\n    Status status = 1;\n    VRController vr_controller = 2;\n}\n</code></pre>"},{"location":"api/viewercontroller.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message ViewerControllerXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import viewercontroller_pb2\n\nrequest = viewercontroller_pb2.ViewerControllerXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> viewercontroller.proto (lines 95-)<pre><code>message ViewerControllerPixListRequest{\n    ViewerController viewer_controller = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerROIListRequest{\n    ViewerController viewer_controller = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerNewROIRequest{\n    message Buffer{\n        repeated bool buffer = 1;\n        int32 rows = 2;\n        int32 columns = 3;\n    }\n    message Point2D{\n        float x = 1;\n        float y = 2;\n    }\n    message Color{\n        int32 r = 1;\n        int32 g = 2;\n        int32 b = 3;\n    }\n    message Rect{\n        float origin_x = 1;\n        float origin_y = 2;\n        float height = 3;\n        float width = 4;\n    }\n    ViewerController viewer_controller = 1;\n    int32 itype = 2;\n    string name = 3;\n    int32 position = 4;\n    int32 movie_idx = 5;\n    int32 buffer_position_x = 6;\n    int32 buffer_position_y = 7;\n    Color color = 8;\n    float thickness = 9;\n    float opacity = 10;\n    Buffer buffer = 11;\n    repeated Point2D points = 12;\n    Rect rectangle = 13;\n}\n\nmessage ViewerControllerROIsWithNameRequest{\n    ViewerController viewer_controller = 1;\n    string name = 2;\n    int32 movie_idx = 3;\n    bool in_4d = 4;\n}\n\nmessage ViewerControllerResampleViewerControllerRequest{\n    ViewerController viewer_controller = 1;\n    ViewerController fixed_viewer_controller = 2;\n}\n\nmessage ViewerControllerCopyViewerWindowRequest{\n    ViewerController viewer_controller = 1;\n    bool in_4d = 2;\n}\n\nmessage ViewerControllerSetMovieIdxRequest{\n    ViewerController viewer_controller = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerIsDataVolumicRequest{\n    ViewerController viewer_controller = 1;\n    bool in_4d = 2;\n}\n\nmessage ViewerControllerSetIdxRequest{\n    ViewerController viewer_controller = 1;\n    int32 idx = 2;\n}\n\nmessage ViewerControllerSetWLWWRequest{\n    ViewerController viewer_controller = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage ViewerControllerOpenVRViewerForModeRequest{\n    ViewerController viewer_controller = 1;\n    string mode = 2;\n}\n</code></pre>"},{"location":"api/vrcontroller.html","title":"VR Controller","text":"<p>VRController is a class representing the 3D volume rendering viewer of OsiriX.  It is used to obtain/control  display information such as window settings, window title, and the type of volume render.</p>"},{"location":"api/vrcontroller.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 13-15)<pre><code>message VRController{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/vrcontroller.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc VRControllerXyz (VRControllerXyzRequest) returns (VRControllerXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.VRControllerXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>VRControllerXyzResponse</code> class, and <code>request</code> a <code>VRControllerXyzRequest</code> class.</li> </ol> osirix.proto (lines 79-90)<pre><code>rpc VRControllerViewer2D (VRController) returns (VRControllerViewer2DResponse) {}\nrpc VRControllerBlendingController (VRController) returns (VRControllerBlendingControllerResponse) {}\nrpc VRControllerStyle (VRController) returns (VRControllerStyleResponse) {}\nrpc VRControllerTitle (VRController) returns (VRControllerTitleResponse) {}\nrpc VRControllerROIVolumes (VRController) returns (VRControllerROIVolumesResponse) {}\nrpc VRControllerRenderingMode (VRController) returns (VRControllerRenderingModeResponse) {}\nrpc VRControllerSetRenderingMode (VRControllerSetRenderingModeRequest) returns (Response) {}\nrpc VRControllerWLWW (VRController) returns (VRControllerWLWWResponse) {}\nrpc VRControllerSetWLWW (VRControllerSetWLWWRequest) returns (Response) {}\nrpc VRControllerHideROIVolume (VRControllerHideROIVolumeRequest) returns (Response) {}\nrpc VRControllerDisplayROIVolume (VRControllerDisplayROIVolumeRequest) returns (Response) {}\nrpc VRControllerNeedsDisplayUpdate (VRController) returns (Response) {}\n</code></pre>"},{"location":"api/vrcontroller.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message VRControllerXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> vrcontroller.proto (lines 9-43)<pre><code>message VRControllerViewer2DResponse{\n    Status status = 1;\n    ViewerController viewer_controller = 2;\n}\n\nmessage VRControllerBlendingControllerResponse{\n    Status status = 1;\n    ViewerController viewer_controller = 2;\n}\n\nmessage VRControllerRenderingModeResponse{\n    Status status = 1;\n    string rendering_mode = 2;\n}\n\nmessage VRControllerWLWWResponse{\n    Status status = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage VRControllerStyleResponse{\n    Status status = 1;\n    string style = 2;\n}\n\nmessage VRControllerTitleResponse{\n    Status status = 1;\n    string title = 2;\n}\n\nmessage VRControllerROIVolumesResponse{\n    Status status = 1;\n    repeated ROIVolume roi_volumes = 2;\n}\n</code></pre>"},{"location":"api/vrcontroller.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message VRControllerXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import vrcontroller_pb2\n\nrequest = vrcontroller_pb2.VRControllerXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> vrcontroller.proto (lines 46-)<pre><code>message VRControllerSetRenderingModeRequest{\n    VRController vr_controller = 1;\n    string rendering_mode = 2;\n}\n\nmessage VRControllerSetWLWWRequest{\n    VRController vr_controller = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage VRControllerHideROIVolumeRequest{\n    VRController vr_controller = 1;\n    ROIVolume roi_volume = 2;\n}\n\nmessage VRControllerDisplayROIVolumeRequest{\n    VRController vr_controller = 1;\n    ROIVolume roi_volume = 2;\n}\n</code></pre>"}]}