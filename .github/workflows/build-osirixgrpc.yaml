name: Build OsiriXgrpc

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest-xlarge

    env:
      GRPC_VERSION: 1.55.0
      BUILD_PATH: "build"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Apple certificate
        env:
          P12_CERTIFICATE: ${{ secrets.P12_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH

          echo $CERTIFICATE_PATH
          echo $KEYCHAIN_PATH
          local_hash=$(shasum -a 256 $CERTIFICATE_PATH | awk '{print $1}')
          echo $local_hash
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "Done security"

          # import certificate to keychain
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: grpc_build_env
          python-version: 3.8
          miniconda-version: "latest"
          
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest  # Use the appropriate Xcode version

      - name: Cache gRPC libraries
        id: cache-grpc
        uses: actions/cache@v3
        with:
          path: |
            grpc/install
          key: |
            ${{ runner.os }}-build-$GRPC_VERSION

      - if: ${{ steps.cache-grpc.outputs.cache-hit != 'true' }}
        name: Clone gRPC repository
        run: git clone --recurse-submodules -b v"$GRPC_VERSION" https://github.com/grpc/grpc

      - if: ${{ steps.cache-grpc.outputs.cache-hit != 'true' }}
        name: Build/install x86_64 grpc libraries
        run: |
          cd grpc
          mkdir -p cmake/build-x86_64
          mkdir -p install-x86_64
          cd cmake/build-x86_64
          cmake -DgRPC_INSTALL=ON \
                -DgRPC_BUILD_TESTS=OFF \
                -DCMAKE_INSTALL_PREFIX=../../install-x86_64 \
                -DCMAKE_OSX_ARCHITECTURES=x86_64 \
                ../..
          make -j 4
          make install

      - if: ${{ steps.cache-grpc.outputs.cache-hit != 'true' }}
        name: Build/install arm64 grpc libraries
        run: |
          cd grpc
          mkdir -p cmake/build-arm64
          mkdir -p install-arm64
          cd cmake/build-arm64
          cmake -DgRPC_INSTALL=ON \
                -DgRPC_BUILD_TESTS=OFF \
                -DCMAKE_INSTALL_PREFIX=../../install-arm64 \
                -DCMAKE_OSX_ARCHITECTURES=arm64 \
                ../..
          make -j 4
          make install

      - if: ${{ steps.cache-grpc.outputs.cache-hit != 'true' }}
        name: Create universal libraries
        run: |
          cd grpc
          universal_library_output="install/lib"
          mkdir -p "$universal_library_output"
          for file1 in install-arm64/lib/*.a; do
            filename=$(basename "$file1" .a)
            file2="install-x86_64/lib/$filename.a"
            if [ -f "$file2" ]; then
              lipo -create -output "$universal_library_output/$filename.a" "$file1" "$file2"
              echo "Combined $filename.a"
            else
              echo "Skipping $filename.a, corresponding file not found in install-x86_64"
            fi
          done

      - if: ${{ steps.cache-grpc.outputs.cache-hit != 'true' }}
        name: Copy relevant binaries/headers
        run: |
          cd grpc
          machine_arch=$(arch)
          cp -r install-$machine_arch/bin install
          cp -r install-$machine_arch/include install

      - name: Build cpp definitions
        run: |
          mkdir -p cpp
          grpc/install/bin/protoc -I protos --grpc_out=cpp --plugin=protoc-gen-grpc=grpc/install/bin/grpc_cpp_plugin osirix.proto
          grpc/install/bin/protoc -I protos --cpp_out=cpp osirix.proto roi.proto roivolume.proto dcmpix.proto vrcontroller.proto viewercontroller.proto browsercontroller.proto dicomimage.proto dicomstudy.proto dicomseries.proto utilities.proto types.proto

      - name: Build Python definitions
        run: |
          mkdir -p python/osirixgrpc
          grpc/install/bin/protoc -I protos --grpc_python_out=python/osirixgrpc --plugin=protoc-gen-grpc_python=grpc/install/bin/grpc_python_plugin osirix.proto 
          grpc/install/bin/protoc -I protos --python_out=python/osirixgrpc osirix.proto roi.proto roivolume.proto dcmpix.proto vrcontroller.proto viewercontroller.proto browsercontroller.proto dicomimage.proto dicomstudy.proto dicomseries.proto utilities.proto types.proto
          
      - name: Update requirements file
        run: |
          echo "grpcio>=$GRPC_VERSION" > python/requirements.txt
          echo "grpcio-tools>=$GRPC_VERSION" >> python/requirements.txt

      - name: Build project
        run: |
          mkdir -p "$BUILD_PATH"
          xcodebuild -project src/osirixgrpc.xcodeproj -scheme osirixgrpc_build -destination "generic/platform=macOS" CONFIGURATION_BUILD_DIR="$BUILD_PATH" build
          ls .

      - name: List contents
        run: |
          echo "Contents of $BUILD_PATH"
          ls -R src/"$BUILD_PATH"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: osirixgrpc-build
          path: src/${{ env.BUILD_PATH }}/osirixgrpc.osirixplugin
