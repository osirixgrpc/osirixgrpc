{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"OsiriXgrpc","text":"<p>Welcome to OsiriXgrpc, a research plugin for the popular OsiriX medical image  viewing platform for macOS. It leverages the gRPC architecture to provide fast communication between  OsiriX (the server) and custom-built software or scripts running on a different local process (the client).  This  enables fast development of additional OsiriX functionality, including the adoption of state-of-the-art libraries for  image processing and artificial intelligence.  Currently, Python is the only in-built supported language, though adoption of other languages can be easily achieved.  </p> <p>Using osirixgrpc versus pyosirix</p> <p>It can be much simpler to interact with OsiriXgrpc using the more pythonic pyOsiriX glue code. See the dedicated documentation for further information.</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>For instructions on how to install and set up the plugin, please see the getting started page.</p>"},{"location":"index.html#any-suggestions","title":"Any suggestions?","text":"<p>We are always happy to receive suggestions for future versions of the plugin, or just to hear about what is or isn't  working. We would appreciate if this is done by raising an issue.  Please see more information in our contributing section.</p>"},{"location":"index.html#any-questions","title":"Any questions?","text":"<p>We are happy to answer any questions on the use of osirixgrpc, but please do so by raising an  issue so that others can benefit from the answer. Please ensure that  you use the relevant issue template so that we get all the information we need!</p>"},{"location":"index.html#future-ambitions","title":"Future Ambitions","text":"<p>We are always looking to improve things. We have a few suggestions in our roadmap, and would be happy to hear your  thoughts - please let us know using a <code>feature request</code> issue  template.</p> <ul> <li>Support for other scripting languages including Java and Ruby.</li> <li>Improve security through SSL/TCL encryption.</li> </ul>"},{"location":"index.html#funding","title":"Funding","text":"<p>We thank the MedTech SuperConnector for helping to support this work: https://medtechsuperconnector.com/.  This work was also supported by the International Accelerator Award funded by Cancer Research UK [C56167/A29363],  Associazione Italiana per la Ricerca sul Cancro [AIRC - 24297] and Fundacion Cient\u00edfica \u2013 Asociacion Espanola Contra el  Cancer [Foundation AECC - GEACC19007MA] (https://sarcomaaccelerator.org.uk/). </p>"},{"location":"getting_started.html","title":"Getting Started","text":"<p>The following steps demonstrate how to install the plugin and subsequently start up a local OsiriX server and run  scripts that can be defined in any source file on your system. To see how to write GRPC client code for use with  OsiriXgrpc please see the API.  </p> <p>The OsiriXgrpc plugin consists of three core functionalities, all of which are accessible from the OsiriX submenus at <code>Plugins</code> \u2192 <code>Database</code> \u2192 <code>osirixgrpc</code>:</p> <ol> <li>Server Configuration allows you to start and stop OsiriXgrpc servers. At lease one server must be active in     clients to be able to communicate with OsiriX.</li> <li>Script Management provides the list of client files currently registered by OsiriXgrpc that can be run through     the OsiriXgrpc menu bars. This includes the locations of the scripts and executable used to run them. </li> <li>Task Console shows the currently running scripts and provides a location for all stdout and stderr messages to    recorded.</li> </ol>"},{"location":"getting_started.html#installation","title":"Installation","text":"<ol> <li>Download the latest release.</li> <li>Extract the downloaded archive.</li> <li>Drag the <code>osirixgrpc.osirixplugin</code> file to the OsiriX application you want to install to.</li> <li>Follow instructions for further installation.</li> </ol>"},{"location":"getting_started.html#server-configuration","title":"Server Configuration","text":"<p>OsiriXgrpc servers can be started and paused using the server configuration window.  To start one of the available servers, press the \u25b6 button and the <code>Active</code> status will turn green once this has  been successful (\u25cf). Alternatively, to stop a running server press \u25a0 and the <code>Active</code> status will turn red (\u25cf). If, for any reason, the server cannot be started or shutdown, an error message should appear at the bottom of the window.</p> <p>By pressing the \"+\" it is possible to add a new server, or remove one by \"-\". Any unique port number can be chosen, and  checks will be made prior to starting the server that the port is available.</p> <p>Note: For security reasons, all OsiriXgrpc servers are local (IP address 127.0.0.1). Only clients run on the same machine as the OsiriX app have access to the API. If communication is required with another machine on a network (a GPU  node for example), this can be achieved by the client as necessary.</p> <p>Note: All servers are run on a separate thread to the main OsiriX thread.</p> <p>Note: The list of available server port numbers are available to outside applications as a JSON file located in   the directory <code>/Users/username/Library/Application Support/OsiriXGRPC/server_configs.json</code>.  For each server the IP   address (always 127.0.0.1), port, and active status are available.  The order of preference matches that in server    configuration window.</p>"},{"location":"getting_started.html#script-management","title":"Script Management","text":"<p>Although not necessary, scripts can be registered with OsiriXgrpc so that users can run them without needing to see any  code whatsoever. To register a script, select the <code>Script Management</code> plugin sub-menu to start the script database  console. </p> <ul> <li><code>Name</code>: The name of the script, which is automatically taken as the filename (without file extension).</li> <li><code>Type</code>: A drop-down that determines which drop-down menu contains the button to start the script.<ul> <li><code>Database</code>: Scripts that generally deal with user-selection in the OsiriX Dicom database (main screen).</li> <li><code>Image</code>: Scripts that generally perform some image manipulation (e.g. filtering or segmentation)</li> <li><code>VRController</code>: Scripts that generally operate on the 3D viewer.</li> <li><code>ROI</code>: Scripts that generally manipulate drawn regions of interest.</li> </ul> </li> <li><code>Blocking</code>: Scripts that are blocking, block the OsiriX runtime until the script has finished running. This is     generally undesired, but might be necessary to avoid conflicts of user operation.</li> <li><code>Language</code>: Automatically detects which language is used. Currently, we only support Python.</li> <li><code>Location</code>: The complete path to the script file. This cannot be edited - please remove the script if no longer      accurate.</li> <li><code>Interpreter</code>: The complete path to the binary file used to run the script. We strongly suggest that for Python      scripts this should be an interpreter managed by an environment manager such as conda. This      will make package management easy!</li> </ul> <p>To add or remove a script, press the \"+\" or \"-\" keys. When adding a script, the console will ask for the location of  the script file.  The location of the interpreter should be manually set afterwards.</p>"},{"location":"getting_started.html#drop-down-menus","title":"Drop-down menus","text":"<p>All registered scripts can be started from dedicated menus.  These menus are not visible by default.  To add them to  either (i) the Database viewer, (ii) the image viewer, or (iii) the volume-render viewer, please right-click the top  ribbon toolbar in each of these windows, select <code>Customize Toolbar...</code>, and drag-and-drop the OsiriXgrpc menu item (<code>gRPC Tasks</code>) into a free slot on the toolbar.</p> <p>Note: Please restart OsiriX for all changes to take effect.</p>"},{"location":"getting_started.html#task-console","title":"Task Console","text":"<p>The task console provides all stdout and stderr messages for the registered scripts run through the script management  interface. Outputs can be saved and the console can be cleared. </p>"},{"location":"getting_started.html#osirixgrpc-basics","title":"OsiriXgrpc Basics","text":"<p>The figure below presents the core OsiriXgrpc components, their core functionality, and how they interact with one  another. Note that this is meant to be an overview only.  Precise implementation details will depend on the API you use to interact with OsiriX through OsiriXgrpc, for example through the OsiriXgrpc API or via the  pyOsiriX submodule.  </p>"},{"location":"getting_started.html#browsercontroller","title":"BrowserController","text":"<p>Represents the core Dicom database of OsiriX. It contains references to all the Dicom instances that have been  imported as three nested objects: DicomStudy, DicomSeries, and DicomImage. Access to the Browser can be achieved in OsiriXgrpc using the <code>OsirixCurrentBrowser</code> message. See the BrowserController API for more details.</p>"},{"location":"getting_started.html#dicomstudy","title":"DicomStudy","text":"<p>Represents a complete Dicom study, encompassing both instances of DicomSeries and  DicomImage. Also contains relevant metadata for the enclosed Dicom instance (patient name, study date, modalities etc.). See the DicomStudy API for more details.</p>"},{"location":"getting_started.html#dicomseries","title":"DicomSeries","text":"<p>Represents a Dicom series, encompassing instances DicomImage. Also contains relevant metadata for the  enclosed Dicom instance (series description, modality etc.). See the DicomSeries API for more  details.</p>"},{"location":"getting_started.html#dicomimage","title":"DicomImage","text":"<p>Represents a Dicom image (frame). Contains the complete path of the stored Dicom file on the host machine, accessible  via the <code>DicomImageCompletePath</code> message. Also contains relevant metadata for the  image (width, height, SOPInstanceUID). See the DicomSeries API for more details.</p>"},{"location":"getting_started.html#viewercontroller","title":"ViewerController","text":"<p>An open 2D image viewer, with all associated viewing details such as windowing setting, color-lookup table, displayed  slice etc. Use this to change how images are displayed within OsiriX to the user. Contained data are always displayed  in 4D, with only a single frame if no movie data are displayed.  Access to the currently active viewer (framed by a red box) can be achieved in OsiriXgrpc using the  <code>OsirixFrontmostViewer</code> message, or access to all viewers via the  <code>OsirixDisplayed2DViewers</code> message. See the ViewerController API for  more details.</p>"},{"location":"getting_started.html#dcmpix","title":"DCMPix","text":"<p>An object representing raw image data, including the location of the original Dicom file. Can be either greyscale  (floating points values) or ARGB format (each channel is unsigned short with range 0-255). There are utility messages  that allow you convert between the two. See the DCMPix API for more details.</p>"},{"location":"getting_started.html#roi","title":"ROI","text":"<p>Regions of interest drawn by the user. In general there are two kinds: polygonal and mask. However, polygonal ROIs come in different forms depending on how the user has drawn them (e.g. closed, open, line measurement). For more  information on this, it is best to check the pyOsiriX documentation. However, in general, polygonal ROIs are represented as an ordered list of 2-element tuples, each representing a column/row for a vertex  (non-integer). Mask ROIs are represented by a 2D array of boolean values. Other ROI attributes such as color, name, thickness, opacity etc. can be modified. Creation of new ROIs must be dones through the appropriate  ViewerController object.  See the ROI API for other details.</p>"},{"location":"getting_started.html#vrcontroller","title":"VRController","text":"<p>Represents the viewer displaying 3D data. These are always associated with some underlying 2D data via a  ViewerController object. Access to the currently active controller can be achieved in OsiriXgrpc  using the <code>OsirixFrontmostVRController</code> message, or access to all viewers via the  <code>OsirixDisplayedVRControllers</code> message. Provides access and allows control of display attributes including windowing settings and whether the volume render is  in Maximum Intensity Project (MIP) or Volume Render (VR) mode. Also provides access to instances of  (ROIVolume)[#roivolume]. See the VRController API for more details.</p>"},{"location":"getting_started.html#roivolume","title":"ROIVolume","text":"<p>Represents a volume of ROIs, all of which have the same name. Volumes can only be generated where there is a single ROI  of the same name on each imaging slice. Provides some immutable attributes such as ROI volume, and some mutable ones  such as color, opacity and texture. See the ROIVolume API for more details.</p> <p>Note: ROIs in OsiriX are grouped by name!</p>"},{"location":"getting_started.html#next-steps","title":"Next Steps","text":"<p>Congratulations! You should now be ready to create client scripts to interact with OsiriX. For next steps see Basics of OsiriXgrpc, or even better we suggest the  pyOsiriX documentation.</p>"},{"location":"api/index.html","title":"Basics","text":"<p>Note: This is the long-winded way to do things. We strongly encourage using the    pyosirix library for day-to-day development. However, this does provide an indication of   what is happening \"under the hood\".</p> <p>gRPC supports many languages, including C++, Java, Go, Node.js, and PHP.  We currently only support use of Python because the libraries available image processing and machine-learning, and offers a relatively short learning curve. All examples are therefore shown in Python, but if you are  interested in generating the GRPC code for other client languages, then please see the  contributing section and enclosed pages.</p>"},{"location":"api/index.html#requirements","title":"Requirements","text":"<p>The requirements for working with the Python osirixgrpc library are <pre><code>grpcio&gt;=1.55.0\ngrpcio-tools&gt;=1.55.0\n</code></pre></p>"},{"location":"api/index.html#connecting-to-the-server","title":"Connecting to the Server","text":"<p>To establish a connection with the OsiriXgrpc plugin server, you initiate a service instance (<code>OsiriXServiceStub</code>)  provided by the <code>osirix_pb2_grpc</code> module. Currently, this process necessitates the use of an insecure channel on the  local system (localhost), as detailed below. Please be aware that the specified port must align with one of the active  ports displayed in the OsiriXgrpc plugin.(see Server Configuration).</p> Example Python code to establish gRPC connection<pre><code>import grpc\nfrom osirixgrpc import osirix_pb2_grpc\n\nport = 50001  # (1)\nserver_url_localhost = 'localhost:' + str(port)\nchannel_opt = [('grpc.max_send_message_length', 512 * 1024 * 1024), \n               ('grpc.max_receive_message_length', 512 * 1024 * 1024)] # (2)\nchannel = grpc.insecure_channel(server_url_localhost, options=channel_opt)\nstub = osirix_pb2_grpc.OsiriXServiceStub(channel)\n</code></pre> <ol> <li>Must match activated port in the OsiriX plugin.  See Server Configuration.</li> <li>This could change depending on intended use.</li> </ol>"},{"location":"api/index.html#requests-and-responses","title":"Requests and Responses","text":"<p>After establishing a connection, following the conventions of standard  gRPC practices, OsiriXgrpc utilizes two classes of 'message' for  communication with the OsiriX plugin server: requests and responses . Similar to conventional functions,  requests encapsulate all arguments passed to defined service methods, while responses encapsulate the returned results.  The definitions for all service methods are outlined in the <code>osirix.proto</code> source file. Details about available methods are provided in specific pages in the API documentation.   </p> <p>In order to replicate methods that don't necessitate input arguments (e.g., getters) or those that don't require  returning results (e.g., setters), we have introduced a base response and request for these specific cases.  These base definitions are located in the <code>utilities.proto</code> file Empty response and request definition (utilities.proto)<pre><code>// Base response for methods that don't pass results (e.g. setters)\nmessage Response{\n    Status status = 1;\n}\n\n// Empty request for methods that don't expect arguments (e.g. getters)\nmessage Empty{\n\n}\n</code></pre></p> <p>Note that even empty responses contain a field called <code>Status</code> Status definition (utilities.proto)<pre><code>message Status{\n    int32 status = 1;  // 0 for error, 1 for success\n    string message = 2;\n}\n</code></pre></p> <p>This message contains a single (binary) integer <code>status</code>, with values 0 and 1 representing unsuccessful and successful  method execution respectively, and a string <code>message</code>, which contains an error message in the even that <code>status=0</code>.</p>"},{"location":"api/index.html#osirixgrpc-types","title":"OsiriXGRPC types","text":"<p>By default, gRPC is designed to work with standard data types (<code>int32</code>, <code>int64</code>, <code>uint32</code>, <code>uint64</code>, <code>float</code>, <code>double</code>,  <code>bool</code>, <code>and</code> <code>string</code>) within messages. However, OsiriXgrpc goes beyond this default capability by introducing support  for arbitrary classes defined within OsiriX. This extension is achieved through the definition of several \"types\" in the  <code>types.proto</code> file.</p> <p>In each defined type, there is an <code>osirixrpc_uid</code> field, containing a Universally Unique Identifier (UUID) string,  specifically a NextStep UUID string  (NSSUID string). This UUID is managed by  the OsiriXgrpc plugin and serves as a unique identifier linked to elements within the OsiriX application. This mechanism  enables seamless access to and interaction with various elements of the OsiriX app through gRPC communication.</p> Type definitions (types.proto)<pre><code>message BrowserController{\n    string osirixrpc_uid = 1;\n}\n\nmessage ViewerController{\n    string osirixrpc_uid = 1;\n}\n\nmessage VRController{\n    string osirixrpc_uid = 1;\n}\n\nmessage DCMPix{\n    string osirixrpc_uid = 1;\n}\n\nmessage ROI{\n    string osirixrpc_uid = 1;\n}\n\nmessage ROIVolume{\n    string osirixrpc_uid = 1;\n}\n\nmessage DicomImage{\n    string osirixrpc_uid = 1;\n}\n\nmessage DicomSeries{\n    string osirixrpc_uid = 1;\n}\n\nmessage DicomStudy{\n    string osirixrpc_uid = 1;\n}\n</code></pre>"},{"location":"api/index.html#core-osirxgrpc-methods","title":"Core OsirXgrpc methods","text":"<p>\"The secret of getting ahead is getting started\" (Mark Twain). </p> <p>To begin accessing elements of OsiriX, it is first necessary to get a hook onto one of the core objects it contains. There are five methods that can be used for this.</p> Core OsiriX access methods (osirix.proto)<pre><code>rpc OsirixCurrentBrowser (Empty) returns (OsirixCurrentBrowserResponse) {}\nrpc OsirixFrontmostViewer (Empty) returns (OsirixFrontmostViewerResponse) {}\nrpc OsirixDisplayed2DViewers (Empty) returns (OsirixDisplayed2DViewersResponse) {}\nrpc OsirixFrontmostVRController (Empty) returns (OsirixFrontmostVRControllerResponse) {}\nrpc OsirixDisplayedVRControllers (Empty) returns (OsirixDisplayedVRControllersResponse) {}\n</code></pre> <p>All methods require <code>Empty</code> requests, but have the following responses. Core OsiriX responses (osirix.proto)<pre><code>rpc DicomStudyModality (DicomStudy) returns (DicomStudyModalityResponse) {}\nrpc DicomStudyPatientID (DicomStudy) returns (DicomStudyPatientIDResponse) {}\nrpc DicomStudyPatientUID (DicomStudy) returns (DicomStudyPatientUIDResponse) {}\nrpc DicomStudyPatientSex (DicomStudy) returns (DicomStudyPatientSexResponse) {}\nrpc DicomStudyPerformingPhysician (DicomStudy) returns (DicomStudyPerformingPhysicianResponse) {}\nrpc DicomStudyReferringPhysician (DicomStudy) returns (DicomStudyReferringPhysicianResponse) {}\nrpc DicomStudyStudyInstanceUID (DicomStudy) returns (DicomStudyStudyInstanceUIDResponse) {}\nrpc DicomStudyStudyName (DicomStudy) returns (DicomStudyStudyNameResponse) {}\n}\n\n// Response messages\nmessage OsirixCurrentBrowserResponse{\n    Status status = 1;\n    BrowserController browser_controller = 2;\n}\n\nmessage OsirixFrontmostViewerResponse{\n    Status status = 1;\n    ViewerController viewer_controller = 2;\n}\n\nmessage OsirixDisplayed2DViewersResponse{\n    Status status = 1;\n    repeated ViewerController viewer_controllers = 2;\n}\n\nmessage OsirixFrontmostVRControllerResponse{\n    Status status = 1;\n    VRController vr_controller = 2;\n}\n\nmessage OsirixDisplayedVRControllersResponse{\n    Status status = 1;\n    repeated VRController vr_controllers = 2;\n}\n\nmessage OsirixVersionResponse{\n    Status status = 1;\n    string version = 2;\n    string bundle_name = 3;\n}\n\n\n// Cache requests / responses\nmessage OsirixCacheUidsResponse {\n    Status status = 1;\n    repeated string uids = 2;\n}\n\nmessage OsirixCacheObjectForUidResponse {\n    Status status = 1;\n    string object_type = 2;\n}\n\nmessage OsirixCacheObjectForUidRequest {\n    string uid = 1;\n}\n</code></pre></p>"},{"location":"api/index.html#examples","title":"Examples","text":"<p>Below are examples of how to use these functions using Python.  These all assume that a connection has been established as detailed in Connecting to the Server.</p>"},{"location":"api/index.html#accessing-information-from-the-database-browsercontroller","title":"Accessing information from the database (BrowserController)","text":"<p>This code can be used obtain a hook for the OsiriX database browser. <pre><code>from osirixgrpc import utilities_pb2\n\nempty_request = utilities_pb2.Empty()  # (1)\nbrowser_response = stub.OsirixCurrentBrowser(empty_request)\nif browser_response.status.status == 0: # (2)\n    raise Exception(f\"Could not get browser.  Reason: {browser_response.status.message}\")\nbrowser_controller = browser_response.browser_controller # (3)\n</code></pre></p> <ol> <li>Used for methods that do not require arguments </li> <li>Check that the method did not end in error and deal with it.</li> <li>A <code>BrowserController</code> type.</li> </ol> <p>This may subsequently be used get the current user selection (series and/or studies) within the browser. <pre><code>from osirixgrpc import browsercontroller_pb2\n\nselection_response = stub.BrowserControllerDatabaseSelection(browser_controller)\nseries = selection_response.series # (1)\nstudies = selection_response.studies # (2)\n</code></pre></p> <ol> <li>A list of <code>DicomSeries</code> types. </li> <li>A list of <code>DicomStudy</code> types.</li> </ol> <p>In turn, we can access and print the selected study names. <pre><code>from osirixgrpc import dicomstudy_pb2\n\nfor dicom_study in studies:\n    studyname_response = stub.DicomStudyName(dicom_study)\n    print(\"Study name: \", studyname_response.name)\n</code></pre></p> <p>Other methods are documented in the API documents for BrowserController.</p>"},{"location":"api/index.html#accessing-displayed-images-viewercontroller","title":"Accessing displayed images (ViewerController)","text":"<p>There are two ways to access a 2D viewer from OsiriX; either by accessing a list of all displayed viewers or by accessing the \"front-most\" viewer (currently selected). <pre><code>from osirixgrpc import utilities_pb2\n\nempty_request = utilities_pb2.Empty()\nfrontmostviewer_response = stub.OsirixFrontmostViewer(empty_request)\nfrontmost_viewer = frontmostviewer_response.viewer_controller  # (1)\n\nviewers_response = stub.OsirixDisplayed2DViewers(empty_request)\nviewers = viewers_response.viewer_controllers  # (2)\n</code></pre></p> <ol> <li>A <code>ViewerController</code> type.</li> <li>A list of <code>ViewerController</code> types.</li> </ol> <p>It is then possible to access the list of <code>DCMPix</code> objects attributed to the particular viewer <pre><code>from osirixgrpc import viewercontroller_pb2\n\npixlist_request = viewercontroller_pb2.ViewerControllerPixListRequest(viewer_controller=frontmost_viewer, \n                                                                      movie_idx=0) # (1)\npixlist_response = stub.ViewerControllerPixList(pixlist_request) # (2)\ndcm_pix = pixlist_response.pix # (3)\n</code></pre></p> <ol> <li>Note that the requested frame number must be provided (0 is first frame).</li> <li>A <code>ViewerControllerPixListResponse</code>.</li> <li>A list of <code>DCMPix</code> types.</li> </ol> <p>It then possible to get access to the contained image data. <pre><code>import numpy as np\n\npix_0 = dcm_pix[0]\nimage_response = stub.DCMPixImage(pix_0) # (1)\nrows = image_response.rows\ncolumns = image_response.columns\nif image_response.is_argb: # (2)\n    image_array = np.array(image_response.image_data_argb).reshape(rows, columns, 4)\nelse:\n    image_array = np.array(image_response.image_data_float).reshape(rows, columns) # (3)\n</code></pre></p> <ol> <li>An example of using a type as a request</li> <li>Images are either float (greyscale) or ARGB format</li> <li>The datastream does not contain dimensional information.</li> </ol> <p>This example introduced a case where the method request is a data type rather than an <code>Empty</code> request. This is typical  where the method obtains information about a given OsiriX object (<code>DCMPix</code> in this instance). The request for the list if <code>DCMPix</code> (<code>ViewerControllerPixListRequest</code>), however, is a dedicated request that must be built prior to calling the  method.</p>"},{"location":"api/index.html#manipulating-regions-of-interest-roi","title":"Manipulating regions of interest (ROI)","text":"<p>There are different kind of Region of Interest (ROI) available within OsiriX, but this can be somewhat broken into two core types: brush and polygon.  The former is defined by a boolean array, where true values are considered to be part of the ROI and false values outside, and the latter is defined by an ordered set of vertices. </p> <p>The following example demonstrates how ROIs can be obtained from a (2D) viewer controller, and subsequently rotates them  about the centroid by 30 degrees. Note that will not operate on brush ROIs, though no error is raised if attempted. <pre><code>from osirixgrpc import roi_pb2\n\nroilist_request = viewercontroller_pb2.ViewerControllerROIListRequest(viewer_controller=frontmost_viewer, \n                                                                      movie_idx=0) # (1)\nroilist_response = stub.ViewerControllerROIList(roilist_request) # (2)\nfor roi_slice in roilist_response.roi_slices:\n    for roi in roi_slice.rois:\n        centroid_response = stub.ROICentroid(roi)\n        rotate_request = roi_pb2.ROIRotateRequest(roi=roi,\n                                                  x=centroid_response.x,\n                                                  y=centroid_response.y,\n                                                  degrees=30.0)\n        rotate_response = stub.ROIRotate(rotate_request)\n        if rotate_response.status.status == 0:\n            raise ValueError(f\"Could not rotate: {rotate_response.status.meessage}\")\n</code></pre></p> <ol> <li>As for the <code>ViewerControllerPixListRequest</code>, this requires definition of the frame from which ROIs are needed.</li> <li><code>ViewerControllerROIListResponse</code> contains a list of ROI slices, one per image slice, each containing &gt;= 0 ROIs.</li> </ol> <p>A full breakdown of the other methods, requests and responses is provided in the remainder of the API documentation.</p>"},{"location":"api/browsercontroller.html","title":"Browser Controller","text":"<p>BrowserController is a class representing the database window of OsiriX. It provides some functionality for accessing user study/series selection, and a tool for data import.</p>"},{"location":"api/browsercontroller.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 5-7)<pre><code>message BrowserController{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/browsercontroller.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc BrowserControllerXyz (BrowserControllerXyzRequest) returns (BrowserControllerXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.BrowserControllerXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>BrowserControllerXyzResponse</code> class, and <code>request</code> a <code>BrowserControllerXyzRequest</code> class.</li> </ol> osirix.proto (lines 128-131)<pre><code>rpc BrowserControllerDatabaseSelection (BrowserController) returns (BrowserControllerDatabaseSelectionResponse) {}\nrpc BrowserControllerCopyFilesIfNeeded (BrowserControllerCopyFilesIfNeededRequest) returns (Response) {}\nrpc BrowserControllerOpenViewerFromImages (BrowserControllerOpenViewerFromImagesRequest) returns (BrowserControllerOpenViewerFromImagesResponse) {}\nrpc BrowserControllerDatabaseStudies (BrowserController) returns (BrowserControllerDatabaseStudiesResponse) {}\n</code></pre>"},{"location":"api/browsercontroller.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message BrowserControllerXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> browsercontroller.proto (lines 9-23)<pre><code>message BrowserControllerDatabaseSelectionResponse{\n    Status status = 1;\n    repeated DicomSeries series = 2;\n    repeated DicomStudy studies = 3;\n}\n\nmessage BrowserControllerOpenViewerFromImagesResponse{\n    Status status = 1;\n    ViewerController viewer = 2;\n}\n\nmessage BrowserControllerDatabaseStudiesResponse{\n    Status status = 1;\n    repeated DicomStudy studies = 2;\n}\n</code></pre>"},{"location":"api/browsercontroller.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message BrowserControllerXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import browsercontroller_pb2\n\nrequest = browsercontroller_pb2.BrowserControllerXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> browsercontroller.proto (lines 26-)<pre><code>message BrowserControllerCopyFilesIfNeededRequest{\n    BrowserController browser = 1;\n    repeated string paths = 2;\n}\n\nmessage BrowserControllerOpenViewerFromImagesRequest{\n    message FrameImages{\n        repeated DicomImage images = 1;\n    }\n    BrowserController browser = 1;\n    repeated FrameImages frames = 2;\n    bool movie = 3;\n}\n</code></pre>"},{"location":"api/dcmpix.html","title":"DCMPix","text":"<p>DCMPix is a class of objects contained within a 2D OsiriX viewer. It contains information about the displayed image, including the number fo rows/columns, the source file from which it is generated, whether it is greyscale of ARGB format, and ultimately the pixel data.</p>"},{"location":"api/dcmpix.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 17-19)<pre><code>message DCMPix{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dcmpix.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DCMPixXyz (DCMPixXyzRequest) returns (DCMPixXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DCMPixXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DCMPixXyzResponse</code> class, and <code>request</code> a <code>DCMPixXyzRequest</code> class.</li> </ol> osirix.proto (lines 66-82)<pre><code>rpc DCMPixConvertToRGB (DCMPixConvertToRGBRequest) returns (Response) {}\nrpc DCMPixConvertToBW (DCMPixConvertToBWRequest) returns (Response) {}\nrpc DCMPixIsRGB (DCMPix) returns (DCMPixIsRGBResponse) {}\nrpc DCMPixComputeROI (DCMPixComputeROIRequest) returns (DCMPixComputeROIResponse) {}\nrpc DCMPixROIValues (DCMPixROIValuesRequest) returns (DCMPixROIValuesResponse) {}\nrpc DCMPixShape (DCMPix) returns (DCMPixShapeResponse) {}\nrpc DCMPixSpacing (DCMPix) returns (DCMPixSpacingResponse) {}\nrpc DCMPixOrigin (DCMPix) returns (DCMPixOriginResponse) {}\nrpc DCMPixOrientation (DCMPix) returns (DCMPixOrientationResponse) {}\nrpc DCMPixSliceLocation (DCMPix) returns (DCMPixSliceLocationResponse) {}\nrpc DCMPixSourceFile (DCMPix) returns (DCMPixSourceFileResponse) {}\nrpc DCMPixImage (DCMPix) returns (DCMPixImageResponse) {}\nrpc DCMPixSetImage (DCMPixSetImageRequest) returns (Response) {}\nrpc DCMPixGetMapFromROI (DCMPixGetMapFromROIRequest) returns (DCMPixGetMapFromROIResponse) {}\nrpc DCMPixDicomImage (DCMPix) returns (DCMPixDicomImageResponse) {}\nrpc DCMPixDicomSeries (DCMPix) returns (DCMPixDicomSeriesResponse) {}\nrpc DCMPixDicomStudy (DCMPix) returns (DCMPixDicomStudyResponse) {}\n</code></pre>"},{"location":"api/dcmpix.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DCMPixXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dcmpix.proto (lines 9-95)<pre><code>message DCMPixIsRGBResponse{\n    Status status = 1;\n    bool is_rgb = 2;\n}\n\nmessage DCMPixComputeROIResponse{\n    Status status = 1;\n    float mean = 2;\n    float total = 3;\n    float std_dev = 4;\n    float min = 5;\n    float max = 6;\n    float skewness = 7;\n    float kurtosis = 8;\n}\n\nmessage DCMPixROIValuesResponse{\n    Status status = 1;\n    repeated float values = 2;\n    repeated int32 row_indices = 3;\n    repeated int32 column_indices = 4;\n}\n\nmessage DCMPixDicomImageResponse{\n    Status status = 1;\n    DicomImage dicom_image = 2;\n}\n\nmessage DCMPixDicomSeriesResponse{\n    Status status = 1;\n    DicomSeries dicom_series = 2;\n}\n\nmessage DCMPixDicomStudyResponse{\n    Status status = 1;\n    DicomStudy dicom_study = 2;\n}\n\nmessage DCMPixImageResponse{\n    Status status = 1;\n    int32 rows = 2;\n    int32 columns = 3;\n    bool is_argb = 4;\n    repeated float image_data_float = 5;\n    repeated int32 image_data_argb = 6;\n}\n\nmessage DCMPixGetMapFromROIResponse{\n    Status status = 1;\n    int32 rows = 2;\n    int32 columns = 3;\n    repeated bool map = 4;\n}\n\nmessage DCMPixShapeResponse{\n    Status status = 1;\n    int32 rows = 2;\n    int32 columns = 3;\n}\n\nmessage DCMPixSpacingResponse{\n    Status status = 1;\n    float spacing_rows = 2;\n    float spacing_columns = 3;\n}\n\nmessage DCMPixOriginResponse{\n    Status status = 1;\n    float origin_x = 2;\n    float origin_y = 3;\n    float origin_z = 4;\n}\n\nmessage DCMPixOrientationResponse{\n    Status status = 1;\n    repeated float orientation = 2;\n}\n\nmessage DCMPixSliceLocationResponse{\n    Status status = 1;\n    float slice_location = 2;\n}\n\nmessage DCMPixSourceFileResponse{\n    Status status = 1;\n    string source_file = 2;\n}\n</code></pre>"},{"location":"api/dcmpix.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message DCMPixXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import dcmpix_pb2\n\nrequest = dcmpix_pb2.DCMPixXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> dcmpix.proto (lines 98-)<pre><code>message DCMPixConvertToRGBRequest{\n    DCMPix pix = 1;\n    int32 rgb_channel = 2;\n}\n\nmessage DCMPixConvertToBWRequest{\n    DCMPix pix = 1;\n    int32 bw_channel = 2;\n}\n\nmessage DCMPixComputeROIRequest{\n    DCMPix pix = 1;\n    ROI roi = 2;\n}\n\nmessage DCMPixROIValuesRequest{\n    DCMPix pix = 1;\n    ROI roi = 2;\n}\n\nmessage DCMPixSetImageRequest{\n    DCMPix pix = 1;\n    repeated float image_data_float = 2;\n    repeated int32 image_data_argb = 3;\n}\n\nmessage DCMPixGetMapFromROIRequest{\n    DCMPix pix = 1;\n    ROI roi = 2;\n}\n</code></pre>"},{"location":"api/dicomimage.html","title":"Dicom Image","text":"<p>DicomImage is a class representing a dicom file/slice within the OsiriX database. It contains information including  patient details, modality, and file location. </p>"},{"location":"api/dicomimage.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 29-31)<pre><code>message DicomImage{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dicomimage.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DicomImageXyz (DicomImage) returns (DicomImageXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DicomImageXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DicomImageXyzResponse</code> class, and <code>request</code> a <code>DicomImage</code> class.</li> </ol> osirix.proto (lines 134-143)<pre><code>rpc DicomImageWidth (DicomImage) returns (DicomImageWidthResponse) {}\nrpc DicomImageHeight (DicomImage) returns (DicomImageHeightResponse) {}\nrpc DicomImageSOPInstanceUID (DicomImage) returns (DicomImageSOPInstanceUIDResponse) {}\nrpc DicomImageCompletePath (DicomImage) returns (DicomImageCompletePathResponse) {}\nrpc DicomImageDate (DicomImage) returns (DicomImageDateResponse) {}\nrpc DicomImageNumberOfFrames (DicomImage) returns (DicomImageNumberOfFramesResponse) {}\nrpc DicomImageModality (DicomImage) returns (DicomImageModalityResponse) {}\nrpc DicomImageSeries (DicomImage) returns (DicomImageSeriesResponse) {}\nrpc DicomImageSliceLocation (DicomImage) returns (DicomImageSliceLocationResponse) {}\nrpc DicomImageInstanceNumber (DicomImage) returns (DicomImageInstanceNumberResponse) {}\n</code></pre>"},{"location":"api/dicomimage.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DicomImageXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dicomimage.proto (lines 9-)<pre><code> message DicomImageWidthResponse{\n    Status status = 1;\n    uint32 width = 2;\n }\n\n message DicomImageHeightResponse{\n    Status status = 1;\n    uint32 height = 2;\n }\n\n message DicomImageSOPInstanceUIDResponse{\n    Status status = 1;\n    string sop_instance_uid = 2;\n }\n\n message DicomImageCompletePathResponse{\n    Status status = 1;\n    string complete_path = 2;\n }\n\n message DicomImageDateResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n }\n\n message DicomImageNumberOfFramesResponse{\n    Status status = 1;\n    uint32 number_of_frames = 2;\n }\n\n message DicomImageModalityResponse{\n    Status status = 1;\n    string modality = 2;\n }\n\n message DicomImageSeriesResponse{\n    Status status = 1;\n    DicomSeries series = 2;\n }\n\n message DicomImageSliceLocationResponse{\n    Status status = 1;\n    float slice_location = 2;\n }\n\n message DicomImageInstanceNumberResponse{\n    Status status = 1;\n    uint32 instance_number = 2;\n }\n</code></pre>"},{"location":"api/dicomimage.html#requests","title":"Requests","text":"<p>No specialized requests available for this class (class is immutable).</p>"},{"location":"api/dicomseries.html","title":"Dicom Series","text":"<p>DicomSeries is a class representing a group of DicomImage objects within the same series. It contains information  including patient details, modality, and file location(s). </p>"},{"location":"api/dicomseries.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 33-35)<pre><code>message DicomSeries{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dicomseries.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DicomSeriesXyz (DicomSeries) returns (DicomSeriesXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DicomSeriesXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DicomSeriesXyzResponse</code> class, and <code>request</code> a <code>DicomSeries</code> class.</li> </ol> osirix.proto (lines 146-158)<pre><code>rpc DicomSeriesPaths (DicomSeries) returns (DicomSeriesPathsResponse) {}\nrpc DicomSeriesPreviousSeries (DicomSeries) returns (DicomSeriesPreviousSeriesResponse) {}\nrpc DicomSeriesNextSeries (DicomSeries) returns (DicomSeriesNextSeriesResponse) {}\nrpc DicomSeriesSortedImages (DicomSeries) returns (DicomSeriesSortedImagesResponse) {}\nrpc DicomSeriesStudy (DicomSeries) returns (DicomSeriesStudyResponse) {}\nrpc DicomSeriesImages (DicomSeries) returns (DicomSeriesImagesResponse) {}\nrpc DicomSeriesSeriesInstanceUID (DicomSeries) returns (DicomSeriesSeriesInstanceUIDResponse) {}\nrpc DicomSeriesSeriesSOPClassUID (DicomSeries) returns (DicomSeriesSeriesSOPClassUIDResponse) {}\nrpc DicomSeriesSeriesDescription (DicomSeries) returns (DicomSeriesSeriesDescriptionResponse) {}\nrpc DicomSeriesModality (DicomSeries) returns (DicomSeriesModalityResponse) {}\nrpc DicomSeriesName (DicomSeries) returns (DicomSeriesNameResponse) {}\nrpc DicomSeriesDate (DicomSeries) returns (DicomSeriesDateResponse) {}\nrpc DicomSeriesNumberOfImages (DicomSeries) returns (DicomSeriesNumberOfImagesResponse) {}\n</code></pre>"},{"location":"api/dicomseries.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DicomSeriesXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dicomseries.proto (lines 9-)<pre><code>message DicomSeriesPathsResponse{\n    Status status = 1;\n    repeated string paths = 2;\n}\n\nmessage DicomSeriesPreviousSeriesResponse{\n    Status status = 1;\n    DicomSeries previous_series = 2;\n}\n\nmessage DicomSeriesNextSeriesResponse{\n    Status status = 1;\n    DicomSeries next_series = 2;\n}\n\nmessage DicomSeriesSortedImagesResponse{\n    Status status = 1;\n    repeated DicomImage sorted_images  = 2;\n}\n\nmessage DicomSeriesStudyResponse{\n    Status status = 1;\n    DicomStudy study = 2;\n}\n\nmessage DicomSeriesImagesResponse{\n    Status status = 1;\n    repeated DicomImage images = 2;\n}\n\nmessage DicomSeriesSeriesInstanceUIDResponse{\n    Status status = 1;\n    string series_instance_uid = 2;\n}\n\nmessage DicomSeriesSeriesSOPClassUIDResponse{\n    Status status = 1;\n    string series_sop_class_uid = 2;\n}\n\nmessage DicomSeriesSeriesDescriptionResponse{\n    Status status = 1;\n    string series_description = 2;\n}\n\nmessage DicomSeriesModalityResponse{\n    Status status = 1;\n    string modality = 2;\n}\n\nmessage DicomSeriesNameResponse{\n    Status status = 1;\n    string name = 2;\n}\n\nmessage DicomSeriesNumberOfImagesResponse{\n    Status status = 1;\n    int32 number_of_images = 2;\n}\n\nmessage DicomSeriesDateResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n}\n</code></pre>"},{"location":"api/dicomseries.html#requests","title":"Requests","text":"<p>No specialized requests available for this class (class is immutable).</p>"},{"location":"api/dicomstudy.html","title":"Dicom Study","text":"<p>DicomStudy is a class representing a group of DicomSeries objects within the same study. It contains information  including patient details, modality, and file location(s). </p>"},{"location":"api/dicomstudy.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 37-39)<pre><code>message DicomStudy{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/dicomstudy.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc DicomStudyXyz (DicomStudy) returns (DicomStudyXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.DicomStudyXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>DicomStudyXyzResponse</code> class, and <code>request</code> a <code>DicomStudy</code> class.</li> </ol> osirix.proto (lines 161-180)<pre><code>rpc DicomStudyPaths (DicomStudy) returns (DicomStudyPathsResponse) {}\nrpc DicomStudyImages (DicomStudy) returns (DicomStudyImagesResponse) {}\nrpc DicomStudyModalities (DicomStudy) returns (DicomStudyModalitiesResponse) {}\nrpc DicomStudyNoFiles (DicomStudy) returns (DicomStudyNoFilesResponse) {}\nrpc DicomStudyRawNoFiles (DicomStudy) returns (DicomStudyRawNoFilesResponse) {}\nrpc DicomStudyNumberOfImages (DicomStudy) returns (DicomStudyNumberOfImagesResponse) {}\nrpc DicomStudySeries (DicomStudy) returns (DicomStudySeriesResponse) {}\nrpc DicomStudyName (DicomStudy) returns (DicomStudyNameResponse) {}\nrpc DicomStudyDate (DicomStudy) returns (DicomStudyDateResponse) {}\nrpc DicomStudyDateAdded (DicomStudy) returns (DicomStudyDateAddedResponse) {}\nrpc DicomStudyDateOfBirth (DicomStudy) returns (DicomStudyDateOfBirthResponse) {}\nrpc DicomStudyInstitutionName (DicomStudy) returns (DicomStudyInstitutionNameResponse) {}\nrpc DicomStudyModality (DicomStudy) returns (DicomStudyModalityResponse) {}\nrpc DicomStudyPatientID (DicomStudy) returns (DicomStudyPatientIDResponse) {}\nrpc DicomStudyPatientUID (DicomStudy) returns (DicomStudyPatientUIDResponse) {}\nrpc DicomStudyPatientSex (DicomStudy) returns (DicomStudyPatientSexResponse) {}\nrpc DicomStudyPerformingPhysician (DicomStudy) returns (DicomStudyPerformingPhysicianResponse) {}\nrpc DicomStudyReferringPhysician (DicomStudy) returns (DicomStudyReferringPhysicianResponse) {}\nrpc DicomStudyStudyInstanceUID (DicomStudy) returns (DicomStudyStudyInstanceUIDResponse) {}\nrpc DicomStudyStudyName (DicomStudy) returns (DicomStudyStudyNameResponse) {}\n</code></pre>"},{"location":"api/dicomstudy.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message DicomStudyXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> dicomstudy.proto (lines 9-)<pre><code>message DicomStudyPathsResponse{\n    Status status = 1;\n    repeated string paths = 2;\n}\n\nmessage DicomStudyImagesResponse{\n    Status status = 1;\n    repeated DicomImage images = 2;\n}\n\nmessage DicomStudyModalitiesResponse{\n    Status status = 1;\n    string modalities = 2;\n}\n\nmessage DicomStudyNoFilesResponse{\n    Status status = 1;\n    int32 no_files = 2;\n}\n\nmessage DicomStudyRawNoFilesResponse{\n    Status status = 1;\n    int32 no_files = 2;\n}\n\nmessage DicomStudyNumberOfImagesResponse{\n    Status status = 1;\n    int32 no_images = 2;\n}\n\nmessage DicomStudySeriesResponse{\n    Status status = 1;\n    repeated DicomSeries series = 2;\n}\n\nmessage DicomStudyNameResponse{\n    Status status = 1;\n    string name = 2;\n}\n\nmessage DicomStudyDateResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n}\n\nmessage DicomStudyDateAddedResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n    int32 hour = 5;\n    int32 minute = 6;\n    int32 second = 7;\n    int32 millisecond = 8;\n}\n\nmessage DicomStudyDateOfBirthResponse{\n    Status status = 1;\n    int32 year = 2;\n    int32 month = 3;\n    int32 day = 4;\n}\n\nmessage DicomStudyInstitutionNameResponse{\n    Status status = 1;\n    string institution_name = 2;\n}\n\nmessage DicomStudyModalityResponse{\n    Status status = 1;\n    string modality = 2;\n}\n\nmessage DicomStudyPatientIDResponse{\n    Status status = 1;\n    string patient_id = 2;\n}\n\nmessage DicomStudyPatientUIDResponse{\n    Status status = 1;\n    string patient_uid = 2;\n}\n\nmessage DicomStudyPatientSexResponse{\n    Status status = 1;\n    string patient_sex = 2;\n}\n\nmessage DicomStudyPerformingPhysicianResponse{\n    Status status = 1;\n    string performing_physician = 2;\n}\n\nmessage DicomStudyReferringPhysicianResponse{\n    Status status = 1;\n    string referring_physician = 2;\n}\n\nmessage DicomStudyStudyInstanceUIDResponse{\n    Status status = 1;\n    string study_instance_uid = 2;\n}\n\nmessage DicomStudyStudyNameResponse{\n    Status status = 1;\n    string study_name = 2;\n}\n</code></pre>"},{"location":"api/dicomstudy.html#requests","title":"Requests","text":"<p>No specialized requests available for this class (class is immutable).</p>"},{"location":"api/roi.html","title":"Regions of Interest","text":"<p>ROI is a class representing regions of interest within an OsiriX 2D display window. It provides control of the  vertices/mask, color, and thickness of the object.</p>"},{"location":"api/roi.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 21-23)<pre><code>message ROI{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/roi.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc ROIXyz (ROIXyzRequest) returns (ROIXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.ROIXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>ROIXyzResponse</code> class, and <code>request</code> a <code>ROIXyzRequest</code> class.</li> </ol> osirix.proto (lines 32-50)<pre><code>rpc ROIDelete (ROI) returns (Response) {}\nrpc ROIFlipHorizontally (ROI) returns (Response) {}\nrpc ROIFlipVertically (ROI) returns (Response) {}\nrpc ROIArea (ROI) returns (ROIAreaResponse) {}\nrpc ROICentroid (ROI) returns (ROICentroidResponse) {}\nrpc ROIRotate (ROIRotateRequest) returns (Response) {}\nrpc ROIMove (ROIMoveRequest) returns (Response) {}\nrpc ROIPix (ROI) returns (ROIPixResponse) {}\nrpc ROIName (ROI) returns (ROINameResponse) {}\nrpc ROIIType (ROI) returns (ROIITypeResponse) {}\nrpc ROISetName (ROISetNameRequest) returns (Response) {}\nrpc ROIColor (ROI) returns (ROIColorResponse) {}\nrpc ROISetColor (ROISetColorRequest) returns (Response) {}\nrpc ROIOpacity (ROI) returns (ROIOpacityResponse) {}\nrpc ROISetOpacity (ROISetOpacityRequest) returns (Response) {}\nrpc ROIThickness (ROI) returns (ROIThicknessResponse) {}\nrpc ROISetThickness (ROISetThicknessRequest) returns (Response) {}\nrpc ROIPoints (ROI) returns (ROIPointsResponse) {}\nrpc ROISetPoints (ROISetPointsRequest) returns (Response) {}\n</code></pre>"},{"location":"api/roi.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message ROIXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> roi.proto (lines 9-59)<pre><code>message ROIAreaResponse{\n    Status status = 1;\n    float area = 2;\n}\n\nmessage ROICentroidResponse{\n    Status status = 1;\n    float x = 2;\n    float y = 3;\n}\n\nmessage ROIPixResponse{\n    Status status = 1;\n    DCMPix pix = 2;\n}\n\nmessage ROINameResponse{\n    Status status = 1;\n    string name = 2;\n}\n\nmessage ROIColorResponse{\n    Status status = 1;\n    int32 r = 2;\n    int32 g = 3;\n    int32 b = 4; \n}\n\nmessage ROIOpacityResponse{\n    Status status = 1;\n    float opacity = 2;\n}\n\nmessage ROIThicknessResponse{\n    Status status = 1;\n    float thickness = 2;\n}\n\nmessage ROIPointsResponse{\n    message Point2D{\n        float x = 1;\n        float y = 2;\n    }\n    Status status = 1;\n    repeated Point2D points = 2;\n}\n\nmessage ROIITypeResponse{\n    Status status = 1;\n    int32 itype = 2;\n}\n</code></pre>"},{"location":"api/roi.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message ROIXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import roi_pb2\n\nrequest = roi_pb2.ROIXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> roi.proto (lines 62-)<pre><code>message ROIRotateRequest{\n    ROI roi = 1;\n    float degrees = 2;\n    float x = 3;\n    float y = 4;\n}\n\nmessage ROIMoveRequest{\n    ROI roi = 1;\n    float columns = 2;\n    float rows = 3;\n}\n\nmessage ROISetNameRequest{\n    ROI roi = 1;\n    string name = 2;\n}\n\nmessage ROISetColorRequest{\n    ROI roi = 1;\n    int32 r = 2;\n    int32 g = 3;\n    int32 b = 4;\n}\n\nmessage ROISetOpacityRequest{\n    ROI roi = 1;\n    float opacity = 2;\n}\n\nmessage ROISetThicknessRequest{\n    ROI roi = 1;\n    float thickness = 2;\n}\n\nmessage ROISetPointsRequest{\n    message Point2D{\n        float x = 1;\n        float y = 2;\n    }\n    ROI roi = 1;\n    repeated Point2D points = 2;\n}\n</code></pre>"},{"location":"api/roivolume.html","title":"ROI Volumes","text":"<p>ROIVolume is a class representing volumetric regions of interest within an OsiriX 3D display window. It provides  control of the visibility and color of the object.</p>"},{"location":"api/roivolume.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 25-27)<pre><code>message ROIVolume{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/roivolume.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc ROIVolumeXyz (ROIVolumeXyzRequest) returns (ROIVolumeXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.ROIVolumeXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>ROIVolumeXyzResponse</code> class, and <code>request</code> a <code>ROIVolumeXyzRequest</code> class.</li> </ol> osirix.proto (lines 53-63)<pre><code>rpc ROIVolumeTexture (ROIVolume) returns (ROIVolumeTextureResponse) {}\nrpc ROIVolumeSetTexture (ROIVolumeSetTextureRequest) returns (Response) {}\nrpc ROIVolumeVolume (ROIVolume) returns (ROIVolumeVolumeResponse) {}\nrpc ROIVolumeColor(ROIVolume) returns (ROIVolumeColorResponse) {}\nrpc ROIVolumeSetColor(ROIVolumeSetColorRequest) returns (Response) {}\nrpc ROIVolumeOpacity(ROIVolume) returns (ROIVolumeOpacityResponse) {}\nrpc ROIVolumeSetOpacity(ROIVolumeSetOpacityRequest) returns (Response) {}\nrpc ROIVolumeFactor(ROIVolume) returns (ROIVolumeFactorResponse) {}\nrpc ROIVolumeSetFactor(ROIVolumeSetFactorRequest) returns (Response) {}\nrpc ROIVolumeName(ROIVolume) returns (ROIVolumeNameResponse) {}\nrpc ROIVolumeVisible (ROIVolume) returns (ROIVolumeVisibleResponse) {}\n</code></pre>"},{"location":"api/roivolume.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message ROIVolumeXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> roivolume.proto (lines 9-44)<pre><code>message ROIVolumeTextureResponse{\n    Status status = 1;\n    bool texture = 2;\n}\n\nmessage ROIVolumeVolumeResponse{\n    Status status = 1;\n    float volume = 2;\n}\n\nmessage ROIVolumeColorResponse{\n    Status status = 1;\n    float r = 2;\n    float g = 3;\n    float b = 4;\n}\n\nmessage ROIVolumeOpacityResponse{\n    Status status = 1;\n    float opacity = 2;\n}\n\nmessage ROIVolumeFactorResponse{\n    Status status = 1;\n    float factor = 2;\n}\n\nmessage ROIVolumeVisibleResponse{\n    Status status = 1;\n    bool visible = 2;\n}\n\nmessage ROIVolumeNameResponse{\n    Status status = 1;\n    string name = 2;\n}\n</code></pre>"},{"location":"api/roivolume.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message ROIVolumeXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import roivolume_pb2\n\nrequest = roivolume_pb2.ROIVolumeXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> roivolume.proto (lines 48-)<pre><code>message ROIVolumeSetTextureRequest{\n    ROIVolume roi = 1;\n    bool texture = 2;\n}\n\nmessage ROIVolumeSetColorRequest{\n    ROIVolume roi = 1;\n    float r = 2;\n    float g = 3;\n    float b = 4;\n}\n\nmessage ROIVolumeSetOpacityRequest{\n    ROIVolume roi = 1;\n    float opacity = 2;\n}\n\nmessage ROIVolumeSetFactorRequest{\n    ROIVolume roi = 1;\n    float factor = 2;\n}\n</code></pre>"},{"location":"api/viewercontroller.html","title":"Viewer Controller","text":"<p>ViewerController is a class representing the 2D image rendering viewer of OsiriX.  It is used to obtain  display information such as window settings and window title, and control contents (DCMPix and ROIs).</p>"},{"location":"api/viewercontroller.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 13-15)<pre><code>message ViewerController{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/viewercontroller.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc ViewerControllerXyz (ViewerControllerXyzRequest) returns (ViewerControllerXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.ViewerControllerXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>ViewerControllerXyzResponse</code> class, and <code>request</code> a <code>ViewerControllerXyzRequest</code> class.</li> </ol> osirix.proto (lines 99-125)<pre><code>rpc ViewerControllerCloseViewer (ViewerController) returns (Response) {}\nrpc ViewerControllerPixList (ViewerControllerPixListRequest) returns (ViewerControllerPixListResponse) {}\nrpc ViewerControllerNeedsDisplayUpdate (ViewerController) returns (Response) {}\nrpc ViewerControllerROIList (ViewerControllerROIListRequest) returns (ViewerControllerROIListResponse) {}\nrpc ViewerControllerNewROI (ViewerControllerNewROIRequest) returns (ViewerControllerNewROIResponse) {}\nrpc ViewerControllerCurDCM (ViewerController) returns (ViewerControllerCurDCMResponse) {}\nrpc ViewerControllerROIsWithName (ViewerControllerROIsWithNameRequest) returns (ViewerControllerROIsWithNameResponse) {}\nrpc ViewerControllerSelectedROIs (ViewerController) returns (ViewerControllerSelectedROIsResponse) {}\nrpc ViewerControllerIsDataVolumic (ViewerControllerIsDataVolumicRequest) returns (ViewerControllerIsDataVolumicResponse) {}\nrpc ViewerControllerCopyViewerWindow (ViewerController) returns (ViewerControllerCopyViewerWindowResponse) {}\nrpc ViewerControllerResampleViewerController (ViewerControllerResampleViewerControllerRequest) returns (ViewerControllerResampleViewerControllerResponse) {}\nrpc ViewerControllerBlendingController (ViewerController) returns (ViewerControllerBlendingControllerResponse) {}\nrpc ViewerControllerVRControllers (ViewerController) returns (ViewerControllerVRControllersResponse) {}\nrpc ViewerControllerTitle (ViewerController) returns (ViewerControllerTitleResponse) {}\nrpc ViewerControllerModality (ViewerController) returns (ViewerControllerModalityResponse) {}\nrpc ViewerControllerMovieIdx (ViewerController) returns (ViewerControllerMovieIdxResponse) {}\nrpc ViewerControllerSetMovieIdx (ViewerControllerSetMovieIdxRequest) returns (Response) {}\nrpc ViewerControllerMaxMovieIdx (ViewerController) returns (ViewerControllerMaxMovieIdxResponse) {}\nrpc ViewerControllerIdx (ViewerController) returns (ViewerControllerIdxResponse) {}\nrpc ViewerControllerSetIdx (ViewerControllerSetIdxRequest) returns (Response) {}\nrpc ViewerControllerDisplayedIdx (ViewerController) returns (ViewerControllerDisplayedIdxResponse) {}\nrpc ViewerControllerSetDisplayedIdx (ViewerControllerSetDisplayedIdxRequest) returns (Response) {}\nrpc ViewerControllerFlippedData (ViewerController) returns (ViewerControllerFlippedDataResponse) {}\nrpc ViewerControllerWLWW (ViewerController) returns (ViewerControllerWLWWResponse) {}\nrpc ViewerControllerSetWLWW (ViewerControllerSetWLWWRequest) returns (Response) {}\nrpc ViewerControllerOpenVRViewerForMode (ViewerControllerOpenVRViewerForModeRequest) returns (ViewerControllerOpenVRViewerForModeResponse) {}\nrpc ViewerControllerFuseWithViewer (ViewerControllerFuseWithViewerRequest) returns (Response) {}\n</code></pre>"},{"location":"api/viewercontroller.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message ViewerControllerXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> viewercontroller.proto (lines 9-111)<pre><code>message ViewerControllerPixListResponse{\n    Status status = 1;\n    repeated DCMPix pix = 2;\n}\n\nmessage ViewerControllerROIListResponse{\n    message ROISlice{\n        repeated ROI rois = 1; \n    }\n    Status status = 1;\n    repeated ROISlice roi_slices = 2;\n}\n\nmessage ViewerControllerNewROIResponse{\n    Status status = 1;\n    ROI roi = 2;\n}\n\nmessage ViewerControllerCurDCMResponse{\n    Status status = 1;\n    DCMPix pix = 2;\n}\n\nmessage ViewerControllerROIsWithNameResponse{\n    Status status = 1;\n    repeated ROI rois = 2;\n}\n\nmessage ViewerControllerSelectedROIsResponse{\n    Status status = 1;\n    repeated ROI rois = 2;\n}\n\nmessage ViewerControllerIsDataVolumicResponse{\n    Status status = 1;\n    bool is_volumic = 2;\n}\n\nmessage ViewerControllerBlendingControllerResponse{\n    Status status = 1;\n    ViewerController blending_viewer = 2;\n}\n\nmessage ViewerControllerVRControllersResponse{\n    Status status = 1;\n    repeated VRController vr_controllers = 2;\n}\n\nmessage ViewerControllerTitleResponse{\n    Status status = 1;\n    string title = 2;\n}\n\nmessage ViewerControllerModalityResponse{\n    Status status = 1;\n    string modality = 2;\n}\n\nmessage ViewerControllerMovieIdxResponse{\n    Status status = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerMaxMovieIdxResponse{\n    Status status = 1;\n    int32 max_movie_idx = 2;\n}\n\nmessage ViewerControllerIdxResponse{\n    Status status = 1;\n    int32 idx = 2;\n}\n\nmessage ViewerControllerDisplayedIdxResponse{\n    Status status = 1;\n    int32 displayed_idx = 2;\n}\n\nmessage ViewerControllerWLWWResponse{\n    Status status = 1;\n    float wl = 2;\n    float ww = 3;\n}\n</code></pre>"},{"location":"api/viewercontroller.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message ViewerControllerXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import viewercontroller_pb2\n\nrequest = viewercontroller_pb2.ViewerControllerXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> viewercontroller.proto (lines 115-)<pre><code>message ViewerControllerPixListRequest{\n    ViewerController viewer_controller = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerROIListRequest{\n    ViewerController viewer_controller = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerNewROIRequest{\n    message Buffer{\n        repeated bool buffer = 1;\n        int32 rows = 2;\n        int32 columns = 3;\n    }\n    message Point2D{\n        float x = 1;\n        float y = 2;\n    }\n    message Color{\n        int32 r = 1;\n        int32 g = 2;\n        int32 b = 3;\n    }\n    message Rect{\n        float origin_x = 1;\n        float origin_y = 2;\n        float height = 3;\n        float width = 4;\n    }\n    ViewerController viewer_controller = 1;\n    int32 itype = 2;\n    string name = 3;\n    int32 idx = 4;\n    int32 movie_idx = 5;\n    int32 buffer_position_x = 6;\n    int32 buffer_position_y = 7;\n    Color color = 8;\n    float thickness = 9;\n    float opacity = 10;\n    Buffer buffer = 11;\n    repeated Point2D points = 12;\n    Rect rectangle = 13;\n}\n\nmessage ViewerControllerROIsWithNameRequest{\n    ViewerController viewer_controller = 1;\n    string name = 2;\n    int32 movie_idx = 3;\n    bool in_4d = 4;\n}\n\nmessage ViewerControllerResampleViewerControllerRequest{\n    ViewerController viewer_controller = 1;\n    ViewerController fixed_viewer_controller = 2;\n}\n\nmessage ViewerControllerSetMovieIdxRequest{\n    ViewerController viewer_controller = 1;\n    int32 movie_idx = 2;\n}\n\nmessage ViewerControllerIsDataVolumicRequest{\n    ViewerController viewer_controller = 1;\n    bool in_4d = 2;\n}\n\nmessage ViewerControllerSetIdxRequest{\n    ViewerController viewer_controller = 1;\n    int32 idx = 2;\n}\n\nmessage ViewerControllerSetDisplayedIdxRequest{\n    ViewerController viewer_controller = 1;\n    int32 displayed_idx = 2;\n}\n\nmessage ViewerControllerSetWLWWRequest{\n    ViewerController viewer_controller = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage ViewerControllerOpenVRViewerForModeRequest{\n    ViewerController viewer_controller = 1;\n    string mode = 2;\n}\n\nmessage ViewerControllerFuseWithViewerRequest{\n    ViewerController viewer_controller = 1;\n    ViewerController fusion_viewer_controller = 2;\n}\n</code></pre>"},{"location":"api/vrcontroller.html","title":"VR Controller","text":"<p>VRController is a class representing the 3D volume rendering viewer of OsiriX.  It is used to obtain/control  display information such as window settings, window title, and the type of volume render.</p>"},{"location":"api/vrcontroller.html#type","title":"Type","text":"<p>All types only contain a single parameter, the UUID of the underlying OsiriX object. types.proto (lines 13-15)<pre><code>message VRController{\n    string osirixrpc_uid = 1;\n}\n</code></pre></p>"},{"location":"api/vrcontroller.html#methods","title":"Methods","text":"<p>By convention, any method defined with syntax  <pre><code>rpc VRControllerXyz (VRControllerXyzRequest) returns (VRControllerXyzResponse) {}\n</code></pre> is called in Python (for example) using syntax <pre><code>response = osirix_stub.VRControllerXyz(request) # (1)\n</code></pre></p> <ol> <li><code>response</code> is a  <code>VRControllerXyzResponse</code> class, and <code>request</code> a <code>VRControllerXyzRequest</code> class.</li> </ol> osirix.proto (lines 85-96)<pre><code>rpc VRControllerViewer2D (VRController) returns (VRControllerViewer2DResponse) {}\nrpc VRControllerBlendingController (VRController) returns (VRControllerBlendingControllerResponse) {}\nrpc VRControllerStyle (VRController) returns (VRControllerStyleResponse) {}\nrpc VRControllerTitle (VRController) returns (VRControllerTitleResponse) {}\nrpc VRControllerROIVolumes (VRController) returns (VRControllerROIVolumesResponse) {}\nrpc VRControllerRenderingMode (VRController) returns (VRControllerRenderingModeResponse) {}\nrpc VRControllerSetRenderingMode (VRControllerSetRenderingModeRequest) returns (Response) {}\nrpc VRControllerWLWW (VRController) returns (VRControllerWLWWResponse) {}\nrpc VRControllerSetWLWW (VRControllerSetWLWWRequest) returns (Response) {}\nrpc VRControllerHideROIVolume (VRControllerHideROIVolumeRequest) returns (Response) {}\nrpc VRControllerDisplayROIVolume (VRControllerDisplayROIVolumeRequest) returns (Response) {}\nrpc VRControllerNeedsDisplayUpdate (VRController) returns (Response) {}\n</code></pre>"},{"location":"api/vrcontroller.html#responses","title":"Responses","text":"<p>By convention, any response defined with syntax <pre><code>message VRControllerXyzResponse{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>has attributes accessed in Python (for example) using syntax <pre><code>x1 = response.arg1\nx2 = response.arg2\n...\n</code></pre></p> vrcontroller.proto (lines 9-43)<pre><code>message VRControllerViewer2DResponse{\n    Status status = 1;\n    ViewerController viewer_controller = 2;\n}\n\nmessage VRControllerBlendingControllerResponse{\n    Status status = 1;\n    ViewerController viewer_controller = 2;\n}\n\nmessage VRControllerRenderingModeResponse{\n    Status status = 1;\n    string rendering_mode = 2;\n}\n\nmessage VRControllerWLWWResponse{\n    Status status = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage VRControllerStyleResponse{\n    Status status = 1;\n    string style = 2;\n}\n\nmessage VRControllerTitleResponse{\n    Status status = 1;\n    string title = 2;\n}\n\nmessage VRControllerROIVolumesResponse{\n    Status status = 1;\n    repeated ROIVolume roi_volumes = 2;\n}\n</code></pre>"},{"location":"api/vrcontroller.html#requests","title":"Requests","text":"<p>By convention, any request defined with syntax <pre><code>message VRControllerXyzRequest{\n    type_1 arg_1 = 1;\n    type_2 arg_2 = 2; // (1)\n    ...\n}\n</code></pre></p> <ol> <li>The numbers on the RHS should be ignored.  They are necessary only for protobuf file definitions.</li> </ol> <p>is created in Python (for example) using syntax <pre><code>from osirixgrpc import vrcontroller_pb2\n\nrequest = vrcontroller_pb2.VRControllerXyzRequest(arg1 = x1, arg2 = x2, ...)\n</code></pre></p> vrcontroller.proto (lines 46-)<pre><code>message VRControllerSetRenderingModeRequest{\n    VRController vr_controller = 1;\n    string rendering_mode = 2;\n}\n\nmessage VRControllerSetWLWWRequest{\n    VRController vr_controller = 1;\n    float wl = 2;\n    float ww = 3;\n}\n\nmessage VRControllerHideROIVolumeRequest{\n    VRController vr_controller = 1;\n    ROIVolume roi_volume = 2;\n}\n\nmessage VRControllerDisplayROIVolumeRequest{\n    VRController vr_controller = 1;\n    ROIVolume roi_volume = 2;\n}\n</code></pre>"},{"location":"contributing/CODE_OF_CONDUCT.html","title":"Contributor Covenant Code of Conduct","text":""},{"location":"contributing/CODE_OF_CONDUCT.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"contributing/CODE_OF_CONDUCT.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at osirixgrpc@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contributing/CODE_OF_CONDUCT.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/CONTRIBUTING.html","title":"Contributing to OsiriXgrpc","text":"<p>Welcome to the contributions section!</p> <p>OsiriXgrpc is an emerging open-source initiative by the Institute of Cancer Research, dedicated to accelerating the  field of medical image science and processing. At the heart of our mission lies a commitment to the democratization of  knowledge and empowerment of medical imaging researchers worldwide. By harnessing the advanced capabilities of OsiriX's  user interface and DICOM database, our project aims to streamline the development process of robust medical imaging  tools, allowing researchers to concentrate on groundbreaking scientific discoveries, including pioneering AI. </p> <p>As a community-driven project, we invite contributors from diverse backgrounds to join us in shaping the future of  medical research, fostering an environment of collaboration and innovation.</p>"},{"location":"contributing/CONTRIBUTING.html#ways-to-contribute","title":"Ways to Contribute","text":"Example Scripts We strongly encourage developers to share scripts of OsiriXgrpc in use.  Please see         Contributing pyOsiriX Example Scripts section for more          information. Documentation We encourage feedback on our documentation to improve the user experience and ensure it makes sense. We          currently do not support localization, but should the project be successful we would encourage this moving         forward. Please see our instructions for project documentation for more          information. Testing We greatly appreciate our testers, who provide core feedback on OsiriXgrpc and have a key role in deciding the          future of the project. Please contact us if you would like to become an official          tester! Bug Tracking We will endeavour to fix all bugs encountered in OsiriXgrpc as soon as possible. If you encounter a bug, please         see our bug reporting section. Feature Suggestions We cannot improve OsiriXgrpc without good ideas coming from users. If you would like to request a new feature         this can be done as a feature request on the project              issue tracker.  Please note that acceptance and          importance of features will be discussed and agreed by our developers following discussion with you. We cannot          guarantee that all feature requests will be implemented, or how quickly they will be delivered. Feature Development If you would like to help develop the core OsiriXgrpc plugin, we are keen to improve and evolve every        aspect of it. This includes:        <ul> <li>Expose additional OsiriX functionality to OsiriXgrpc</li> <li>Optimize CI/CD of the plugin (all performed in GitHub)</li> <li>Improve the user experience through additional plugin features</li> <li>Boost security of the GRPC connections through SSL connections.</li> <li>Ensure that key updates to OsiriX are monitored and fixed within the plugin</li> </ul>       Please see the remainder of this documentation to see how this can be done, and let us        know about your ideas!"},{"location":"contributing/CONTRIBUTING.html#code-of-conduct","title":"Code of Conduct","text":"<p>Please see our Code of Conduct for more information.</p>"},{"location":"contributing/CONTRIBUTING.html#prerequisites","title":"Prerequisites","text":"<p>In order to help contribute to the OsiriXgrpc project there are a few things you will need. Some may not be required  depending on the level contributions you want to make.</p> Mac OsiriX works on macOS.  We currently support (and have tested) compatability of OsiriXgrpc on macOS Monterey and         above, on both Intel and M1/M2/M3 native processors. We always advise ensuring that your operating system is          up-to-date. OsiriX A copy of the latest OsiriX          app downloaded on your system. This will be crucial for testing the OsiriXgrpc plugin, developing new          features, and authoring new OsiriXgrpc scripts. Xcode Xcode is freely available from the App store, and is only required if you want to develop new features for the         core OsiriXgrpc plugin, or build the source code. GitHub Account You will need a GitHub account to interact with the OsiriXgrpc source code, create pull requests for new         features that you have developed, and raise new issues or report bugs on the project           issue tracker."},{"location":"contributing/CONTRIBUTING.html#coding-guidelines","title":"Coding Guidelines","text":""},{"location":"contributing/CONTRIBUTING.html#project-structure","title":"Project Structure","text":"<p>There are several core files and directories at the root of the project</p> Name Description .github Issue templates and CI/CD workflows for GitHub Actions. cpp Auto-generated C++ protobuf files (not under version control). docs All externally-facing documentation (definition files in markdown). protos gRPC protocol files, which need to be modified to provide additional OsiriX functionality. pyosirix Source code for the pyOsiriX sub-project, including translation of all functionality into Python classes. . python Source code for the osirixgrpc pip project. Sub-folder <code>osirixgrpc</code> is automatically generated (not under version control). src Source files for building the OsiriXgrpc plugin. This is also where gRPC methods are implemented. tests Integration tests for the plugin and protobuf files. Note these are not automated and run manually. .bumpversion.cfg Rules to increment version numbers scattered throughout the project. build.sh A utility shell script used to compile gRPC from source and build all protobuf files from definition (.proto) files on a host machine."},{"location":"contributing/CONTRIBUTING.html#modifying-source-code","title":"Modifying Source Code","text":"<p>When making changes to the source code, we recommend the following process to ensure your contributions can be  efficiently reviewed and integrated:</p> <ol> <li>Fork the Repository Start by forking the repository. This creates your own copy of the project where you can make     your changes. </li> <li>Build the Plugin Before making any changes, please familiarize yourself with the build process. </li> <li>Make Your Changes Implement your changes in your forked repository. To facilitate a smooth review process, we     suggest:<ul> <li>Isolate Changes: Keep your changes focused. Large or complex modifications may require more extensive review and    have a higher chance of being rejected.</li> <li>Communicate Intentions: Let us know about your planned changes in advance. This helps us coordinate contributions    and include them in our release planning.</li> </ul> </li> <li>Submit a Pull Request (PR) Once you're satisfied with your changes, submit them back to the main project via a     pull request. Ensure your PR targets the <code>dev</code> branch. For guidance on creating a pull request, see GitHub's     documentation on Creating a pull request from     a fork. </li> <li>Review Process Your pull request will undergo a review by the project maintainers. During this phase:<ul> <li>Merge Upstream Changes: You may be asked to merge changes from the upstream <code>dev</code> branch into your fork to resolve    any conflicts. </li> <li>Version Bumping: If your changes are accepted, you'll be asked to bump the version by executing bumpversion build.     This step is crucial for maintaining version control and ensuring compatibility. </li> </ul> </li> <li>Final Steps After addressing any review comments and completing the version bump, your changes will be merged into     the <code>dev</code> branch.</li> </ol> <p>Additional Tips for a Successful Contribution</p> <ul> <li>Follow Coding Standards Adhere to the coding standards and guidelines provided in the repository documentation to      increase the likelihood of your changes being accepted. </li> <li>Test Thoroughly Before submitting your pull request, thoroughly test your changes to ensure they work as expected      and do not introduce any new issues.</li> </ul> <p>By following these guidelines, you can contribute valuable improvements to osirixgrpc and help enhance its  functionality and user experience.</p>"},{"location":"contributing/CONTRIBUTING.html#version-control","title":"Version Control","text":"<p>OsiriXgrpc uses semantic versioning (<code>major.minor.patch-releasebuild</code>) using a traditional Gitflow scheme as illustrated  in the figure below. All development takes place within the <code>dev</code> branch prior to release in the main branch. This  branch exists in one of two phases:</p> <ol> <li>Development phase. Each version is appended by the <code>_devX</code>, where <code>X</code> increments after each additional   feature is merged. New features are accepted in this stage.</li> <li>Release Candidate phase. Each version will be appended by the <code>_rcX</code>, where <code>X</code> increments after each additional   hot-fix applied during user testing. No new features will be accepted during this phase.</li> </ol> <p>Once all tests are complete, the <code>dev</code> branch is merged with <code>main</code>, and the software remains a beta release for an incubation period of 2 months, before being fully released. During this period, only hotfixes may be made with no  change to the core infrastructure (i.e. nomenclature to remain consistent). This provides us with some buffer to perform  tests on the main branch and obtain feedback from external users.</p> <p>Any release with <code>major</code> = 0 means that we may make subtle changes to the technology prior to 1.0.0 (i.e. no promises!).</p> <p></p> <p>Versioning is controlled by bump2version. Please don't bump the version until  your code is ready to be merged after review of the pull request to ensure it uses the intended version. Below are the commands available to bump2version within this project, and example increments in each case:</p> <code>bumpversion build</code> 1.0.0-dev0 \u2192 1.0.0-dev1 \u2192 1.0.0-dev2 \u2192 ...  or          1.0.0-rc0 \u2192 1.0.0-rc1 \u2192 1.0.0-rc2 \u2192 ... <code>bumpversion release</code> 1.0.0-dev5 \u2192 1.0.0-rc0 \u2192 1.0.0-beta0 \u2192 1.0.0 <code>bumpversion patch</code> 1.0.0 \u2192 1.0.1-dev0 \u2192 1.0.2-dev0 \u2192 ... <code>bumpversion minor</code> 1.0.2 \u2192 1.1.0-dev0 \u2192 1.2.0-dev0 \u2192 ... <code>bumpversion major</code> 1.2.0 \u2192 2.0.0-dev0 \u2192 3.0.0-dev0 \u2192 ..."},{"location":"contributing/CONTRIBUTING.html#building","title":"Building","text":"<p>To build the plugin, please use the <code>build.sh</code> script provided, which emulates the final build performed as during  CI/CD in the <code>main</code> and <code>dev</code> branches.  This script performs the following operations within your repository:</p> <ol> <li>Clone the correct version of gRPC (to a directory called <code>grpc</code>).</li> <li>Build Intel (x86_64) and Apple Silicon (arm64) gRPC libraries and executables.</li> <li>Combine the libraries into universal binary files using the <code>lipo</code> tool.</li> <li>Use the compiled executables to C++ and Python implementation files from the protocol files (in <code>protos</code> directory).</li> <li>Ensure the OsiriXgrpc python package (<code>Python</code> directory) has the correct <code>requirements.txt</code> definitions.</li> <li>Build and zip the plugin bundle. This will result in a file called <code>osirixgrpc.osirixplugin.zip</code>.</li> </ol> <p>Note: The built file will not be signed and thus should not be shared. Please ensure you share your changes with us by issuing a pull request, and we will ensure your changes are incorporated into a signed plugin for distribution during the next release.</p>"},{"location":"contributing/CONTRIBUTING.html#documentation","title":"Documentation","text":"<p>All documentation is written in Markdown format and compiled using MkDocs. The organization  of documentation should be kept consistent, and any changes to layout need to be fully discussed and agreed with all developers before being implemented. </p> Name Description docs/api Description files for all OsiriXgrpc client API (in Python). docs/assets Location for all figures and other supporting information not in Markdown format. docs/contributing Instruction for how to contribute to the project. docs/pyosirix Documentation for the pyOsiriX sub-package. docs/getting_started.md Core instructions on how to install and use the OsiriX plugin (e.g. user-interface). docs/README.md The homepage for the documentation. mkdocs.yaml yaml configuration file for the mkdocs build"},{"location":"contributing/CONTRIBUTING.html#requirements","title":"Requirements","text":"<p>Building documentation requires both mkdocs and  mkdocs-material to be installed.  These can be installed using the <code>requirements.txt</code> file within the <code>docs</code> folder: <pre><code>pip install -r docs/requirements.txt\n</code></pre></p>"},{"location":"contributing/CONTRIBUTING.html#building-documentation","title":"Building Documentation","text":"<p>To build the documentation from source it is sufficient to run the following command, from the <code>docs</code> folder within the project root: <pre><code>mkdocs build\n</code></pre> This will create a new directory, <code>site</code>, which contains all built html documentation for deployment.</p> <p>When developing documentation, however, it can be beneficial to run the MkDocs server (again from the <code>docs</code> folder): <pre><code>mkdocs serve\n</code></pre> By connecting to the established service (linking to <code>http://localhost:8000/</code> in a web-browser), it is then possible to  view changes to documentation in real-time.</p>"},{"location":"contributing/CONTRIBUTING.html#deploying-documentation","title":"Deploying Documentation","text":"<p>Collaborators should not directly modify the deployed documentation. Instead, this will be performed as part of OsiriXgrpc continuous integration. The OsiriXgrpc documentation will be deployed from either the <code>main</code> or <code>dev</code>  branches to one of two sites, following a push to the GitHub repository:</p> Branch Site <code>main</code> https://osirixgrpc.github.io/osirixgrpc All documentation for OsiriXgrpc releases <code>dev</code> https://osirixgrpc.netlify.app Documentation in development mode and for user testing of next release."},{"location":"contributing/CONTRIBUTING.html#suggesting-changes","title":"Suggesting Changes","text":"<p>If you would like to suggest a change to the documentation please let us know through the project   issue tracker, ensuring you  choose a <code>documentation</code> label for the issue. If you wish to help contribute to the documentation, then please fork the latest copy of the repository, modify it, and submit a pull request to the main branch. </p>"},{"location":"contributing/CONTRIBUTING.html#bug-reporting","title":"Bug Reporting","text":"<p>If you encounter any bugs with the OsiriXgrpc plugin then please let us know through the   issue tracker, ensuring you choose a <code>bug</code> label.  When  you raise the issue, please using the relevant template for bugs, which will include the following information:</p> <ul> <li> Is the bug related to the plugin (OsiriXgrpc) or a client issue (pyOsiriX)? </li> <li> What steps could we use to reproduce the bug? </li> <li> If the issue is related to a script that you used, please send us (where possible):     <ol> <li> The script that caused the issue. </li> <li> The output of the Task Console (from OsiriX click `Plugins` \u2192 `Database` \u2192 `osirixgrpc` \u2192           `Task Console`) </li> </ol> </li> <li> If the issue is plugin related, please send us any information provided by Mac when the error occurred. </li> <li> OsiriX version. </li> <li> OsiriXgrpc version. </li> <li> macOS version. </li> <li> Processor (Intel or Mac M1/M2/M3). </li> </ul>"},{"location":"contributing/CONTRIBUTING.html#user-testing","title":"User Testing","text":"<p>OsiriXgrpc relies on frequent user testing to ensure stability and usability of all developed features. We are keen to hear from anyone who would like to contribute to testing and help us improve OsiriXgrpc (please check our  prerequisites for user testing).</p> <p>User testing takes place prior to each major and minor release of OsiriXgrpc. Each user test consists of completing a Google Form that checks successful completion and obtains feedback on each of the following general operations:</p> <ol> <li>Installation of OsiriXgrpc.</li> <li>Initiating an OsiriXgrpc server.</li> <li>Installing a script.</li> <li>Running a script.</li> </ol> <p>In addition, we will ask testers to run some automated unit tests. Automated unit testing for OsiriXgrpc presents  substantial challenges - this complexity arises from its dependency on symbols and functions embedded within the OsiriX  executable. Consequently, to maintain the quality and reliability of OsiriXgrpc, we incorporate unit testing into our  user tests. This approach also ensures comprehensive validation through real-world usage scenarios. </p> <p>To run automated unit tests:</p> <ol> <li>Clone the latest repository, or pull changes.</li> <li>Switch to the <code>dev</code> branch (<code>git checkout dev</code>).</li> <li>Open up OsiriX and move to or create an empty database (no Dicom studies/series displayed).</li> <li>Ensure that an OsiriXgrpc port <code>50001</code> is established and running (see Getting Started)</li> <li>Change directory to <code>tests</code> (<code>cd tests</code> from the main repository).</li> <li>Run the shell script: <code>bash run_tests.sh</code></li> </ol> <p>Please wait while OsiriX runs through all the tests (many screen will open and close). The shell script will indicate  testing is complete. Unit tests will save results to an output directory on your Desktop <code>osirixgrpc_tests</code>. Please zip this folder and send it to us. Contained files do not capture any personal information, other than the  versions of macOS, OsiriX, and OsiriXgrpc.</p>"},{"location":"contributing/CONTRIBUTING.html#feature-requests","title":"Feature Requests","text":"<p>We warmly invite fresh insights and suggestions for enhancing OsiriXgrpc. Your contributions could range from extending  OsiriX features via our API, refining our user interface, to offering ideas for optimizing our workflow or enhancing our  documentation. Every piece of feedback is invaluable to us. While we are committed to incorporating your suggestions to  the best of our ability, please remember that OsiriXgrpc thrives on community involvement and operates on a voluntary  basis. Consequently, we cannot provide specific timelines for the introduction of new features. Additionally, it's  crucial to acknowledge that our ability to implement certain enhancements is contingent upon the functionalities  available within the OsiriX application itself.</p> <p>If you wish request new features, please use our   issue tracker ensuring that you use a <code>feature request</code>  label, using the <code>feature_request</code> issue template.  This includes the following information</p> <ul> <li>To which aspect of OsiriXgrpc is the feature request intended?</li> <li>Short description of the new functionality</li> <li>Why would this improve the functionality of OsiriXgrpc?</li> <li>Have you been using any work-around so far?</li> <li>How urgent is the new functionality to you?</li> <li>Would you be willing to help develop/test the new functionality?</li> </ul>"},{"location":"contributing/CONTRIBUTING.html#issues","title":"Issues","text":"<p>Please use the relevant label for each issue that you submit on the GitHub project.</p> Label Description <code>bug</code> If you encounter a bug then please let us know using the provided template. See Bug Reporting for more information. <code>feature_request</code> What else would you like see from OsiriXgrpc? Is there any functionality in OsiriX that you think warrant exposure through API? <code>documentation</code> Tell us how we can improve our documentation. This includes everything from fixing spelling mistakes to improving interpretability. <code>generic</code> Any other issue you have with OsiriXgrpc."},{"location":"contributing/CONTRIBUTING.html#contact","title":"Contact","text":"Name Contact Matt Blackledge matthew.blackledge@icr.ac.uk Timothy Sum Hon Mun timothy.sumhonmun@icr.ac.uk"},{"location":"pyosirix/index.html","title":"pyOsiriX","text":"<p>pyOsiriX provides a pythonic interface to the OsiriXgrpc plugin  for the OsiriX medical image viewing platform. Our vision is to accelerate the development of robust research image  processing tools for the medical community, including straight-forward deployment of AI algorithms.</p> <p>Example functionality includes:</p> <ol> <li>Interrogating metadata of studies/series/imaging included within the OsiriX database.</li> <li>Accessing and adjusting pixel values within a 2D OsiriX viewer.</li> <li>Adjusting visualization settings of 3D volume rendering windows.</li> <li>Obtaining and creating regions of interest (ROIs) within image viewing windows.</li> </ol>"},{"location":"pyosirix/index.html#installation","title":"Installation","text":"<pre><code>pip install pyosirix\n</code></pre>"},{"location":"pyosirix/index.html#requirements","title":"Requirements","text":"<ul> <li><code>osirixgrpc</code></li> <li><code>numpy</code></li> </ul>"},{"location":"pyosirix/index.html#contributions","title":"Contributions","text":"<p>If you would like to contribute to pyOsiriX, please have a look at our  contributing page. We are always eager to hear your ideas and improve pyOsiriX. Examples include:</p> <ol> <li>Publishing example scripts of pyOsiriX in use. For example, something small that helps your day-to-day workflows.</li> <li>Editing documentation or suggesting changes.</li> <li>Reporting any bugs you find by raising an issue.</li> <li>Testing new version of pyOsiriX (and OsiriXgrpc!) prior to release.</li> <li>Contributing to or suggesting changes to the whole project, including requests for more OsiriX function exposure.</li> </ol> <p>Please contact us at osirixgrpc@gmail.com to find out more.</p>"},{"location":"pyosirix/index.html#examples-of-use","title":"Examples of use","text":"<p>Note: These are for exemplary use only and just touch on what is possible with OsiriXgrpc. Over time we will compile  a list of more complete examples as found in the documentation.</p>"},{"location":"pyosirix/index.html#accessing-the-2d-viewer","title":"Accessing the 2D viewer","text":"<p>If 2D OsiriX viewers are open, it is possible to obtain its instance by simply running:  <pre><code>import osirix\ndisplayed_viewers = osirix.displayed_2d_viewers()  # Returns a list of all open viewers\nfrontmost_viewer = osirix.frontmost_viewer()  # Returns the viewer that is currently active (red frame)\n</code></pre></p>"},{"location":"pyosirix/index.html#accessing-image-data","title":"Accessing image data","text":"<p>It is straightforward to obtain image data within the 2D viewer and manipulate it. The following doubles the pixel  values of the currently displayed image. <pre><code>import osirix\nfrontmost_viewer = osirix.frontmost_viewer()\npixels = frontmost_viewer.cur_dcm().image  # Obtain pixel data (as 2D NumPy array) from currently displayed image slice.\nnew_pixels = pixels * 2  # Manipulate the array\nfrontmost_viewer.cur_dcm().image = new_pixels  # Update the image data for the currently shown image slice.\nfrontmost_viewer.needs_display_update()  # Tell OsiriX to redraw itself\n</code></pre></p>"},{"location":"pyosirix/index.html#accessing-all-image-data","title":"Accessing (all) image data","text":"<p>Images in the viewer are stored in arrays, one array per frame, each array having the same length as the number of  displayed slices. The following does the same as the example above, but applies to all images in the viewer. <pre><code>import osirix\nfrontmost_viewer = osirix.frontmost_viewer()\npix_list = frontmost_viewer.pix_list(0)  # Obtain an array of DCMPix objects for the first (zeroth) frame. \nfor pix in pix_list:  # Loop through all DCMPix\n    pixels = pix.image\n    new_pixels = pixels * 2  # Manipulate the array\n    pix.image = new_pixels\nfrontmost_viewer.needs_display_update()  # Tell OsiriX to redraw itself\n</code></pre></p>"},{"location":"pyosirix/index.html#accessing-rois","title":"Accessing ROIs","text":"<p>Similarly to images, ROIs can be obtained as an array for each requested frame in the 2D OsiriX viewer. Each element of  the array is another array, containing however many ROIs are on that slice (some may be empty). This will produce a  list of unique ROI names in the viewer. <pre><code>import osirix\nfrontmost_viewer = osirix.frontmost_viewer()\nroi_list = frontmost_viewer.roi_list(0)  # ROI list for the first (zeroth) frame.\nunique_names = []  # Empty storage\nfor roi_slice in roi_list:\n    for roi in roi_slice:  # There may be more than one ROI in a slice!\n        if roi.name not in unique_names:  # You could also use numpy.unique...  \n            unique_names.append(roi.name)\nif len(unique_names) == 0:\n    print(\"No ROIs found in the viewer!\")\nelse:\n    print(f\"Unique names are: {unique_names}\")\n</code></pre></p>"},{"location":"pyosirix/index.html#accessing-rois-by-name","title":"Accessing ROIs by name","text":"<p>If you know the name of the ROI it is easy to avoid looping through <pre><code>import osirix\nfrontmost_viewer = osirix.frontmost_viewer()\nroi_name = \"my_perfect_roi\"\nrois = frontmost_viewer.rois_with_name(roi_name)\nprint(f\"Number of ROIs with name {roi_name}: {len(rois)}\")\n</code></pre></p>"},{"location":"pyosirix/index.html#converting-an-roi-to-a-mask","title":"Converting an ROI to a mask","text":"<p>Another useful thing to do is obtain a mask (a 2D array of boolean values) representing the region of the ROI. To do this you need a DCMPix instance to compute it from. Luckily, this is easy to obtain! <pre><code>import osirix\nimport numpy as np\nfrontmost_viewer = osirix.frontmost_viewer()\nroi_name = \"my_perfect_roi\"\nrois = frontmost_viewer.rois_with_name(roi_name)\nif len(rois) == 0:\n    raise ValueError(f\"Could not find any ROIs with the name {roi_name}\")\nvoxels = []  # Storage\nfor roi in rois:\n    pix = roi.pix  # The DCMPix on which the ROI was drawn\n    mask = pix.get_map_from_roi(roi)  # The mask we wanted.\n    voxels = np.r_[pix.image[mask], voxels]  # Append the voxel values\nmean = np.mean(voxels)  # Let's get some statistics\nstd = np.std(voxels, ddof=1)\nprint(f\"ROIs with name {roi_name} have mean {mean:.2f} and std-dev {std: .2f}\") \n</code></pre></p>"},{"location":"pyosirix/index.html#accessing-dicom-files-in-the-osirix-database","title":"Accessing Dicom files in the OsiriX database","text":"<p>It is possible to get access to the selected series and studies in the OsiriX database. This example sorts the  DicomImages in the first selected DicomSeries by slice location and then opens them in a new 2D viewer. <pre><code>import osirix\nimport numpy as np\nbrowser_controller = osirix.current_browser()  #The main window (database) of OsiriX\nstudies, series = browser_controller.database_selection()  # User selection as lists of DicomStudy/DicomSeries\nif len(series) == 0:\n    raise ValueError(\"No series have been selected\")\ndicom_images = np.array(series[0].images)  # An array of DicomImage instances\nsorted_idx = np.argsort([image.slice_location for image in dicom_images])  # Sort the images by slice location\ndicom_images = dicom_images[sorted_idx]\nviewer_controller = browser_controller.open_viewer_2d(dicom_images)  # Open up and view\n</code></pre></p>"},{"location":"pyosirix/index.html#accessing-the-vrcontroller","title":"Accessing the VRController","text":"<p>Once a user has opened a VRController (or done so programmatically via pyOsiriX!), it is possible to access it as per the 2D viewer. This example shows this and also how to make the contained ROIVolumes display themselves. <pre><code>import osirix\nfrontmost_viewer = osirix.frontmost_viewer()\nvr_controllers = frontmost_viewer.vr_controllers()  # Get a list of currently open ones.\nif len(vr_controllers) == 0:\n    print(\"No open VR Controller.  Creating one.\")\n    vr_controller = frontmost_viewer.open_vr_viewer(mode=\"MIP\")  # Only other alternative is \"VR\"\nelse:\n    vr_controller = vr_controllers[0]\nroi_volumes = vr_controller.roi_volumes()\nif len(roi_volumes) == 0:\n    print(\"No valid ROI volumes available\")  # Note that ROIs defined on a single slice do not count!\nfor roi_volume in roi_volumes:\n    print(f\"Displaying ROI volume with name {roi_volume.name} and modifying is attributes\")\n    roi_volume.visible = True\n    roi_volume.color = (1., 0., 1.)  # Purple color in unit RGB space\n    roi_volume.opacity = 0.5\n    roi_volume.texture = False  # Generally looks better to us\n</code></pre></p>"},{"location":"pyosirix/api/browser_controller.html","title":"browser_controller","text":""},{"location":"pyosirix/api/browser_controller.html#osirix.browser_controller","title":"<code>osirix.browser_controller</code>","text":"<p>Provides access to core functionality of the OsiriX database.</p> <p>There should only ever be one, but it is OK to create multiple pyOsiriX instances, they will just contiain the same <code>osirixrpc_uid</code>.</p> Example usage <pre><code>import osirix\n\ndatabase = osirix.current_browser()  # Get the current browser instance\nimages_path = \"/path/to/dicoms\"  # Define the location of the images\ndatabase.copy_files_into_database(images_path)  # Load the images (on separate process).\n</code></pre>"},{"location":"pyosirix/api/browser_controller.html#osirix.browser_controller.BrowserController","title":"<code>BrowserController</code>","text":"<p>               Bases: <code>OsirixBase</code></p>"},{"location":"pyosirix/api/browser_controller.html#osirix.browser_controller.BrowserController.copy_files_into_database","title":"<code>copy_files_into_database(files)</code>","text":"<p>Copy files into the Osirix database.</p> <p>Note that this will always copy files, rather than copy by link, therefore doubling the memory requirements. It is safe to delete the source Dicom data after import, if you wish to do so.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>List[str]</code> <p>The list of files to copy, as absolute paths.</p> required Example usage <pre><code>database = osirix.current_browser()\nimages_path = \"/path/to/dicoms\"\ndatabase.copy_files_into_database(images_path)\n</code></pre>"},{"location":"pyosirix/api/browser_controller.html#osirix.browser_controller.BrowserController.database_selection","title":"<code>database_selection()</code>","text":"<p>Queries the user selection of Dicom images.</p> <p>Returns:</p> Type Description <code>List[DicomStudy]</code> <p>The selected Dicom study instances</p> <code>List[DicomSeries]</code> <p>The selected Dicom series instances</p> Example usage <pre><code>database = osirix.current_browser()\nstudies, series = database.database_selection()\n</code></pre>"},{"location":"pyosirix/api/browser_controller.html#osirix.browser_controller.BrowserController.open_viewer_2d","title":"<code>open_viewer_2d(dicom_images)</code>","text":"<p>Open a 2D viewer for an array of osirix.dicom.DicomImage instances.</p> <p>Note that images will be loaded in the order in which they are presented as input here. Use the properties of DicomImage to ensure that they are loaded in order (e.g. sorted by the <code>slice_location</code> or <code>instance_number</code> properties).</p> <p>Parameters:</p> Name Type Description Default <code>dicom_images</code> <code>NDArray</code> <p>The array of images to display. Must be one dimensional and have at least one element.</p> required <p>Returns:</p> Type Description <code>ViewerController</code> <p>The resulting new viewer controller.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When the number of images in <code>dicom_images</code> is less than 1.</p> <code>ValueError</code> <p>When <code>dicom_images</code> is multidimensional.</p> <code>ValueError</code> <p>When instances other than DicomImage are provided in <code>dicom_images</code>.</p> Example usage <pre><code>database = osirix.current_browser()\nstudies, series = database.database_selection()\nif len(series) == 0:\n    raise ValueError(\"No dicom series selected.\")\ndatabase.open_viewer_2d(series[0].sorted_images())\n</code></pre>"},{"location":"pyosirix/api/browser_controller.html#osirix.browser_controller.BrowserController.open_viewer_4d","title":"<code>open_viewer_4d(dicom_images)</code>","text":"<p>Open a 4D viewer for an array of arrays of osirix.dicom.DicomImage instances.</p> <p>As per the <code>open_viewer_2d</code> method, each frames will be presented in the order in which the DicomImage instances are presented to the function.</p> <p>Note that no pre-checks are performed to ensure OsiriX can actually display the data (e.g. same slice locations are provided for each frame).</p> <p>Parameters:</p> Name Type Description Default <code>dicom_images</code> <code>NDArray</code> <p>An array of shape (N_frames, N_images).</p> required <p>Returns:</p> Type Description <code>ViewerController</code> <p>The resulting new viewer controller.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When N_frames is less than 2.</p> <code>ValueError</code> <p>When N_images is less than 1.</p> <code>ValueError</code> <p>When <code>dicom_images</code> shape is not 2-dimensional.</p> <code>ValueError</code> <p>When instances other than DicomImage are provided in the <code>dicom_images</code>.</p> Example usage <pre><code>database = osirix.current_browser()\nstudies, series = database.database_selection()\nif len(series) &lt; 2:\n    raise ValueError(\"Need at least two selected series.\")\ndatabase.open_viewer_4d(np.array([s.sorted_images() for s in series]))\n</code></pre>"},{"location":"pyosirix/api/dcm_pix.html","title":"dcm_pix","text":""},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix","title":"<code>osirix.dcm_pix</code>","text":"<p>Provides functionality for the images displayed in a 2D OsiriX viewer.</p> Example usage <pre><code>import osirix\nimport matplotlib.pyplot as plt\n\nviewer = osirix.frontmost_viewer()  # Raises GrpcException error if no viewer is available.\npix = viewer.cur_dcm()  # Get the currently displayed DCMPix object\nplt.imshow(pix.image, cmap = \"gray\")  # Display the image data (pix.image is a 2D numpy array)\nplt.show()\n</code></pre>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix","title":"<code>DCMPix</code>","text":"<p>               Bases: <code>OsirixBase</code></p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.image","title":"<code>image</code>  <code>property</code> <code>writable</code>","text":"<p>The image data as a Numpy array.</p> <p>If the image is RGB format, then the shape will be (rows, columns, 4), whereas if the image is greyscale format it will be shape (rows, columns) (see <code>is_rgb</code> property).</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.is_rgb","title":"<code>is_rgb</code>  <code>property</code>","text":"<p>Is the image data red-green-blue? If <code>False</code> must be greyscale.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.orientation","title":"<code>orientation</code>  <code>property</code>","text":"<p>The orientation of the image.</p> <p>NOTE: It can be more accurate to get the slice location by loading the dicom file via the <code>source_file</code> property (using pydicom for example), and using the ImageOrientationPatient tag.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.origin","title":"<code>origin</code>  <code>property</code>","text":"<p>The origin of the image (x, y, z).</p> <p>NOTE: It can be more accurate to get the slice location by loading the dicom file via the <code>source_file</code> property (using pydicom for example), and using the ImagePositionPatient tag.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.pixel_spacing","title":"<code>pixel_spacing</code>  <code>property</code>","text":"<p>The pixel spacing of the image (order: rows, columns)</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.shape","title":"<code>shape</code>  <code>property</code>","text":"<p>The pixel shape of the image (order: rows, columns)</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.slice_location","title":"<code>slice_location</code>  <code>property</code>","text":"<p>The slice location of the image.</p> <p>NOTE: It can be more accurate to get the slice location by loading the dicom file via the <code>source_file</code> property (using pydicom for example), and using the ImagePositionPatient tag.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.source_file","title":"<code>source_file</code>  <code>property</code>","text":"<p>The source file of the image on the host machine.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.compute_roi","title":"<code>compute_roi(roi)</code>","text":"<p>Compute some statistics from an ROI contained within the image.</p> <p>Note that these are calculated internally by OsiriX.  For more refinement on how statistics are calculated we suggest that it is better to create your own tools (based on the <code>scipy.stats</code> library for example).</p> <p>Parameters:</p> Name Type Description Default <code>roi</code> <code>ROI</code> <p>The region of interest from which to compute the statistics.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>A dictionary containing the following key-value pairs: \"mean\", \"std\", \"min\", \"max\", \"skewness\", \"kurtosis\"</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.convert_to_bw","title":"<code>convert_to_bw(mode=3)</code>","text":"<p>Convert the image to greyscale.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>int</code> <p>0 = use red channel, 1 = use green channel, 2 = use blue channel, and 3 = merge.</p> <code>3</code>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.convert_to_rgb","title":"<code>convert_to_rgb(mode=3)</code>","text":"<p>Convert the image to RGB.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>int</code> <p>0 = create red channel, 1 = create green channel, 2 = create blue channel, and 3 = create all channels.</p> <code>3</code>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.get_map_from_roi","title":"<code>get_map_from_roi(roi)</code>","text":"<p>Create a mask from an input ROI based on the image.</p> <p>Parameters:</p> Name Type Description Default <code>roi</code> <code>ROI</code> <p>The ROI from which to extract the mask.</p> required <p>Returns:</p> Type Description <code>NDArray</code> <p>The mask as a 2-dimensional binary array with shape (rows, columns).</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.get_roi_values","title":"<code>get_roi_values(roi)</code>","text":"<p>Extract the pixel values within a region of interest.</p> <p>Parameters:</p> Name Type Description Default <code>roi</code> <code>ROI</code> <p>The ROI from which to extract values.</p> required <p>Returns:</p> Type Description <code>NDArray</code> <p>The row indices of the extracted values.</p> <code>NDArray</code> <p>The columns indices of the extracted values.</p> <code>NDArray</code> <p>The extracted pixel values.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.image_obj","title":"<code>image_obj()</code>","text":"<p>The <code>DicomImage</code> instance from which the image was derived.</p> <p>Returns:</p> Type Description <code>DicomImage</code> <p>The image instance.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.series_obj","title":"<code>series_obj()</code>","text":"<p>The <code>DicomSeries</code> instance from which the image was derived.</p> <p>Returns:</p> Type Description <code>DicomSeries</code> <p>The series instance.</p>"},{"location":"pyosirix/api/dcm_pix.html#osirix.dcm_pix.DCMPix.study_obj","title":"<code>study_obj()</code>","text":"<p>The <code>DicomStudy</code> instance from which the image was derived.</p> <p>Returns:</p> Type Description <code>DicomStudy</code> <p>The study instance.</p>"},{"location":"pyosirix/api/dicom.html","title":"dicom","text":""},{"location":"pyosirix/api/dicom.html#osirix.dicom","title":"<code>osirix.dicom</code>","text":"<p>Classes that represent the core objects within the OsiriX database.</p> <p>All attributes for these classes are immutable.</p> Example usage <pre><code>import osirix\nfrom osirix.dicom import DicomStudy, DicomSeries\n\ndatabase = osirix.current_browser()  # Get the current browser instance\nstudies, series = database.database_selection()  # Get the current selection by the user\nfor study in studies:\n    print(f\"This is a DicomStudy instance with name {obj.study_name}\")\nfor serie in series:\n    print(f\"This is a DicomSeries instance with description {obj.series_description}\")\n</code></pre>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage","title":"<code>DicomImage</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>An instance representing a Dicom image within the OsiriX database.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.complete_path","title":"<code>complete_path</code>  <code>property</code>","text":"<p>The path of the source Dicom file.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.date","title":"<code>date</code>  <code>property</code>","text":"<p>The date in which the Dicom image were acquired.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.height","title":"<code>height</code>  <code>property</code>","text":"<p>The number of rows in the image</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.instance_number","title":"<code>instance_number</code>  <code>property</code>","text":"<p>The instance number for the Dicom image.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.modality","title":"<code>modality</code>  <code>property</code>","text":"<p>The modality of the Dicom image.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.number_of_frames","title":"<code>number_of_frames</code>  <code>property</code>","text":"<p>The number of frames within the Dicom image.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.series","title":"<code>series</code>  <code>property</code>","text":"<p>The DicomSeries instance in which the image is contained.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.slice_location","title":"<code>slice_location</code>  <code>property</code>","text":"<p>The slice location of the image.</p> <p>Note that this is never perfect; it can be better to read the source dicom instance and use     the ImagePositionPatient parameter.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.sop_instance_uid","title":"<code>sop_instance_uid</code>  <code>property</code>","text":"<p>The SOP instance UID for the image.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomImage.width","title":"<code>width</code>  <code>property</code>","text":"<p>The number of columns in the image</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries","title":"<code>DicomSeries</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>An instance representing a Dicom series within the OsiriX database.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.date","title":"<code>date</code>  <code>property</code>","text":"<p>The date in which the series was acquired.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.images","title":"<code>images</code>  <code>property</code>","text":"<p>The Dicom Image instances associated with the series.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.modality","title":"<code>modality</code>  <code>property</code>","text":"<p>The modality of the Dicom series.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.next_series","title":"<code>next_series</code>  <code>property</code>","text":"<p>The next Dicom Series in the OsiriX database.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.number_of_images","title":"<code>number_of_images</code>  <code>property</code>","text":"<p>The number of images within the Dicom series.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.paths","title":"<code>paths</code>  <code>property</code>","text":"<p>The Dicom file paths associated with the series.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>A list of absolute paths.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.patient_name","title":"<code>patient_name</code>  <code>property</code>","text":"<p>The patient name of the Dicom series</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.previous_series","title":"<code>previous_series</code>  <code>property</code>","text":"<p>The previous Dicom Series in the OsiriX database.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.series_description","title":"<code>series_description</code>  <code>property</code>","text":"<p>The series description.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.series_instance_uid","title":"<code>series_instance_uid</code>  <code>property</code>","text":"<p>The series instance UID.</p> <p>This seems to generate some unexpected results. It is better to access directly     by reading the dicom files (via DicomSeries.paths) using the pydicom library.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.sop_class_uid","title":"<code>sop_class_uid</code>  <code>property</code>","text":"<p>The series SOP class UID.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.study","title":"<code>study</code>  <code>property</code>","text":"<p>The Dicom Study containing the series.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomSeries.sorted_images","title":"<code>sorted_images()</code>","text":"<p>Dicom image instances sorted by OsiriX user preferences.</p> <p>These preferences are determined in OsiriX Preferences / Database / Sorting.</p> <p>Returns:</p> Type Description <code>List[DicomImage]</code> <p>A list of sorted DicomImage instances.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy","title":"<code>DicomStudy</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>An instance representing a Dicom study within the OsiriX database.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.date","title":"<code>date</code>  <code>property</code>","text":"<p>The date in which the Dicom data were acquired.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.date_added","title":"<code>date_added</code>  <code>property</code>","text":"<p>The date in which the Dicom data were added to the OsiriX database.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.date_of_birth","title":"<code>date_of_birth</code>  <code>property</code>","text":"<p>The patient date of birth for the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.images","title":"<code>images</code>  <code>property</code>","text":"<p>The Dicom Image instances associated with the study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.institution_name","title":"<code>institution_name</code>  <code>property</code>","text":"<p>The name of the institution where the Dicom study was performed.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.modalities","title":"<code>modalities</code>  <code>property</code>","text":"<p>The modalities available within the Dicom study.</p> <p>Modalities are seperated by a double backslash (e.g. \"PT\\CT\")</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.no_files","title":"<code>no_files</code>  <code>property</code>","text":"<p>The number of files comprising the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.number_of_images","title":"<code>number_of_images</code>  <code>property</code>","text":"<p>The number of images within the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.paths","title":"<code>paths</code>  <code>property</code>","text":"<p>The Dicom file absolute paths associated with the study.</p> <p>This will ignore any paths associated with the OsiriX ROI Dicom SRs.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.patient_id","title":"<code>patient_id</code>  <code>property</code>","text":"<p>The patient ID of the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.patient_name","title":"<code>patient_name</code>  <code>property</code>","text":"<p>The patient name of the Dicom study</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.patient_sex","title":"<code>patient_sex</code>  <code>property</code>","text":"<p>The patient sex of the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.patient_uid","title":"<code>patient_uid</code>  <code>property</code>","text":"<p>The patient UID of the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.performing_physician","title":"<code>performing_physician</code>  <code>property</code>","text":"<p>The performing physician name for the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.raw_no_files","title":"<code>raw_no_files</code>  <code>property</code>","text":"<p>The number of raw image files within the Dicom study.</p> <p>Note that this will include the OsiriX ROI SR files if any exist.  Using <code>no_files</code> provides     the number of accessible images.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.referring_physician","title":"<code>referring_physician</code>  <code>property</code>","text":"<p>The referring physician name for the Dicom study.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.series","title":"<code>series</code>  <code>property</code>","text":"<p>The Dicom Series instances associated with the study.</p> <p>This will ignore any series associated with the OsiriX ROI Dicom SRs.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.study_instance_uid","title":"<code>study_instance_uid</code>  <code>property</code>","text":"<p>The study instance UID for the Dicom series.</p>"},{"location":"pyosirix/api/dicom.html#osirix.dicom.DicomStudy.study_name","title":"<code>study_name</code>  <code>property</code>","text":"<p>The study name for the Dicom series.</p>"},{"location":"pyosirix/api/osirix_utilities.html","title":"osirix_utilities","text":""},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities","title":"<code>osirix.osirix_utilities</code>","text":"<p>Provide access to the core OsiriX objects: 2D/3D viewers and the database (browser).</p> Example usage <pre><code>import osirix\n\nport = 50051    # You can use any unused port\ndomain = \"localhost\"\nosirix_service = osirix.osirix_utilities.OsirixService(domain=domain, port=port)\n</code></pre>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix","title":"<code>Osirix</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>Provides access functionality to core OsiriX objects (2D/3D viewers and Dicom browser).</p> <p>Note that it is better not to use this class directly, unless you know what you are doing. There is a global instance of this class, set-up according to the OsiriXgrpc plugin configuration, as described in the main <code>__init__.py</code> module.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.__osirix_cache_object_for_uid__","title":"<code>__osirix_cache_object_for_uid__(uid)</code>","text":"<p>Return an object for a particular UID</p> <p>Parameters:</p> Name Type Description Default <code>uid</code> <code>str</code> <p>The UID for which to obtain the object</p> required <p>Returns:</p> Name Type Description <code>id</code> <p>The object.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.__osirix_cache_objects__","title":"<code>__osirix_cache_objects__()</code>","text":"<p>Return an object for a particular UID</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>All objects keyed by the uid: {uid: object}</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.__osirix_cache_uids__","title":"<code>__osirix_cache_uids__()</code>","text":"<p>Return a list of UIDs available to osirixgrpc</p> <p>Returns:</p> Name Type Description <code>List</code> <code>List[str]</code> <p>The list of available UIDs.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.current_browser","title":"<code>current_browser()</code>","text":"<p>Return an instance of the current Dicom database browser.</p> <p>Note that it is better not use this method directly. Use the following instead:</p> <pre><code>import osirix\nbrowser = osirix.current_browser()\n</code></pre> <p>Returns:</p> Type Description <code>BrowserController</code> <p>The main Dicom browser instance.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.displayed_2d_viewers","title":"<code>displayed_2d_viewers()</code>","text":"<p>Return all displayed 2D viewer instances.</p> <p>Note that it is better not use this method directly. Use the following instead:</p> <pre><code>import osirix\nviewers = osirix.displayed_2d_viewers()\n</code></pre> <p>Returns:</p> Type Description <code>List[ViewerController, ...]</code> <p>A list of 2D viewer instances.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.displayed_vr_controllers","title":"<code>displayed_vr_controllers()</code>","text":"<p>Return all displayed 3D viewer instances.</p> <p>Note that it is better not use this method directly. Use the following instead:</p> <pre><code>import osirix\nvr_controllers = osirix.displayed_vr_controllers()\n</code></pre> <p>Returns:</p> Type Description <code>List[VRController, ...]</code> <p>A list of 3D viewer instances.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.frontmost_viewer","title":"<code>frontmost_viewer()</code>","text":"<p>Return an instance of the front-most 2D viewer.</p> <p>If there are more than one, look for the viewer highlighted by a red boundary. Note that it is better not use this method directly. Use the following instead:</p> <pre><code>import osirix\nviewer = osirix.frontmost_viewer()\n</code></pre> <p>Returns:</p> Type Description <code>ViewerController</code> <p>The front-most 2D viewer.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.frontmost_vr_controller","title":"<code>frontmost_vr_controller()</code>","text":"<p>Return an instance of the front-most 3D viewer.</p> <p>Note that it is better not use this method directly. Use the following instead:</p> <pre><code>import osirix\nvr_controller = osirix.frontmost_vr_controller()\n</code></pre> <p>Returns:</p> Type Description <code>VRController</code> <p>The front-most 3D viewer.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.Osirix.osirix_version","title":"<code>osirix_version()</code>","text":"<p>Return the current version of OsiriX being linked to.</p> <p>Note that it is better not use this method directly. Use the following instead:</p> <pre><code>import osirix\nversion = osirix.osirix_version()\n</code></pre> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current OsiriX version.</p> <code>str</code> <code>str</code> <p>The bundle name (e.g. \"OsiriX MD\")</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.OsirixService","title":"<code>OsirixService</code>","text":"<p>               Bases: <code>object</code></p> <p>Create and manage an OsiriX gRPC service (stub).</p> <p>Attributes:</p> Name Type Description <code>domain</code> <code>str</code> <p>The domain with which to establish the connection.  Currently, only \"127.0.0.1\" is supported (localhost). Default is \"127.0.0.1\".</p> <code>port</code> <code>int</code> <p>The port number with which to establish the connection. Default is 50051.</p> <code>max_send_message_length</code> <code>int</code> <p>The maximum number of bytes permitted in a send message. Default is 500000000 (500 MB).</p> <code>max_receive_message_length</code> <code>int</code> <p>The maximum number of bytes permitted in a receive message. Default is 500000000 (500 MB).</p> <code>osirix_service_stub</code> <code>OsiriXServiceStub</code> <p>The service stub used to send gRPC messages to the OsiriXgrpc server. None if no connection established.</p> <code>channel</code> <code>Channel</code> <p>An insecure gRPC channel configuration.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.OsirixService.check_connection","title":"<code>check_connection()</code>","text":"<p>Check that a connection with OsiriX is established.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if a connection is established.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.OsirixService.start_service","title":"<code>start_service()</code>","text":"<p>Start the insecure client service.</p> <p>Raises:</p> Type Description <code>GrpcException</code> <p>Occurs when something goes wrong trying to set up the connection.</p>"},{"location":"pyosirix/api/osirix_utilities.html#osirix.osirix_utilities.OsirixService.stop_service","title":"<code>stop_service()</code>","text":"<p>Stop the insecure client service.</p>"},{"location":"pyosirix/api/roi.html","title":"roi","text":""},{"location":"pyosirix/api/roi.html#osirix.roi","title":"<code>osirix.roi</code>","text":"<p>Functionality for the regions of interest in 2D (<code>ROI</code>) and 3D (<code>ROIVolume</code>) viewers.</p> <p>The following <code>ROI</code> types are available in pyOsiriX, seperated into 2 core groups:</p> <ol> <li> <p>Brush ROIs: Described by a 2D array of boolean values (0 = outside ROI, 1 = within ROI).</p> <ul> <li>tPlain: The only brush ROI type.</li> </ul> </li> <li> <p>Point-based ROIs: Described by a set of N 2-element vertices as a shape (N, 2) array.</p> <ul> <li>tMeasure: A ruler measurement. N = 2.</li> <li>tROI: A square ROI. N = 4. Created by rectangle.</li> <li>tOval: An oval-based ROI. No limit on N. Created by rectangle.</li> <li>tOPolygon: An open polygon. No limit on N.</li> <li>tCPolygon: A closed polygon. No limit on N.</li> <li>tAngle: An angle measurement. N = 3.</li> <li>tText: A text box. Created by rectangle.</li> <li>tArrow: An arrow. N = 2 (arrow head then tail).</li> <li>tPencil: A closed polygon. No limit it N.</li> <li>t2DPoint: A single point ROI. Created by rectangle.</li> <li>tAxis: An axis-based ROI for bi-dimensional measurement. N = 4.</li> <li>tDynAngle: The angle between two lines. N = 4.</li> <li>tTAGT: A pair of oriented perpendicular lines for measuring distance. N = 6.</li> <li>tBall: A circular ROI representing a slice of a 3D ball ROI. No limit on N.     It is not possible to create a new tBall ROI with pyOsiriX.</li> <li>tOvalAngle: An oval with an additional angle specifier. No limit on N. Created by     rectangle.</li> </ul> </li> </ol> Example usage <pre><code>import osirix\nimport matplotlib.pyplot as plt\n\nviewer = osirix.frontmost_viewer()  # Raises GrpcException error if no viewer is available.\nrois = viewer.selected_rois()  # Get the currently selected ROI object.\nif len(rois) == 0:\n    raise ValueError(\"No ROIs found.\")\nroi = rois[0]\nroi_type = roi.itypes()[roi.itype]  # Get the selected ROI type.\nif roi_type == \"tPlain\":\n    raise ValueError(\"Cannot plot mask (brush) ROI vertices\")\nplt.plot(roi.points[:, 0], roi.points[:, 1], \"ko\")  # Plot the ROI vertices.\nplt.show()\n</code></pre>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI","title":"<code>ROI</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>Represents a single region of interest in a 2D viewer (<code>ViewerController</code>)</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.color","title":"<code>color</code>  <code>property</code> <code>writable</code>","text":"<p>The color of the volume ROI as a (r, g, b) tuple (each channel in range 0-255)</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.itype","title":"<code>itype</code>  <code>property</code>","text":"<p>The ROI type as an integer</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":"<p>The name of the ROI</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.opacity","title":"<code>opacity</code>  <code>property</code> <code>writable</code>","text":"<p>The opacity of the ROI, ranging from 0 (transparent) to 1 (opaque)</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.pix","title":"<code>pix</code>  <code>property</code>","text":"<p>The DCMPix instance coupled with the ROI. This should be the one on which it is drawn.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.points","title":"<code>points</code>  <code>property</code> <code>writable</code>","text":"<p>The vertices of any polygon-based ROI. An array with shape [N, 2].</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.stype","title":"<code>stype</code>  <code>property</code>","text":"<p>The type of the ROI as a string</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.thickness","title":"<code>thickness</code>  <code>property</code> <code>writable</code>","text":"<p>The line thickness (in points) of any polygon-based ROI.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.centroid","title":"<code>centroid()</code>","text":"<p>The centroid of the ROI in format (column, row). Non-integer values are permitted.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.delete","title":"<code>delete()</code>","text":"<p>Delete the ROI.  This cannot be undone!</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.flip_horizontally","title":"<code>flip_horizontally()</code>","text":"<p>Flip the ROI horizontally</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.flip_vertically","title":"<code>flip_vertically()</code>","text":"<p>Flip the ROI vertically</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.itypes","title":"<code>itypes(reverse_order=False)</code>  <code>classmethod</code>","text":"<p>A map between the integer ROI type (itype) and a text descriptor.</p> <p>Parameters:</p> Name Type Description Default <code>reverse_order</code> <code>bool</code> <p>If <code>False</code> then the mapping is provided in the form <code>{itype: descriptor}</code> else it is returned in reverse order: <code>{descriptor: itype}</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict</code> <p>A mapping between ROI itype and textual descriptor.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.roi_area","title":"<code>roi_area()</code>","text":"<p>The area of the ROI in squared centimeters.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.roi_move","title":"<code>roi_move(columns, rows)</code>","text":"<p>Move the ROI by a specified number of columns and rows.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>int</code> <p>The number of columns to move. positive = left \u2192 right, negative = right \u2192 left.</p> required <code>rows</code> <code>int</code> <p>The number of rows to move. positive = downwards, negative = upwards.</p> required"},{"location":"pyosirix/api/roi.html#osirix.roi.ROI.rotate","title":"<code>rotate(theta, center=None)</code>","text":"<p>Rotate the ROI by angle theta, about a given</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>float</code> <p>The angle by which to rotate (in degrees). Positive is clockwise.</p> required <code>center</code> <code>Tuple[float, float]</code> <p>The position (column, row) about which to rotate. These can be non-integer values. If <code>None</code>, then rotation is about the centroid of the ROI.</p> <code>None</code>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume","title":"<code>ROIVolume</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>Represents a single volumetric region of interest in a 3D viewer (<code>VRController</code>)</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.color","title":"<code>color</code>  <code>property</code> <code>writable</code>","text":"<p>The color of the volume ROI as a (r, g, b) tuple (each channel in range 0-1)</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.factor","title":"<code>factor</code>  <code>property</code> <code>writable</code>","text":"<p>The factor of the ROI volume in the range 0-1</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.name","title":"<code>name</code>  <code>property</code>","text":"<p>The name of the ROI volume.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.opacity","title":"<code>opacity</code>  <code>property</code> <code>writable</code>","text":"<p>The opacity of the ROI volume in the range 0-1</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.texture","title":"<code>texture</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the volume ROI is textured</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the volume ROI is visible in the 3D viewer</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.vr_controller","title":"<code>vr_controller</code>  <code>property</code>","text":"<p>The 3D volume render window in which this ROI is shown.</p>"},{"location":"pyosirix/api/roi.html#osirix.roi.ROIVolume.volume","title":"<code>volume()</code>","text":"<p>The volume of the ROI</p> <p>Returns:</p> Type Description <code>float</code> <p>The volume of the 3D ROI (in millilitres).</p>"},{"location":"pyosirix/api/viewer_controller.html","title":"viewer_controller","text":""},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller","title":"<code>osirix.viewer_controller</code>","text":"<p>Functionality for the 2D viewer.</p> Example usage <pre><code>import osirix\n\nviewer = osirix.frontmost_viewer()  # Raises GrpcException error if no viewer is available.\nn_slices = len(viewer.pix_list(0))  # pix_list(n) returns array of DCMPix instances for nth frame.\nviewer.idx = int(n_slices / 2)  # Move display to the central slice.\nviewer.wlww = (50, 100)  # Set the displayed window level and width..\nviewer.needs_display_update()  #Get the viewer to re-draw itself.\n</code></pre>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController","title":"<code>ViewerController</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>Represents one of the displayed volume render windows.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.displayed_idx","title":"<code>displayed_idx</code>  <code>property</code> <code>writable</code>","text":"<p>The data slice index currently being displayed to the viewer (starting at 0).</p> <p>Note that this may not be equal to the index displayed on the viewer when <code>data_flipped</code> is     True.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.flipped_data","title":"<code>flipped_data</code>  <code>property</code>","text":"<p>Whether the slices data are flipped in the viewer.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.idx","title":"<code>idx</code>  <code>property</code> <code>writable</code>","text":"<p>The slice index currently being displayed to the viewer (starting at 0).</p> <p>Note that the index displayed on the viewer is this value plus one.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.max_movie_index","title":"<code>max_movie_index</code>  <code>property</code>","text":"<p>The maximum movie index in the viewer.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.modality","title":"<code>modality</code>  <code>property</code>","text":"<p>The modality of the displayed data.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.movie_idx","title":"<code>movie_idx</code>  <code>property</code> <code>writable</code>","text":"<p>The frame currently being displayed by the viewer.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.title","title":"<code>title</code>  <code>property</code>","text":"<p>The title of the 2D viewing window.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.wlww","title":"<code>wlww</code>  <code>property</code> <code>writable</code>","text":"<p>The window level and window width of the viewer.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.blending_controller","title":"<code>blending_controller()</code>","text":"<p>Return the viewer controller instance that is being fused with this one.</p> <p>Returns:</p> Type Description <code>ViewerController</code> <p>The blending viewer instance.</p> Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\nblending_controller = frontmost_viewer.blending_controller()\n</code></pre>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.close","title":"<code>close()</code>","text":"<p>Close the viewer.</p> <p>Note: This will close any associated viewers (e.g. VRControllers).</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.close_viewer","title":"<code>close_viewer()</code>","text":"<p>Close the viewer</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.copy_viewer_window","title":"<code>copy_viewer_window()</code>","text":"<p>Create a copy of the viewer.</p> <p>This can be useful for image processing when you want to keep a copy of the original and a processed version.</p> <p>Returns:</p> Type Description <code>ViewerController</code> <p>The new osirix.viewer_controller.ViewerController instance.</p> Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\nacopy = frontmost_viewer.copy_viewer_window()\n</code></pre>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.cur_dcm","title":"<code>cur_dcm()</code>","text":"<p>Return the currently displayed DCMPix instance.</p> <p>Returns:</p> Type Description <code>DCMPix</code> <p>The currently displayed DCMPix instance.</p> Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\npix = frontmost_viewer.cur_dcm()\n</code></pre>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.fuse_with_viewer","title":"<code>fuse_with_viewer(viewer)</code>","text":"<p>Fuse another viewer onto this one.</p> <p>Parameters:</p> Name Type Description Default <code>viewer</code> <code>ViewerController</code> <p>The viewer to fuse onto the present one.</p> required Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\nfrontmost_viewer.fuse_with_viewer(another_viewer_controller)\n</code></pre>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.is_data_volumic","title":"<code>is_data_volumic(in_4d=False)</code>","text":"<p>Does the underlying data have sufficient geometric properties for volume rendering.</p> <p>Parameters:</p> Name Type Description Default <code>in_4d</code> <code>bool</code> <p>Determine for all frames.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>Is the data volumic?</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.needs_display_update","title":"<code>needs_display_update()</code>","text":"<p>Tell the viewer it should update its display.</p> <p>This is particularly important if you want to see changes to pixel values in real time.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_angle_roi","title":"<code>new_angle_roi(p1, p2, p3, **kwargs)</code>","text":"<p>Create a new angle ROI within the viewer.</p> <p>This draws two connected vectors:</p> <pre><code>- v = p2 &amp;rarr; p1\n- u = p2 &amp;rarr; p3\n</code></pre> <p>The displayed angle is the angle between these two vectors.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>(float, float)</code> <p>The (column, row) position of the first angle vertex.</p> required <code>p2</code> <code>(float, float)</code> <p>The (column, row) position of the second angle vertex.</p> required <code>p3</code> <code>(float, float)</code> <p>The (column, row) position of the third angle vertex.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_arrow_roi","title":"<code>new_arrow_roi(tail, head, **kwargs)</code>","text":"<p>Create a new text-box ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>tail</code> <code>(float, float)</code> <p>The (column, row) position of the arrow tail.</p> required <code>head</code> <code>(float, float)</code> <p>The (column, row) position of the arrow hear.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_axis_roi","title":"<code>new_axis_roi(p1, p2, p3, p4, **kwargs)</code>","text":"<p>Create a new axis ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>(float, float)</code> <p>The (column, row) position of the first vertex.</p> required <code>p2</code> <code>(float, float)</code> <p>The (column, row) position of the second vertex.</p> required <code>p3</code> <code>(float, float)</code> <p>The (column, row) position of the third vertex.</p> required <code>p4</code> <code>(float, float)</code> <p>The (column, row) position of the fourth vertex.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_dynamic_angle_roi","title":"<code>new_dynamic_angle_roi(p1, p2, p3, p4, **kwargs)</code>","text":"<p>Create a new dynamic angle ROI within the viewer.</p> <p>This draws two vectors:</p> <pre><code>- v = p2 &amp;rarr; p1\n- u = p3 &amp;rarr; p4\n</code></pre> <p>The displayed angle is the angle between these two vectors. The vector p2 -&gt; p3 is also drawn.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>(float, float)</code> <p>The (column, row) position of the first angle vertex.</p> required <code>p2</code> <code>(float, float)</code> <p>The (column, row) position of the second angle vertex.</p> required <code>p3</code> <code>(float, float)</code> <p>The (column, row) position of the third angle vertex.</p> required <code>p4</code> <code>(float, float)</code> <p>The (column, row) position of the fourth angle vertex.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_mask_roi","title":"<code>new_mask_roi(buffer, **kwargs)</code>","text":"<p>Create a new mask ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>NDArray</code> <p>The buffer mask as a 2D boolean Numpy array.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_measurement_roi","title":"<code>new_measurement_roi(start, end, **kwargs)</code>","text":"<p>Create a new length measurement ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>(float, float)</code> <p>The starting position of the ROI (column, row).</p> required <code>end</code> <code>(float, float)</code> <p>The ending position of the ROI (column, row).</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_oval_angle_roi","title":"<code>new_oval_angle_roi(center, width, height, **kwargs)</code>","text":"<p>Create a new angle oval ROI within the viewer.</p> <p>Note: At present we are not aware that it is possible to pre-determine the angle part of this ROI. This method defines only the oval that will be drawn; the angle appears to have a default value of 113 degrees that can then be adapted by the user.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>(float, float)</code> <p>The (column, row) center of the oval ROI.</p> required <code>width</code> <code>float</code> <p>The width of the oval ROI.</p> required <code>height</code> <code>float</code> <p>The height of the oval ROI.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_oval_roi","title":"<code>new_oval_roi(center, width, height, **kwargs)</code>","text":"<p>Create a new oval ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>(float, float)</code> <p>The (column, row) center of the oval ROI.</p> required <code>width</code> <code>float</code> <p>The width of the oval ROI.</p> required <code>height</code> <code>float</code> <p>The height of the oval ROI.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_point_roi","title":"<code>new_point_roi(column, row, **kwargs)</code>","text":"<p>Create a new 2D point ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>float</code> <p>The column position of the ROI</p> required <code>row</code> <code>float</code> <p>The row position of the ROI</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_polygon_roi","title":"<code>new_polygon_roi(points, closed=True, **kwargs)</code>","text":"<p>Create a new polygon ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>NDArray</code> <p>The vertices of the ROI.  Must have shape (N, 2).</p> required <code>closed</code> <code>bool</code> <p>Whether the polygon is closed.</p> <code>True</code> <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_rectangle_roi","title":"<code>new_rectangle_roi(center, width, height, **kwargs)</code>","text":"<p>Create a new rectangle ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>(float, float)</code> <p>The (column, row) center of the rectangle ROI.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle ROI.</p> required <code>height</code> <code>float</code> <p>The height of the rectangle ROI.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_roi","title":"<code>new_roi(itype=15, name='', idx=0, movie_idx=0, buffer_position_column=0, buffer_position_row=0, color=(0, 255, 0), thickness=1.0, opacity=1.0, buffer=None, rect=None, points=None)</code>","text":"<p>Create a new ROI within the viewer.</p> <p>Important: It is safer to create a new ROI using one of the utility functions as they provide better checking on input parameters in certain contexts, and ensure the right ROI type is created. This is meant as a parent function that performs the heavy lifting. It is made public for transparency.</p> <p>Parameters:</p> Name Type Description Default <code>itype</code> <code>int</code> <p>The index of the roi type (see <code>osirix.roi.ROI.itypes</code> for details).</p> <code>15</code> <code>name</code> <code>str</code> <p>The name of the ROI.</p> <code>''</code> <code>idx</code> <code>int</code> <p>The slice index on which to create the new ROI.</p> <code>0</code> <code>movie_idx</code> <code>int</code> <p>The frame on which to create the new ROI.</p> <code>0</code> <code>buffer_position_column</code> <code>int</code> <p>The column offset of a mask ROI in pixel coordinates.</p> <code>0</code> <code>buffer_position_row</code> <code>int</code> <p>The row offset of a mask ROI in pixel coordinates.</p> <code>0</code> <code>color</code> <code>tuple</code> <p>The RGB color of the ROI (values from 0-255 in each channel).</p> <code>(0, 255, 0)</code> <code>thickness</code> <code>float</code> <p>The thickness of the ROI. Value between 1-20 as per OsiriX.</p> <code>1.0</code> <code>opacity</code> <code>float</code> <p>The opacity on a scale from 0 (transparent) to 1 (opaque).</p> <code>1.0</code> <code>buffer</code> <code>NDArray</code> <p>The buffer mask as a 2D boolean Numpy array. If <code>None</code>, then ignored.</p> <code>None</code> <code>rect</code> <code>NDArray</code> <p>The rectangle defining the ROI. Must be shape (4,).</p> <code>None</code> <code>points</code> <code>NDArray</code> <p>The points defining the ROI. Must be shape (N, 2) for N vertices. If <code>None</code> or <code>buffer</code> is not <code>None</code> or <code>rect</code> is not <code>None</code> then ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When <code>buffer</code>, <code>points</code> and <code>rect</code> are all None.</p> <code>ValueError</code> <p>When the input data is of invalid format.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_tagt_roi","title":"<code>new_tagt_roi(a, b, c, d, **kwargs)</code>","text":"<p>Create a new tTAGT ROI within the viewer.</p> <p>ROI displays:</p> <pre><code>- The length of vector DA.\n- The perpendicular distance from B to DA\n- The perpendicular distance from C to DA\n- The distance between B and C, parallel to DA.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>(float, float)</code> <p>The (column, row) position of point A.</p> required <code>b</code> <code>(float, float)</code> <p>The (column, row) position of point B.</p> required <code>c</code> <code>(float, float)</code> <p>The (column, row) position of point C.</p> required <code>d</code> <code>(float, float)</code> <p>The (column, row) position of point D.</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.new_text_roi","title":"<code>new_text_roi(column, row, name, **kwargs)</code>","text":"<p>Create a new text-box ROI within the viewer.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>float</code> <p>The column position of the ROI</p> required <code>row</code> <code>float</code> <p>The row position of the ROI</p> required <code>name</code> <code>str</code> <p>The text to show</p> required <code>**kwargs</code> <p>See <code>new_roi</code> for all additional parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ROI</code> <p>The created ROI instance.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.open_vr_viewer","title":"<code>open_vr_viewer(mode='VR')</code>","text":"<p>Open a new 3D viewer for the enclosed data.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Either 'VR' for volume render, or 'MIP' for a maximum intensity projection.</p> <code>'VR'</code> <p>Returns:</p> Type Description <code>VRController</code> <p>A VRController instance.</p> Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\nvr_controller = frontmost_viewer.open_vr_viewer(mode=\"VR\")\n</code></pre>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.pix_list","title":"<code>pix_list(movie_idx=None)</code>","text":"<p>Access the list of DCMPix objects contained within the 2D viewer.</p> <p>Parameters:</p> Name Type Description Default <code>movie_idx</code> <code>int</code> <p>The frame from which to extract the DCMPix instances. If <code>None</code>, then use the currently displayed movie_idx.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[DCMPix]</code> <p>The list of osirix.dcm_pix.DCMPix instances requested for a particular frame.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.resample_viewer_controller","title":"<code>resample_viewer_controller(vc)</code>","text":"<p>Resample this (moving) ViewerController based on another (fixed) ViewerController.</p> <p>Note that the original moving viewer is closed, so a reference to the new one is returned. This means it is generally advised to the call the method in the following manner:</p> <pre><code>moving_viewer = moving_viewer.resample_viewer_controller(fixed_viewer)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vc</code> <code>ViewerController</code> <p>The fixed viewer.</p> required <p>Returns:</p> Type Description <code>ViewerController</code> <p>The resampled viewer window.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.roi_list","title":"<code>roi_list(movie_idx=None)</code>","text":"<p>Access a list of lists of ROI objects contained within the 2D viewer.</p> <p>The length of the outer list is the same as the number of slices in the viewer. Note that some inner lists will be empty if no ROIs are drawn on that slice.</p> <p>Parameters:</p> Name Type Description Default <code>movie_idx</code> <code>int</code> <p>The frame from which to extract the ROI instances. If <code>None</code>, then use the currently displayed movie_idx.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[List[ROI]]</code> <p>A list of lists of osirix.roi.ROI instances requested for a particular frame.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.rois_with_name","title":"<code>rois_with_name(name, movie_idx=None, in_4d=False)</code>","text":"<p>Return a list of ROIs with a given name. Args:     name (str): The name of ROIs to look for.     movie_idx (int): The frame from which to extract the ROI instances. If <code>None</code>, then         use the currently displayed movie_idx.     in_4d (bool): Whether to look through all frames.</p> <p>Returns:</p> Type Description <code>List[ROI]</code> <p>A list of ROIs with the given name.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.selected_rois","title":"<code>selected_rois()</code>","text":"<p>Return a list of the user-selected ROIs</p> <p>Returns:</p> Type Description <code>List[ROI]</code> <p>A list of selected ROIs.</p>"},{"location":"pyosirix/api/viewer_controller.html#osirix.viewer_controller.ViewerController.vr_controllers","title":"<code>vr_controllers()</code>","text":"<p>Return the list of currently displayed 3D viewers associates with this 2D window.</p> <p>Returns:</p> Type Description <code>List[VRController]</code> <p>Any VRController instances associated with this 2D window.</p> Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\nvr_controllers = frontmost_viewer.vr_controllers()\n</code></pre>"},{"location":"pyosirix/api/vr_controller.html","title":"vr_controller","text":""},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller","title":"<code>osirix.vr_controller</code>","text":"<p>Functionality for the 3D viewer.</p> Example usage <pre><code>import osirix\n\nvr_controller = osirix.frontmost_vr_controller()  # Raises GrpcException if not available.\nvr_controller.wlww = (50, 100)  # Set the window level and width\nprint(f\"This window has {len(vr_controller.roi_volumes())} ROI volumes\")\n</code></pre>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController","title":"<code>VRController</code>","text":"<p>               Bases: <code>OsirixBase</code></p> <p>Represents one of the displayed volume render windows.</p>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.rendering_mode","title":"<code>rendering_mode</code>  <code>property</code> <code>writable</code>","text":"<p>The rendering mode: \"VR\" for volume render, \"MIP\" for maximum intensity projection.</p>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.style","title":"<code>style</code>  <code>property</code>","text":"<p>The style of the volume render window.</p>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.title","title":"<code>title</code>  <code>property</code>","text":"<p>The title of the volume render window.</p>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.wlww","title":"<code>wlww</code>  <code>property</code> <code>writable</code>","text":"<p>The window level and window width of the viewer.</p>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.blending_controller","title":"<code>blending_controller()</code>","text":"<p>The 2D ViewerController instance currently being blended (fused).</p> <p>Returns:</p> Type Description <code>ViewerController</code> <p>The fused ViewerController instance.</p> Example usage <pre><code>vr_controllers = frontmost_viewer.vr_controllers()\nif len(vr_controllers) &gt; 0:\n    vr_controller = vr_controllers[0]\n    fused_viewer = vr_controller.blending_controller()\n</code></pre>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.display_roi_volume","title":"<code>display_roi_volume(roi_volume)</code>","text":"<p>Ensure that an input ROI is visible on the 3D display.</p> <p>Parameters:</p> Name Type Description Default <code>roi_volume</code> <code>ROIVolume</code> <p>The ROI volume to make visible.</p> required"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.hide_roi_volume","title":"<code>hide_roi_volume(roi_volume)</code>","text":"<p>Ensure that an input ROI is hidden on the 3D display.</p> <p>Parameters:</p> Name Type Description Default <code>roi_volume</code> <code>ROIVolume</code> <p>The ROI volume to hide.</p> required"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.needs_display_update","title":"<code>needs_display_update()</code>","text":"<p>Update the VRController display</p> Example usage <pre><code>vr_controllers = frontmost_viewer.vr_controllers()\nvr_controller = vr_controllers[0]\nvr_controller.needs_display_update()\n</code></pre>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.roi_volumes","title":"<code>roi_volumes()</code>","text":"<p>Obtain references to all volumetric ROIs.</p> <p>Returns:</p> Type Description <code>List[ROIVolume]</code> <p>A list of ROIVolume instances.</p> Example usage <pre><code>frontmost_viewer = osirix.frontmost_viewer()\nvr_controllers = frontmost_viewer.vr_controllers()\nif len(vr_controllers) == 0:\n    print(\"No open VR Controller.  Creating one.\")\n    vr_controller = frontmost_viewer.open_vr_viewer(mode=\"MIP\")\nelse:\n    vr_controller = vr_controllers[0]\n\nroi_volumes = vr_controller.roi_volumes()\nif len(roi_volumes) == 0:\n    print(\"No valid ROI volumes available\")\nfor roi_volume in roi_volumes:\n    print(f\"Displaying ROI volume with name {roi_volume.name}\")\n    roi_volume.visible = True\n</code></pre>"},{"location":"pyosirix/api/vr_controller.html#osirix.vr_controller.VRController.viewer_2d","title":"<code>viewer_2d()</code>","text":"<p>The 2D ViewerController instance from which the 3D viewer was started.</p> <p>Returns:</p> Type Description <code>ViewerController</code> <p>The ViewerController instance.</p> Example usage <pre><code>vr_controllers = frontmost_viewer.vr_controllers()\nif len(vr_controllers) &gt; 0:\n    vr_controller = vr_controllers[0]\n    viewer_controller = vr_controller.viewer_2d()\n</code></pre>"},{"location":"pyosirix/contributing/CONTRIBUTING.html","title":"Contributing to pyOsiriX","text":"<p>For general notes on contributing, please see the main contributing page for OsiriXgrpc as this sub-package follows the same processes. Specific instructions for code standards for conding  conventions are provided below.</p>"},{"location":"pyosirix/contributing/CONTRIBUTING.html#code-conventions","title":"Code Conventions","text":"<p>All code must follow PEP-8 guidelines. Docstrings are written using the Google docstring standard. If in doubt, please look at existing code and follow the same syntax used, and/or raise an  issue, so we can provide more clarity.</p>"},{"location":"pyosirix/contributing/CONTRIBUTING.html#package-structure","title":"Package Structure","text":"<ul> <li>The main pyOsiriX package directory is called <code>osirix</code>.</li> <li>Each python file within the package directory constitutes a distinct module.</li> </ul>"},{"location":"pyosirix/contributing/CONTRIBUTING.html#module-structure","title":"Module Structure","text":"<ul> <li>Each module contains classes, each providing exposure to a specific aspect of OsiriX.</li> <li>Except for the <code>osirix.__init__</code> module, no functions are permitted within modules.</li> <li>Each module should only contain classes that represent the same family of OsiriX objects (e.g.     regions-of-interest, viewers, dicoms accessors).</li> </ul>"},{"location":"pyosirix/contributing/CONTRIBUTING.html#class-structure","title":"Class structure","text":"<ul> <li>All methods must have the decorator <code>@pyosirix_connection_check</code>.</li> <li>All class properties (get/set or just get) must include the decorator <code>@property</code>. Please ensure    that attributes are chosen properly.  For example <code>color</code> is an attribute. The method <code>rotate</code> is not.</li> <li>Please include a docstring for each method. Ideally with an example if deemed necessary.</li> <li>Please name the method appropriately using snake case. For example, if the method in OsiriXgrpc is <code>ROIRotate</code>, name    it <code>rotate</code>.</li> </ul>"},{"location":"pyosirix/contributing/CONTRIBUTING.html#contributing-pyosirix-example-scripts","title":"Contributing pyOsiriX Example Scripts","text":"<p>We welcome example scripts from developers to help showcase its functionality to other users.  We follow a blog-like  format for examples so that information provided can be quite flexible. However, examples should follow the following  basic premises:</p> <ol> <li>Keep examples simple. We like to ensure that each example performs a specific operation rather than a complex     processing pipeline. This ensures that examples remain modular and can be reused within different contexts. If your     example contains different steps, think about how these can be broken down and submit as multiple example scripts. </li> <li>Do not use complex/private datasets. This helps us reduce the need for hosting bespoke datasets within the pyOsiriX     project. If certain data is needed (processing PET data for example), try to use public datasets, such as those     provided by The Cancer Imaging Archive, and provide the data source in your     example description.</li> <li>Follow the Example Template when structuring the example description.</li> <li> <p>Ensure that the example covers one of the following script categories:</p> <ul> <li>Database: Performs operations on the OsiriX database.</li> <li>Image: Filters images displayed in the 2D viewer windows (including generation of regions of interest).</li> <li>ROI: Generates results from existing regions of interest within the 2D image viewer.</li> <li>VR: Filters data displayed within the volume render window.</li> </ul> </li> <li> <p>Each example should consist of its own directory with the following content:</p> <ul> <li><code>README.md</code>: A markdown page consisting of key information about the example, the script type, how it should be    run, what data is needed (and the source if applicable), and the expected outcome    (see below).</li> <li><code>script.py</code>: A single python file containing the script that users can run.</li> <li><code>screenshot.py</code>: A helpful, simple image that provides users with a pictorial representation of what the script    does.</li> <li><code>requirements.txt</code>: Any python requirements needed by the script. The user should be able to use this to install   the necessary third-party packages needed to run your file using <code>pip install -r requirements.txt</code>. See the    Requirements File Format for more    information. Please try and minimize the number of requirements (do not just dump your current environment).    Note: If no additional packages are required, please explicitly state this by providing an   empty <code>requirements.txt</code> file.</li> <li><code>additional files</code> (optional): Any other files that might be needed for running the script. Whilst it is    possible to include additional dependent python module files to support you script, it is encouraged not to do    this as it violates premise 1.</li> </ul> </li> </ol>"},{"location":"pyosirix/contributing/CONTRIBUTING.html#example-template","title":"Example template","text":"<p>This file is also available in the  project repository. <pre><code>&lt;!-- Choose a short, distinct and distinctive name for your script.  Should match name of parent directory --&gt;\n# Template\n\n&lt;!-- \nA short description of what the example script tries to achieve (single sentence/line).\nPlease ensure that the leading comment is left in! \n--&gt;\n&lt;!-- shortdesc --&gt; A template example script that may be used to format other scripts.\n\n&lt;!-- Choose the relevant categories out of \"Database-blue\", \"Image-green\", \"ROI-purple\" or \"VR-red\" --&gt;\n__Categories__:\n![Database](https://img.shields.io/badge/Database-blue)\n![Image](https://img.shields.io/badge/Image-green)\n![Region of Interest](https://img.shields.io/badge/ROI-purple)\n![Volume Render](https://img.shields.io/badge/VR-red)\n\n&lt;!-- Do not modify. Source image must have size 800 x 600 pixels. --&gt;\n&lt;div style=\"text-align: center;\"&gt;\n&lt;img alt=\"Script screenshot\" height=\"300\" src=\"screenshot.png\" width=\"400\" style=\"border: 1px solid grey;\"/&gt;\n&lt;/div&gt;\n\n&lt;!-- \nPlease ensure that you (and your institution) get acknowledgment for your contribution!\nMultiple entries should be comma-separated.\n--&gt;\n## Authors\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;td&gt; &lt;b&gt;Author(s)&lt;/b&gt; &lt;/td&gt;\n    &lt;td&gt; Joe Bloggs&lt;sup&gt;1&lt;/sup&gt; &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt; &lt;b&gt;Institution(s)&lt;/b&gt; &lt;/td&gt;\n    &lt;td&gt; &lt;sup&gt;1&lt;/sup&gt;The Institute of Research &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt; &lt;b&gt;Contact&lt;/b&gt; &lt;/td&gt;\n    &lt;td&gt; joe.bloggs@institute.com &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;!-- Provide the data provenance (i.e. where it may be downloaded from). Use \"Any data\" if it works on any dataset. --&gt;\n## Datasets\nAny data.\n\n&lt;!-- \nHere you can provide any additional details about the script to the user (e.g. use case or expected outcomes)\nThere is no limit on what information you wish to provide and subsection headings are flexible. \n--&gt;\n## Details\nThis example script is used to demonstrate how to write pyOsiriX examples. It can be run as any of the four categories.\n\n### Expected Outcome\nThis should export the current date, time and python version to a file on the Desktop called `osirix_template_out.txt`.\n</code></pre></p>"},{"location":"pyosirix/examples/gallery.html","title":"pyOsiriX examples","text":"Name Description Categories ROI Nudge A tool for nudging ROIs in-plane by specified rows/columns Read ITK A script for importing and visualizing ITK images (e.g. nrrd, mhd/mha, nifti) within OsiriX. Template A template example script that may be used to format other scripts. <p>Please note that this page is in development. We will try to release new examples as often as possible!  Please check out the pyOsiriX API for more examples. If you would like to contribute an example (or suggest something), please see contributing documentation.</p>"},{"location":"pyosirix/examples/ROI%20Nudge/index.html","title":"ROI Nudge","text":""},{"location":"pyosirix/examples/ROI%20Nudge/index.html#roi-nudge","title":"ROI Nudge","text":"<p>A tool for nudging ROIs in-plane by specified rows/columns</p> <p>Categories: </p>"},{"location":"pyosirix/examples/ROI%20Nudge/index.html#authors","title":"Authors","text":"Author(s)  Matthew Blackledge<sup>1</sup> Institution(s) <sup>1</sup>The Institute of Cancer Research  Contact  matthew.blackledge@icr.ac.uk"},{"location":"pyosirix/examples/ROI%20Nudge/index.html#datasets","title":"Datasets","text":"<p>Any data.</p>"},{"location":"pyosirix/examples/ROI%20Nudge/index.html#details","title":"Details","text":"<p>This script also shows how to integrate additional an additional (modal) user-interface through PyQt5. To use it:</p> <ul> <li>Select some ROIs in a viewer.</li> <li>Select the number of rows/columns to shift by.</li> <li>Hold down the direction keys to move the selected ROIs in that particular direction.</li> <li>When done, click \"OK\".</li> </ul>"},{"location":"pyosirix/examples/ROI%20Nudge/index.html#expected-outcome","title":"Expected Outcome","text":"<p>The script should open up a modal dialogue that allows the user to interact with selected ROIs. </p>"},{"location":"pyosirix/examples/ROI%20Nudge/index.html#script","title":"Script","text":"<pre><code>import sys\n\nimport osirix\nfrom PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QHBoxLayout, QGridLayout, QSlider, QLabel, QLineEdit, QCheckBox, QMessageBox, QDialog\nfrom PyQt5.QtCore import Qt, QTimer\n\nclass InfoDialog(QDialog):\n    \"\"\" A Simple model dialog for the user.\n\n    \"\"\"\n    def __init__(self, message, parent=None):\n        super().__init__(parent)\n\n        self.setWindowTitle(\"Information\")\n\n        # Create layout\n        layout = QVBoxLayout()\n\n        # Create and add label with the message\n        self.message_label = QLabel(message, self)\n        layout.addWidget(self.message_label)\n\n        # Create and add OK button\n        self.ok_button = QPushButton(\"OK\", self)\n        self.ok_button.clicked.connect(self.accept)\n        layout.addWidget(self.ok_button)\n\n        self.setLayout(layout)\n\n        # Set window properties\n        self.setModal(True)\n        self.resize(300, 150)\n\n\nclass ROIMoveWidget(QWidget):\n    def __init__(self, viewer):\n        super().__init__()\n\n        self.viewer = viewer\n        self.initUI()\n\n    def initUI(self):\n        # Create buttons\n        self.up_button = QPushButton(\"\u2191\", self)\n        self.down_button = QPushButton(\"\u2193\", self)\n        self.left_button = QPushButton(\"\u2190\", self)\n        self.right_button = QPushButton(\"\u2192\", self)\n        ok_button = QPushButton(\"OK\", self)\n\n        # Create a slider\n        self.slider = QSlider(Qt.Horizontal, self)\n        self.slider.setMinimum(1)\n        self.slider.setMaximum(10)\n        self.slider.setValue(5)\n        self.slider.setTickPosition(QSlider.TicksBelow)\n        self.slider.setTickInterval(1)\n\n        # Create a text box to display the slider value\n        self.text_box = QLineEdit(self)\n        self.text_box.setReadOnly(True)\n        self.text_box.setText(str(self.slider.value()))\n\n        # Create a label for the text box\n        self.label = QLabel(\"Pixels shift\", self)\n\n        # Connect slider to function to update the text box\n        self.slider.valueChanged.connect(self.updateTextBox)\n\n        # Connect buttons to functions\n        self.up_button.pressed.connect(lambda: self.startRepeating(\"Up\"))\n        self.down_button.pressed.connect(lambda: self.startRepeating(\"Down\"))\n        self.left_button.pressed.connect(lambda: self.startRepeating(\"Left\"))\n        self.right_button.pressed.connect(lambda: self.startRepeating(\"Right\"))\n\n        self.up_button.released.connect(self.stopRepeating)\n        self.down_button.released.connect(self.stopRepeating)\n        self.left_button.released.connect(self.stopRepeating)\n        self.right_button.released.connect(self.stopRepeating)\n\n        ok_button.clicked.connect(lambda: self.buttonClicked(\"OK\"))\n\n        # Create layout and add buttons\n        grid_layout = QGridLayout()\n        grid_layout.addWidget(self.up_button, 0, 1)\n        grid_layout.addWidget(self.left_button, 1, 0)\n        grid_layout.addWidget(self.right_button, 1, 2)\n        grid_layout.addWidget(self.down_button, 2, 1)\n\n        # Layout for label and text box\n        label_text_layout = QHBoxLayout()\n        label_text_layout.addWidget(self.label)\n        label_text_layout.addWidget(self.text_box)\n\n        # Main layout\n        main_layout = QVBoxLayout()\n        main_layout.addLayout(grid_layout)\n        main_layout.addWidget(self.slider)\n        main_layout.addLayout(label_text_layout)\n\n        # Add OK and Cancel buttons at the bottom\n        bottom_layout = QHBoxLayout()\n        bottom_layout.addWidget(ok_button)\n        main_layout.addLayout(bottom_layout)\n\n        # Set layout for the main widget\n        self.setLayout(main_layout)\n\n        # Set window properties - keep it on top!\n        self.setWindowTitle(\"Move ROIs\")\n        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)\n        self.show()\n\n        # Timer for button repeat functionality\n        self.timer = QTimer()\n        self.timer.timeout.connect(self.repeatAction)\n        self.current_action = None\n\n    def startRepeating(self, direction):\n        self.current_action = direction\n        self.timer.start(100)  # Repeat every 100 milliseconds\n\n    def stopRepeating(self):\n        self.timer.stop()\n        self.current_action = None\n\n    def repeatAction(self):\n        if self.current_action:\n            self.buttonClicked(self.current_action)\n\n    def buttonClicked(self, label):\n        if label in [\"Up\", \"Down\", \"Left\", \"Right\"]:\n            shift = self.slider.value()\n            for roi in self.viewer.selected_rois():\n                if label == \"Up\":\n                    roi.roi_move(0, -shift)\n                elif label == \"Down\":\n                    roi.roi_move(0, shift)\n                elif label == \"Left\":\n                    roi.roi_move(-shift, 0)\n                else:\n                    roi.roi_move(shift, 0)\n\n        if label == \"OK\":\n            self.close()\n\n    def updateTextBox(self):\n        self.text_box.setText(str(self.slider.value()))\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n\n    viewer = None\n    try:\n        viewer = osirix.frontmost_viewer()\n    except osirix.exceptions.GrpcException:\n        dialog = InfoDialog(\"No OsiriX viewer found!\")\n        dialog.exec_()\n        sys.exit(0)\n        sys.exit(0)\n\n    ex = ROIMoveWidget(viewer)\n    sys.exit(app.exec_())\n</code></pre>"},{"location":"pyosirix/examples/ROI%20Nudge/index.html#requirements","title":"Requirements","text":"<pre><code>osirix\nPyQt5\n</code></pre>"},{"location":"pyosirix/examples/Read%20ITK/index.html","title":"Read ITK","text":""},{"location":"pyosirix/examples/Read%20ITK/index.html#template","title":"Template","text":"<p>A script for importing and visualizing ITK images (e.g. nrrd, mhd/mha, nifti) within OsiriX. </p> <p>Categories: </p>"},{"location":"pyosirix/examples/Read%20ITK/index.html#authors","title":"Authors","text":"Author(s)  Matthew Blackledge<sup>1</sup> Institution(s) <sup>1</sup>The Institute of Cancer Research  Contact  matthew.blackledge@icr.ac.uk"},{"location":"pyosirix/examples/Read%20ITK/index.html#datasets","title":"Datasets","text":"<p>Any data.</p>"},{"location":"pyosirix/examples/Read%20ITK/index.html#details","title":"Details","text":"<p>This script will read an ITK image format, create basic Dicom files, and load them into OsiriX for viewing.  Note that all created Dicom files will have SOP class \"Secondary Capture Image\" by default. Please change the relevant line in the code <code>ds.SOPClassUID = \"1.2.840.10008.5.1.4.1.1.7\"</code> to the necessary image type if required. Each ITK image will have a unique series and study UID.</p>"},{"location":"pyosirix/examples/Read%20ITK/index.html#expected-outcome","title":"Expected Outcome","text":"<p>Should load the ITK image into the OsiriX database for visualization.</p>"},{"location":"pyosirix/examples/Read%20ITK/index.html#script","title":"Script","text":"<pre><code>\"\"\" A script for reading and loading ITK images into OsiriX \"\"\"\n\nimport os\nimport sys\nimport datetime\nimport uuid\nimport shutil\nfrom time import sleep\n\nimport osirix\nimport SimpleITK as sitk\nimport numpy as np\nimport pydicom\nfrom pydicom.dataset import Dataset, FileDataset, FileMetaDataset\nfrom pydicom.uid import generate_uid, ExplicitVRLittleEndian, UID\nfrom PyQt5.QtWidgets import QFileDialog, QApplication\n\n\ndef select_file():\n    \"\"\" A simple widget for selecting a ITK file.\n    \"\"\"\n    QApplication(sys.argv)\n    options = QFileDialog.Options()\n    options |= QFileDialog.ReadOnly\n    file_name, _ = QFileDialog.getOpenFileName(None, \"Select File\", \"\", \"ITK Files (*.nrrd *.mha *.mhd *.nifti)\", options=options)\n    if file_name:\n        return file_name\n    else:\n        return None\n\n\ndef image_to_patient_coordinates(ijk, direction, spacing, origin):\n    \"\"\" Transform image to patient coordinates (ijk -&gt; xyz)\n    \"\"\"\n    trans = np.array([[direction[0] * spacing[0], direction[3] * spacing[1], direction[6] * spacing[2], origin[0]],\n                      [direction[1] * spacing[0], direction[4] * spacing[1], direction[7] * spacing[2], origin[1]],\n                      [direction[2] * spacing[0], direction[5] * spacing[1], direction[8] * spacing[2], origin[2]],\n                      [0, 0, 0, 1]])\n    xyz = np.dot(trans, np.r_[ijk, 1])[0:3]\n    return xyz\n\n\ndef scale_array(array, bits = 12):\n    \"\"\" Used to scale an input array in the range 0 to 2**bits\n    \"\"\"\n    window_max = float(2**bits)\n    min, max = np.nanmin(array), np.nanmax(array)\n    rescale_slope = (max - min) / window_max\n    rescale_intercept = min\n    scaled_array = (array - rescale_intercept) / rescale_slope\n    return scaled_array.astype(\"int\"), rescale_intercept, rescale_slope\n\n\ndef generate_accession_number():\n    \"\"\" Generate a unique ID to use as an accession number\n    \"\"\"\n    accession_number = str(uuid.uuid4())\n    short_accession_number = accession_number[:16]\n    return short_accession_number\n\n\ndef create_dicom_series_from_itk(itk_file, output_dir):\n    \"\"\" Create and save Dicom files for an ITK file (e.g. nrrd, nifti)\n    \"\"\"\n    # Read the file\n    image = sitk.ReadImage(itk_file)\n\n    # Get the numpy array from the image\n    image_array = sitk.GetArrayFromImage(image).astype(\"float\")\n\n    # Get image metadata\n    origin = image.GetOrigin()\n    spacing = image.GetSpacing()\n    direction = image.GetDirection()\n\n    study_uid = pydicom.uid.generate_uid()\n    study_id = str(np.random.randint(10000, 99999, size = 1))\n    series_uid = pydicom.uid.generate_uid()\n    series_number = np.random.randint(10000, 99999, size = 1)\n\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Iterate through each slice and create a DICOM file\n    for i in range(image_array.shape[0]):\n\n        # Scale the input array\n        bits = 12\n        slice_array = image_array[i, :, :]\n        slice_array, rintercept, rslope = scale_array(slice_array, bits=bits)\n        slice_array = slice_array.astype(f\"uint16\")\n\n\n        # Create a new DICOM dataset\n        file_meta = FileMetaDataset()\n        file_meta.MediaStorageSOPClassUID = UID(\"1.2.840.10008.5.1.4.1.1.7\")\n        file_meta.MediaStorageSOPInstanceUID = pydicom.uid.generate_uid()\n        file_meta.TransferSyntaxUID = pydicom.uid.ExplicitVRLittleEndian\n        file_meta.ImplementationClassUID = pydicom.uid.PYDICOM_IMPLEMENTATION_UID\n\n        # Calculate the File Meta Information Group Length\n        file_meta.FileMetaInformationGroupLength = 132 + len(file_meta)\n\n        # Create the FileDataset instance (initially no data elements, but file_meta supplied)\n        ds = FileDataset(f'slice_{i:04d}.dcm',\n                         {},\n                         file_meta=file_meta,\n                         preamble=b\"\\0\" * 128)\n\n        # Set creation date/time\n        dt = datetime.datetime.now()\n        date_str = dt.strftime('%Y%m%d')\n        time_str = dt.strftime('%H%M%S.%f')\n        ds.ContentDate = date_str\n        ds.StudyDate = date_str\n        ds.SeriesDate = date_str\n        ds.AcquisitionDate = date_str\n        ds.InstanceCreationDate = date_str\n        ds.ContentTime = time_str\n        ds.StudyTime = time_str\n        ds.SeriesTime = time_str\n        ds.AcquisitionTime = time_str\n        ds.InstanceCreationTime = time_str\n\n        # Set the transfer syntax\n        ds.is_little_endian = True\n        ds.is_implicit_VR = False\n\n        # Add necessary metadata\n        ds.SpecificCharacterSet = \"ISO_IR 100\"\n        ds.ImageType = ['DERIVED']\n        ds.SOPClassUID = \"1.2.840.10008.5.1.4.1.1.7\"\n        ds.SOPInstanceUID = file_meta.MediaStorageSOPInstanceUID\n        ds.StudyInstanceUID = study_uid\n        ds.SeriesInstanceUID = series_uid\n        ds.SeriesNumber = series_number\n        ds.StudyID = study_id\n        ds.InstanceNumber = i+1\n        ds.SeriesDescription = itk_file\n        ds.PatientName = os.path.basename(itk_file)\n        ds.PatientID = os.path.basename(itk_file)\n        ds.PatientBirthDate = \"19000101\"\n        ds.PatientSex = \"O\"\n        ds.PatientWeight = \"\"\n        ds.ReferringPhysicianName = \"\"\n        ds.ImagePositionPatient = image_to_patient_coordinates([0, 0, i],\n                                                               direction,\n                                                               spacing,\n                                                               origin).tolist()\n        ds.ImageOrientationPatient = [d for d in direction[:6]]\n        ds.PixelSpacing = [spacing[0], spacing[1]]\n        ds.SliceThickness = spacing[2]\n        ds.SliceInterval = spacing[2]\n        ds.Modality = \"OT\"  # Other\n        ds.Manufacturer = \"OSIRIXGRPC\"\n        ds.Rows, ds.Columns = slice_array.shape\n        ds.PhotometricInterpretation = \"MONOCHROME2\"\n        ds.SamplesPerPixel = 1\n        ds.BitsAllocated = 16\n        ds.BitsStored = bits\n        ds.HighBit = bits-1\n        ds.RescaleIntercept = rintercept\n        ds.RescaleSlope = rslope\n        ds.RescaleType = \"US\"\n        ds.ConversionType = \"SYN\"\n        ds.AccessionNumber = generate_accession_number()\n        ds.PixelRepresentation = 0  # Unsigned integers\n\n        # Set pixel data\n        ds.PixelData = slice_array.tobytes()\n\n        # Ensure that the File Meta Information Group Length is calculated and written\n        pydicom.dataset.validate_file_meta(ds.file_meta)\n\n        # Save the DICOM file\n        output_file = os.path.join(output_dir, f\"slice_{i:04d}.dcm\")\n        ds.save_as(output_file)\n\n\ndef run_script():\n    \"\"\" Run the pyOsiriX script\n    \"\"\"\n    selected_file = select_file()\n    if not selected_file:\n        return  # User clicked cancel\n\n    # Temporary storage\n    temp_out = \".itk2dicom_temp\"\n    os.makedirs(temp_out, exist_ok=True)\n\n    # Create the Dicom files\n    create_dicom_series_from_itk(selected_file, temp_out)\n\n    # Load into the database\n    bc = osirix.current_browser()\n    current_directory = os.getcwd()\n    file_list = [os.path.join(current_directory, temp_out, fl) for fl in os.listdir(temp_out)]\n    bc.copy_files_into_database(file_list)\n\n    # Wait until loaded (1s should be enough) and then delete\n    sleep(1)\n    shutil.rmtree(temp_out)\n\n\nif __name__ == \"__main__\":\n    run_script()\n</code></pre>"},{"location":"pyosirix/examples/Read%20ITK/index.html#requirements","title":"Requirements","text":"<pre><code>osirix\nnumpy\nPyQt5\nSimpleITK\npydicom\n</code></pre>"},{"location":"pyosirix/examples/Template/index.html","title":"Template","text":""},{"location":"pyosirix/examples/Template/index.html#template","title":"Template","text":"<p>A template example script that may be used to format other scripts.</p> <p>Categories:  </p>"},{"location":"pyosirix/examples/Template/index.html#authors","title":"Authors","text":"Author(s)  Joe Bloggs<sup>1</sup> Institution(s) <sup>1</sup>The Institute of Research  Contact  joe.bloggs@institute.com"},{"location":"pyosirix/examples/Template/index.html#datasets","title":"Datasets","text":"<p>Any data.</p>"},{"location":"pyosirix/examples/Template/index.html#details","title":"Details","text":"<p>This example script is used to demonstrate how to write pyOsiriX examples. It can be run as any of the four categories.</p>"},{"location":"pyosirix/examples/Template/index.html#expected-outcome","title":"Expected Outcome","text":"<p>This should export the current date, time and python version to a file on the Desktop called <code>osirix_template_out.txt</code>.</p>"},{"location":"pyosirix/examples/Template/index.html#script","title":"Script","text":"<pre><code>\"\"\" An example pyOsiriX script. \"\"\"\n\nimport os\nimport sys\nfrom datetime import datetime\n\nimport osirix\n\n\ndef get_user_desktop_path() -&gt; str:\n    \"\"\" Return the absolute path to the Desktop directory\n\n    Returns:\n        str: The absolute path\n    \"\"\"\n    return os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\n\n\nif __name__ == \"__main__\":\n    # Obtain the output file location\n    desktop_path = get_user_desktop_path()\n    output_file = os.path.join(desktop_path, \"osirix_template_out.txt\")\n\n    with open(output_file, \"w\") as fhandle:\n        # Check whether the connection with OsiriX could automatically be established.\n        if osirix._osirix:\n            fhandle.write(\"Successfully started pyOsiriX client.\\n\\n\")\n        else:\n            fhandle.write(\"Could not establish pyOsiriX connection.\\n\\n\")\n\n        # Write the current date/time and python version\n        fhandle.write(f\"Current date and time: {datetime.now().strftime('%m/%d/%Y, %H:%M:%S')}\\n\\n\")\n        fhandle.write(f\"Python version: {sys.version}\\n\\n\")\n\n        # Finally write the version of pyOsiriX being used\n        fhandle.write(f\"pyOsiriX version: {osirix.__version__}\")\n</code></pre>"},{"location":"pyosirix/examples/Template/index.html#requirements","title":"Requirements","text":"<pre><code>osirix\nnumpy\n</code></pre>"}]}