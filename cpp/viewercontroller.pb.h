// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: viewercontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_viewercontroller_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_viewercontroller_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "utilities.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_viewercontroller_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_viewercontroller_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_viewercontroller_2eproto;
namespace osirixgrpc {
class ViewerControllerBlendingControllerResponse;
struct ViewerControllerBlendingControllerResponseDefaultTypeInternal;
extern ViewerControllerBlendingControllerResponseDefaultTypeInternal _ViewerControllerBlendingControllerResponse_default_instance_;
class ViewerControllerCopyViewerWindowRequest;
struct ViewerControllerCopyViewerWindowRequestDefaultTypeInternal;
extern ViewerControllerCopyViewerWindowRequestDefaultTypeInternal _ViewerControllerCopyViewerWindowRequest_default_instance_;
class ViewerControllerCurDCMResponse;
struct ViewerControllerCurDCMResponseDefaultTypeInternal;
extern ViewerControllerCurDCMResponseDefaultTypeInternal _ViewerControllerCurDCMResponse_default_instance_;
class ViewerControllerIdxResponse;
struct ViewerControllerIdxResponseDefaultTypeInternal;
extern ViewerControllerIdxResponseDefaultTypeInternal _ViewerControllerIdxResponse_default_instance_;
class ViewerControllerIsDataVolumicRequest;
struct ViewerControllerIsDataVolumicRequestDefaultTypeInternal;
extern ViewerControllerIsDataVolumicRequestDefaultTypeInternal _ViewerControllerIsDataVolumicRequest_default_instance_;
class ViewerControllerIsDataVolumicResponse;
struct ViewerControllerIsDataVolumicResponseDefaultTypeInternal;
extern ViewerControllerIsDataVolumicResponseDefaultTypeInternal _ViewerControllerIsDataVolumicResponse_default_instance_;
class ViewerControllerMaxMovieIdxResponse;
struct ViewerControllerMaxMovieIdxResponseDefaultTypeInternal;
extern ViewerControllerMaxMovieIdxResponseDefaultTypeInternal _ViewerControllerMaxMovieIdxResponse_default_instance_;
class ViewerControllerModalityResponse;
struct ViewerControllerModalityResponseDefaultTypeInternal;
extern ViewerControllerModalityResponseDefaultTypeInternal _ViewerControllerModalityResponse_default_instance_;
class ViewerControllerMovieIdxResponse;
struct ViewerControllerMovieIdxResponseDefaultTypeInternal;
extern ViewerControllerMovieIdxResponseDefaultTypeInternal _ViewerControllerMovieIdxResponse_default_instance_;
class ViewerControllerNewROIRequest;
struct ViewerControllerNewROIRequestDefaultTypeInternal;
extern ViewerControllerNewROIRequestDefaultTypeInternal _ViewerControllerNewROIRequest_default_instance_;
class ViewerControllerNewROIRequest_Buffer;
struct ViewerControllerNewROIRequest_BufferDefaultTypeInternal;
extern ViewerControllerNewROIRequest_BufferDefaultTypeInternal _ViewerControllerNewROIRequest_Buffer_default_instance_;
class ViewerControllerNewROIRequest_Color;
struct ViewerControllerNewROIRequest_ColorDefaultTypeInternal;
extern ViewerControllerNewROIRequest_ColorDefaultTypeInternal _ViewerControllerNewROIRequest_Color_default_instance_;
class ViewerControllerNewROIRequest_Point2D;
struct ViewerControllerNewROIRequest_Point2DDefaultTypeInternal;
extern ViewerControllerNewROIRequest_Point2DDefaultTypeInternal _ViewerControllerNewROIRequest_Point2D_default_instance_;
class ViewerControllerNewROIRequest_Rect;
struct ViewerControllerNewROIRequest_RectDefaultTypeInternal;
extern ViewerControllerNewROIRequest_RectDefaultTypeInternal _ViewerControllerNewROIRequest_Rect_default_instance_;
class ViewerControllerNewROIResponse;
struct ViewerControllerNewROIResponseDefaultTypeInternal;
extern ViewerControllerNewROIResponseDefaultTypeInternal _ViewerControllerNewROIResponse_default_instance_;
class ViewerControllerOpenVRViewerForModeRequest;
struct ViewerControllerOpenVRViewerForModeRequestDefaultTypeInternal;
extern ViewerControllerOpenVRViewerForModeRequestDefaultTypeInternal _ViewerControllerOpenVRViewerForModeRequest_default_instance_;
class ViewerControllerOpenVRViewerForModeResponse;
struct ViewerControllerOpenVRViewerForModeResponseDefaultTypeInternal;
extern ViewerControllerOpenVRViewerForModeResponseDefaultTypeInternal _ViewerControllerOpenVRViewerForModeResponse_default_instance_;
class ViewerControllerPixListRequest;
struct ViewerControllerPixListRequestDefaultTypeInternal;
extern ViewerControllerPixListRequestDefaultTypeInternal _ViewerControllerPixListRequest_default_instance_;
class ViewerControllerPixListResponse;
struct ViewerControllerPixListResponseDefaultTypeInternal;
extern ViewerControllerPixListResponseDefaultTypeInternal _ViewerControllerPixListResponse_default_instance_;
class ViewerControllerROIListRequest;
struct ViewerControllerROIListRequestDefaultTypeInternal;
extern ViewerControllerROIListRequestDefaultTypeInternal _ViewerControllerROIListRequest_default_instance_;
class ViewerControllerROIListResponse;
struct ViewerControllerROIListResponseDefaultTypeInternal;
extern ViewerControllerROIListResponseDefaultTypeInternal _ViewerControllerROIListResponse_default_instance_;
class ViewerControllerROIListResponse_ROISlice;
struct ViewerControllerROIListResponse_ROISliceDefaultTypeInternal;
extern ViewerControllerROIListResponse_ROISliceDefaultTypeInternal _ViewerControllerROIListResponse_ROISlice_default_instance_;
class ViewerControllerROIsWithNameRequest;
struct ViewerControllerROIsWithNameRequestDefaultTypeInternal;
extern ViewerControllerROIsWithNameRequestDefaultTypeInternal _ViewerControllerROIsWithNameRequest_default_instance_;
class ViewerControllerROIsWithNameResponse;
struct ViewerControllerROIsWithNameResponseDefaultTypeInternal;
extern ViewerControllerROIsWithNameResponseDefaultTypeInternal _ViewerControllerROIsWithNameResponse_default_instance_;
class ViewerControllerResampleViewerControllerRequest;
struct ViewerControllerResampleViewerControllerRequestDefaultTypeInternal;
extern ViewerControllerResampleViewerControllerRequestDefaultTypeInternal _ViewerControllerResampleViewerControllerRequest_default_instance_;
class ViewerControllerSelectedROIsResponse;
struct ViewerControllerSelectedROIsResponseDefaultTypeInternal;
extern ViewerControllerSelectedROIsResponseDefaultTypeInternal _ViewerControllerSelectedROIsResponse_default_instance_;
class ViewerControllerSetIdxRequest;
struct ViewerControllerSetIdxRequestDefaultTypeInternal;
extern ViewerControllerSetIdxRequestDefaultTypeInternal _ViewerControllerSetIdxRequest_default_instance_;
class ViewerControllerSetMovieIdxRequest;
struct ViewerControllerSetMovieIdxRequestDefaultTypeInternal;
extern ViewerControllerSetMovieIdxRequestDefaultTypeInternal _ViewerControllerSetMovieIdxRequest_default_instance_;
class ViewerControllerSetWLWWRequest;
struct ViewerControllerSetWLWWRequestDefaultTypeInternal;
extern ViewerControllerSetWLWWRequestDefaultTypeInternal _ViewerControllerSetWLWWRequest_default_instance_;
class ViewerControllerTitleResponse;
struct ViewerControllerTitleResponseDefaultTypeInternal;
extern ViewerControllerTitleResponseDefaultTypeInternal _ViewerControllerTitleResponse_default_instance_;
class ViewerControllerVRControllersResponse;
struct ViewerControllerVRControllersResponseDefaultTypeInternal;
extern ViewerControllerVRControllersResponseDefaultTypeInternal _ViewerControllerVRControllersResponse_default_instance_;
class ViewerControllerWLWWResponse;
struct ViewerControllerWLWWResponseDefaultTypeInternal;
extern ViewerControllerWLWWResponseDefaultTypeInternal _ViewerControllerWLWWResponse_default_instance_;
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template <>
::osirixgrpc::ViewerControllerBlendingControllerResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerBlendingControllerResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerCopyViewerWindowRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerCopyViewerWindowRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerCurDCMResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerCurDCMResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerIdxResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerIdxResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerIsDataVolumicRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerIsDataVolumicRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerIsDataVolumicResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerIsDataVolumicResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerMaxMovieIdxResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerMaxMovieIdxResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerModalityResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerModalityResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerMovieIdxResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerMovieIdxResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerNewROIRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerNewROIRequest_Buffer* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Buffer>(Arena*);
template <>
::osirixgrpc::ViewerControllerNewROIRequest_Color* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Color>(Arena*);
template <>
::osirixgrpc::ViewerControllerNewROIRequest_Point2D* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Point2D>(Arena*);
template <>
::osirixgrpc::ViewerControllerNewROIRequest_Rect* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Rect>(Arena*);
template <>
::osirixgrpc::ViewerControllerNewROIResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerPixListRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerPixListRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerPixListResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerPixListResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerROIListRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerROIListRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerROIListResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerROIListResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerROIListResponse_ROISlice* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerROIListResponse_ROISlice>(Arena*);
template <>
::osirixgrpc::ViewerControllerROIsWithNameRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerROIsWithNameRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerROIsWithNameResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerROIsWithNameResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerResampleViewerControllerRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerResampleViewerControllerRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerSelectedROIsResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerSelectedROIsResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerSetIdxRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerSetIdxRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerSetMovieIdxRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerSetMovieIdxRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerSetWLWWRequest* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerSetWLWWRequest>(Arena*);
template <>
::osirixgrpc::ViewerControllerTitleResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerTitleResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerVRControllersResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerVRControllersResponse>(Arena*);
template <>
::osirixgrpc::ViewerControllerWLWWResponse* Arena::CreateMaybeMessage<::osirixgrpc::ViewerControllerWLWWResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace osirixgrpc {

// ===================================================================


// -------------------------------------------------------------------

class ViewerControllerPixListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerPixListResponse) */ {
 public:
  inline ViewerControllerPixListResponse() : ViewerControllerPixListResponse(nullptr) {}
  ~ViewerControllerPixListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerPixListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerPixListResponse(const ViewerControllerPixListResponse& from);
  ViewerControllerPixListResponse(ViewerControllerPixListResponse&& from) noexcept
    : ViewerControllerPixListResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerPixListResponse& operator=(const ViewerControllerPixListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerPixListResponse& operator=(ViewerControllerPixListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerPixListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerPixListResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerPixListResponse*>(
               &_ViewerControllerPixListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ViewerControllerPixListResponse& a, ViewerControllerPixListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerPixListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerPixListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerPixListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerPixListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerPixListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerPixListResponse& from) {
    ViewerControllerPixListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerPixListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerPixListResponse";
  }
  protected:
  explicit ViewerControllerPixListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.DCMPix pix = 2;
  int pix_size() const;
  private:
  int _internal_pix_size() const;

  public:
  void clear_pix() ;
  ::osirixgrpc::DCMPix* mutable_pix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::DCMPix >*
      mutable_pix();
  private:
  const ::osirixgrpc::DCMPix& _internal_pix(int index) const;
  ::osirixgrpc::DCMPix* _internal_add_pix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::DCMPix>& _internal_pix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::DCMPix>* _internal_mutable_pix();
  public:
  const ::osirixgrpc::DCMPix& pix(int index) const;
  ::osirixgrpc::DCMPix* add_pix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::DCMPix >&
      pix() const;
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerPixListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::DCMPix > pix_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerROIListResponse_ROISlice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerROIListResponse.ROISlice) */ {
 public:
  inline ViewerControllerROIListResponse_ROISlice() : ViewerControllerROIListResponse_ROISlice(nullptr) {}
  ~ViewerControllerROIListResponse_ROISlice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerROIListResponse_ROISlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerROIListResponse_ROISlice(const ViewerControllerROIListResponse_ROISlice& from);
  ViewerControllerROIListResponse_ROISlice(ViewerControllerROIListResponse_ROISlice&& from) noexcept
    : ViewerControllerROIListResponse_ROISlice() {
    *this = ::std::move(from);
  }

  inline ViewerControllerROIListResponse_ROISlice& operator=(const ViewerControllerROIListResponse_ROISlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerROIListResponse_ROISlice& operator=(ViewerControllerROIListResponse_ROISlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerROIListResponse_ROISlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerROIListResponse_ROISlice* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerROIListResponse_ROISlice*>(
               &_ViewerControllerROIListResponse_ROISlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ViewerControllerROIListResponse_ROISlice& a, ViewerControllerROIListResponse_ROISlice& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerROIListResponse_ROISlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerROIListResponse_ROISlice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerROIListResponse_ROISlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerROIListResponse_ROISlice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerROIListResponse_ROISlice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerROIListResponse_ROISlice& from) {
    ViewerControllerROIListResponse_ROISlice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerROIListResponse_ROISlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerROIListResponse.ROISlice";
  }
  protected:
  explicit ViewerControllerROIListResponse_ROISlice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoisFieldNumber = 1,
  };
  // repeated .osirixgrpc.ROI rois = 1;
  int rois_size() const;
  private:
  int _internal_rois_size() const;

  public:
  void clear_rois() ;
  ::osirixgrpc::ROI* mutable_rois(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >*
      mutable_rois();
  private:
  const ::osirixgrpc::ROI& _internal_rois(int index) const;
  ::osirixgrpc::ROI* _internal_add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>& _internal_rois() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>* _internal_mutable_rois();
  public:
  const ::osirixgrpc::ROI& rois(int index) const;
  ::osirixgrpc::ROI* add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >&
      rois() const;
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI > rois_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerROIListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerROIListResponse) */ {
 public:
  inline ViewerControllerROIListResponse() : ViewerControllerROIListResponse(nullptr) {}
  ~ViewerControllerROIListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerROIListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerROIListResponse(const ViewerControllerROIListResponse& from);
  ViewerControllerROIListResponse(ViewerControllerROIListResponse&& from) noexcept
    : ViewerControllerROIListResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerROIListResponse& operator=(const ViewerControllerROIListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerROIListResponse& operator=(ViewerControllerROIListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerROIListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerROIListResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerROIListResponse*>(
               &_ViewerControllerROIListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ViewerControllerROIListResponse& a, ViewerControllerROIListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerROIListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerROIListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerROIListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerROIListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerROIListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerROIListResponse& from) {
    ViewerControllerROIListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerROIListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerROIListResponse";
  }
  protected:
  explicit ViewerControllerROIListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ViewerControllerROIListResponse_ROISlice ROISlice;

  // accessors -------------------------------------------------------

  enum : int {
    kRoiSlicesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.ViewerControllerROIListResponse.ROISlice roi_slices = 2;
  int roi_slices_size() const;
  private:
  int _internal_roi_slices_size() const;

  public:
  void clear_roi_slices() ;
  ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* mutable_roi_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice >*
      mutable_roi_slices();
  private:
  const ::osirixgrpc::ViewerControllerROIListResponse_ROISlice& _internal_roi_slices(int index) const;
  ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* _internal_add_roi_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerROIListResponse_ROISlice>& _internal_roi_slices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerROIListResponse_ROISlice>* _internal_mutable_roi_slices();
  public:
  const ::osirixgrpc::ViewerControllerROIListResponse_ROISlice& roi_slices(int index) const;
  ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* add_roi_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice >&
      roi_slices() const;
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerROIListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice > roi_slices_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerNewROIResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerNewROIResponse) */ {
 public:
  inline ViewerControllerNewROIResponse() : ViewerControllerNewROIResponse(nullptr) {}
  ~ViewerControllerNewROIResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerNewROIResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerNewROIResponse(const ViewerControllerNewROIResponse& from);
  ViewerControllerNewROIResponse(ViewerControllerNewROIResponse&& from) noexcept
    : ViewerControllerNewROIResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerNewROIResponse& operator=(const ViewerControllerNewROIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerNewROIResponse& operator=(ViewerControllerNewROIResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerNewROIResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerNewROIResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerNewROIResponse*>(
               &_ViewerControllerNewROIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ViewerControllerNewROIResponse& a, ViewerControllerNewROIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerNewROIResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerNewROIResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerNewROIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerNewROIResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerNewROIResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerNewROIResponse& from) {
    ViewerControllerNewROIResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerNewROIResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerNewROIResponse";
  }
  protected:
  explicit ViewerControllerNewROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kRoiFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // .osirixgrpc.ROI roi = 2;
  bool has_roi() const;
  void clear_roi() ;
  const ::osirixgrpc::ROI& roi() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ROI* release_roi();
  ::osirixgrpc::ROI* mutable_roi();
  void set_allocated_roi(::osirixgrpc::ROI* roi);
  private:
  const ::osirixgrpc::ROI& _internal_roi() const;
  ::osirixgrpc::ROI* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::osirixgrpc::ROI* roi);
  ::osirixgrpc::ROI* unsafe_arena_release_roi();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerNewROIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::osirixgrpc::ROI* roi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerCurDCMResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerCurDCMResponse) */ {
 public:
  inline ViewerControllerCurDCMResponse() : ViewerControllerCurDCMResponse(nullptr) {}
  ~ViewerControllerCurDCMResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerCurDCMResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerCurDCMResponse(const ViewerControllerCurDCMResponse& from);
  ViewerControllerCurDCMResponse(ViewerControllerCurDCMResponse&& from) noexcept
    : ViewerControllerCurDCMResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerCurDCMResponse& operator=(const ViewerControllerCurDCMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerCurDCMResponse& operator=(ViewerControllerCurDCMResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerCurDCMResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerCurDCMResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerCurDCMResponse*>(
               &_ViewerControllerCurDCMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ViewerControllerCurDCMResponse& a, ViewerControllerCurDCMResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerCurDCMResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerCurDCMResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerCurDCMResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerCurDCMResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerCurDCMResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerCurDCMResponse& from) {
    ViewerControllerCurDCMResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerCurDCMResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerCurDCMResponse";
  }
  protected:
  explicit ViewerControllerCurDCMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kPixFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // .osirixgrpc.DCMPix pix = 2;
  bool has_pix() const;
  void clear_pix() ;
  const ::osirixgrpc::DCMPix& pix() const;
  PROTOBUF_NODISCARD ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerCurDCMResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::osirixgrpc::DCMPix* pix_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerROIsWithNameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerROIsWithNameResponse) */ {
 public:
  inline ViewerControllerROIsWithNameResponse() : ViewerControllerROIsWithNameResponse(nullptr) {}
  ~ViewerControllerROIsWithNameResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerROIsWithNameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerROIsWithNameResponse(const ViewerControllerROIsWithNameResponse& from);
  ViewerControllerROIsWithNameResponse(ViewerControllerROIsWithNameResponse&& from) noexcept
    : ViewerControllerROIsWithNameResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerROIsWithNameResponse& operator=(const ViewerControllerROIsWithNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerROIsWithNameResponse& operator=(ViewerControllerROIsWithNameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerROIsWithNameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerROIsWithNameResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerROIsWithNameResponse*>(
               &_ViewerControllerROIsWithNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ViewerControllerROIsWithNameResponse& a, ViewerControllerROIsWithNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerROIsWithNameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerROIsWithNameResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerROIsWithNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerROIsWithNameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerROIsWithNameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerROIsWithNameResponse& from) {
    ViewerControllerROIsWithNameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerROIsWithNameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerROIsWithNameResponse";
  }
  protected:
  explicit ViewerControllerROIsWithNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoisFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.ROI rois = 2;
  int rois_size() const;
  private:
  int _internal_rois_size() const;

  public:
  void clear_rois() ;
  ::osirixgrpc::ROI* mutable_rois(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >*
      mutable_rois();
  private:
  const ::osirixgrpc::ROI& _internal_rois(int index) const;
  ::osirixgrpc::ROI* _internal_add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>& _internal_rois() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>* _internal_mutable_rois();
  public:
  const ::osirixgrpc::ROI& rois(int index) const;
  ::osirixgrpc::ROI* add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >&
      rois() const;
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerROIsWithNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI > rois_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerSelectedROIsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerSelectedROIsResponse) */ {
 public:
  inline ViewerControllerSelectedROIsResponse() : ViewerControllerSelectedROIsResponse(nullptr) {}
  ~ViewerControllerSelectedROIsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerSelectedROIsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerSelectedROIsResponse(const ViewerControllerSelectedROIsResponse& from);
  ViewerControllerSelectedROIsResponse(ViewerControllerSelectedROIsResponse&& from) noexcept
    : ViewerControllerSelectedROIsResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerSelectedROIsResponse& operator=(const ViewerControllerSelectedROIsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerSelectedROIsResponse& operator=(ViewerControllerSelectedROIsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerSelectedROIsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerSelectedROIsResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerSelectedROIsResponse*>(
               &_ViewerControllerSelectedROIsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ViewerControllerSelectedROIsResponse& a, ViewerControllerSelectedROIsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerSelectedROIsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerSelectedROIsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerSelectedROIsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerSelectedROIsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerSelectedROIsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerSelectedROIsResponse& from) {
    ViewerControllerSelectedROIsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerSelectedROIsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerSelectedROIsResponse";
  }
  protected:
  explicit ViewerControllerSelectedROIsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoisFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.ROI rois = 2;
  int rois_size() const;
  private:
  int _internal_rois_size() const;

  public:
  void clear_rois() ;
  ::osirixgrpc::ROI* mutable_rois(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >*
      mutable_rois();
  private:
  const ::osirixgrpc::ROI& _internal_rois(int index) const;
  ::osirixgrpc::ROI* _internal_add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>& _internal_rois() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>* _internal_mutable_rois();
  public:
  const ::osirixgrpc::ROI& rois(int index) const;
  ::osirixgrpc::ROI* add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >&
      rois() const;
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerSelectedROIsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI > rois_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerIsDataVolumicResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerIsDataVolumicResponse) */ {
 public:
  inline ViewerControllerIsDataVolumicResponse() : ViewerControllerIsDataVolumicResponse(nullptr) {}
  ~ViewerControllerIsDataVolumicResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerIsDataVolumicResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerIsDataVolumicResponse(const ViewerControllerIsDataVolumicResponse& from);
  ViewerControllerIsDataVolumicResponse(ViewerControllerIsDataVolumicResponse&& from) noexcept
    : ViewerControllerIsDataVolumicResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerIsDataVolumicResponse& operator=(const ViewerControllerIsDataVolumicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerIsDataVolumicResponse& operator=(ViewerControllerIsDataVolumicResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerIsDataVolumicResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerIsDataVolumicResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerIsDataVolumicResponse*>(
               &_ViewerControllerIsDataVolumicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ViewerControllerIsDataVolumicResponse& a, ViewerControllerIsDataVolumicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerIsDataVolumicResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerIsDataVolumicResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerIsDataVolumicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerIsDataVolumicResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerIsDataVolumicResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerIsDataVolumicResponse& from) {
    ViewerControllerIsDataVolumicResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerIsDataVolumicResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerIsDataVolumicResponse";
  }
  protected:
  explicit ViewerControllerIsDataVolumicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIsVolumicFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // bool is_volumic = 2;
  void clear_is_volumic() ;
  bool is_volumic() const;
  void set_is_volumic(bool value);

  private:
  bool _internal_is_volumic() const;
  void _internal_set_is_volumic(bool value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerIsDataVolumicResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    bool is_volumic_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerBlendingControllerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerBlendingControllerResponse) */ {
 public:
  inline ViewerControllerBlendingControllerResponse() : ViewerControllerBlendingControllerResponse(nullptr) {}
  ~ViewerControllerBlendingControllerResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerBlendingControllerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerBlendingControllerResponse(const ViewerControllerBlendingControllerResponse& from);
  ViewerControllerBlendingControllerResponse(ViewerControllerBlendingControllerResponse&& from) noexcept
    : ViewerControllerBlendingControllerResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerBlendingControllerResponse& operator=(const ViewerControllerBlendingControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerBlendingControllerResponse& operator=(ViewerControllerBlendingControllerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerBlendingControllerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerBlendingControllerResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerBlendingControllerResponse*>(
               &_ViewerControllerBlendingControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ViewerControllerBlendingControllerResponse& a, ViewerControllerBlendingControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerBlendingControllerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerBlendingControllerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerBlendingControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerBlendingControllerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerBlendingControllerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerBlendingControllerResponse& from) {
    ViewerControllerBlendingControllerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerBlendingControllerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerBlendingControllerResponse";
  }
  protected:
  explicit ViewerControllerBlendingControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kBlendingViewerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // .osirixgrpc.ViewerController blending_viewer = 2;
  bool has_blending_viewer() const;
  void clear_blending_viewer() ;
  const ::osirixgrpc::ViewerController& blending_viewer() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_blending_viewer();
  ::osirixgrpc::ViewerController* mutable_blending_viewer();
  void set_allocated_blending_viewer(::osirixgrpc::ViewerController* blending_viewer);
  private:
  const ::osirixgrpc::ViewerController& _internal_blending_viewer() const;
  ::osirixgrpc::ViewerController* _internal_mutable_blending_viewer();
  public:
  void unsafe_arena_set_allocated_blending_viewer(
      ::osirixgrpc::ViewerController* blending_viewer);
  ::osirixgrpc::ViewerController* unsafe_arena_release_blending_viewer();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerBlendingControllerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::osirixgrpc::ViewerController* blending_viewer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerVRControllersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerVRControllersResponse) */ {
 public:
  inline ViewerControllerVRControllersResponse() : ViewerControllerVRControllersResponse(nullptr) {}
  ~ViewerControllerVRControllersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerVRControllersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerVRControllersResponse(const ViewerControllerVRControllersResponse& from);
  ViewerControllerVRControllersResponse(ViewerControllerVRControllersResponse&& from) noexcept
    : ViewerControllerVRControllersResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerVRControllersResponse& operator=(const ViewerControllerVRControllersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerVRControllersResponse& operator=(ViewerControllerVRControllersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerVRControllersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerVRControllersResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerVRControllersResponse*>(
               &_ViewerControllerVRControllersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ViewerControllerVRControllersResponse& a, ViewerControllerVRControllersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerVRControllersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerVRControllersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerVRControllersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerVRControllersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerVRControllersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerVRControllersResponse& from) {
    ViewerControllerVRControllersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerVRControllersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerVRControllersResponse";
  }
  protected:
  explicit ViewerControllerVRControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrControllersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.VRController vr_controllers = 2;
  int vr_controllers_size() const;
  private:
  int _internal_vr_controllers_size() const;

  public:
  void clear_vr_controllers() ;
  ::osirixgrpc::VRController* mutable_vr_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >*
      mutable_vr_controllers();
  private:
  const ::osirixgrpc::VRController& _internal_vr_controllers(int index) const;
  ::osirixgrpc::VRController* _internal_add_vr_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::VRController>& _internal_vr_controllers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::VRController>* _internal_mutable_vr_controllers();
  public:
  const ::osirixgrpc::VRController& vr_controllers(int index) const;
  ::osirixgrpc::VRController* add_vr_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >&
      vr_controllers() const;
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerVRControllersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController > vr_controllers_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerTitleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerTitleResponse) */ {
 public:
  inline ViewerControllerTitleResponse() : ViewerControllerTitleResponse(nullptr) {}
  ~ViewerControllerTitleResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerTitleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerTitleResponse(const ViewerControllerTitleResponse& from);
  ViewerControllerTitleResponse(ViewerControllerTitleResponse&& from) noexcept
    : ViewerControllerTitleResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerTitleResponse& operator=(const ViewerControllerTitleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerTitleResponse& operator=(ViewerControllerTitleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerTitleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerTitleResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerTitleResponse*>(
               &_ViewerControllerTitleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ViewerControllerTitleResponse& a, ViewerControllerTitleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerTitleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerTitleResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerTitleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerTitleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerTitleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerTitleResponse& from) {
    ViewerControllerTitleResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerTitleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerTitleResponse";
  }
  protected:
  explicit ViewerControllerTitleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerTitleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerModalityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerModalityResponse) */ {
 public:
  inline ViewerControllerModalityResponse() : ViewerControllerModalityResponse(nullptr) {}
  ~ViewerControllerModalityResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerModalityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerModalityResponse(const ViewerControllerModalityResponse& from);
  ViewerControllerModalityResponse(ViewerControllerModalityResponse&& from) noexcept
    : ViewerControllerModalityResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerModalityResponse& operator=(const ViewerControllerModalityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerModalityResponse& operator=(ViewerControllerModalityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerModalityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerModalityResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerModalityResponse*>(
               &_ViewerControllerModalityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ViewerControllerModalityResponse& a, ViewerControllerModalityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerModalityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerModalityResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerModalityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerModalityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerModalityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerModalityResponse& from) {
    ViewerControllerModalityResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerModalityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerModalityResponse";
  }
  protected:
  explicit ViewerControllerModalityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModalityFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string modality = 2;
  void clear_modality() ;
  const std::string& modality() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modality(Arg_&& arg, Args_... args);
  std::string* mutable_modality();
  PROTOBUF_NODISCARD std::string* release_modality();
  void set_allocated_modality(std::string* ptr);

  private:
  const std::string& _internal_modality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modality(
      const std::string& value);
  std::string* _internal_mutable_modality();

  public:
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerModalityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modality_;
    ::osirixgrpc::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerMovieIdxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerMovieIdxResponse) */ {
 public:
  inline ViewerControllerMovieIdxResponse() : ViewerControllerMovieIdxResponse(nullptr) {}
  ~ViewerControllerMovieIdxResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerMovieIdxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerMovieIdxResponse(const ViewerControllerMovieIdxResponse& from);
  ViewerControllerMovieIdxResponse(ViewerControllerMovieIdxResponse&& from) noexcept
    : ViewerControllerMovieIdxResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerMovieIdxResponse& operator=(const ViewerControllerMovieIdxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerMovieIdxResponse& operator=(ViewerControllerMovieIdxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerMovieIdxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerMovieIdxResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerMovieIdxResponse*>(
               &_ViewerControllerMovieIdxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ViewerControllerMovieIdxResponse& a, ViewerControllerMovieIdxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerMovieIdxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerMovieIdxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerMovieIdxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerMovieIdxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerMovieIdxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerMovieIdxResponse& from) {
    ViewerControllerMovieIdxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerMovieIdxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerMovieIdxResponse";
  }
  protected:
  explicit ViewerControllerMovieIdxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMovieIdxFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // int32 movie_idx = 2;
  void clear_movie_idx() ;
  ::int32_t movie_idx() const;
  void set_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_movie_idx() const;
  void _internal_set_movie_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerMovieIdxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::int32_t movie_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerMaxMovieIdxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerMaxMovieIdxResponse) */ {
 public:
  inline ViewerControllerMaxMovieIdxResponse() : ViewerControllerMaxMovieIdxResponse(nullptr) {}
  ~ViewerControllerMaxMovieIdxResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerMaxMovieIdxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerMaxMovieIdxResponse(const ViewerControllerMaxMovieIdxResponse& from);
  ViewerControllerMaxMovieIdxResponse(ViewerControllerMaxMovieIdxResponse&& from) noexcept
    : ViewerControllerMaxMovieIdxResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerMaxMovieIdxResponse& operator=(const ViewerControllerMaxMovieIdxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerMaxMovieIdxResponse& operator=(ViewerControllerMaxMovieIdxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerMaxMovieIdxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerMaxMovieIdxResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerMaxMovieIdxResponse*>(
               &_ViewerControllerMaxMovieIdxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ViewerControllerMaxMovieIdxResponse& a, ViewerControllerMaxMovieIdxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerMaxMovieIdxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerMaxMovieIdxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerMaxMovieIdxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerMaxMovieIdxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerMaxMovieIdxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerMaxMovieIdxResponse& from) {
    ViewerControllerMaxMovieIdxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerMaxMovieIdxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerMaxMovieIdxResponse";
  }
  protected:
  explicit ViewerControllerMaxMovieIdxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMaxMovieIdxFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // int32 max_movie_idx = 2;
  void clear_max_movie_idx() ;
  ::int32_t max_movie_idx() const;
  void set_max_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_max_movie_idx() const;
  void _internal_set_max_movie_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::int32_t max_movie_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerIdxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerIdxResponse) */ {
 public:
  inline ViewerControllerIdxResponse() : ViewerControllerIdxResponse(nullptr) {}
  ~ViewerControllerIdxResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerIdxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerIdxResponse(const ViewerControllerIdxResponse& from);
  ViewerControllerIdxResponse(ViewerControllerIdxResponse&& from) noexcept
    : ViewerControllerIdxResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerIdxResponse& operator=(const ViewerControllerIdxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerIdxResponse& operator=(ViewerControllerIdxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerIdxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerIdxResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerIdxResponse*>(
               &_ViewerControllerIdxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ViewerControllerIdxResponse& a, ViewerControllerIdxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerIdxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerIdxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerIdxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerIdxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerIdxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerIdxResponse& from) {
    ViewerControllerIdxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerIdxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerIdxResponse";
  }
  protected:
  explicit ViewerControllerIdxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIdxFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // int32 idx = 2;
  void clear_idx() ;
  ::int32_t idx() const;
  void set_idx(::int32_t value);

  private:
  ::int32_t _internal_idx() const;
  void _internal_set_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerIdxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::int32_t idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerWLWWResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerWLWWResponse) */ {
 public:
  inline ViewerControllerWLWWResponse() : ViewerControllerWLWWResponse(nullptr) {}
  ~ViewerControllerWLWWResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerWLWWResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerWLWWResponse(const ViewerControllerWLWWResponse& from);
  ViewerControllerWLWWResponse(ViewerControllerWLWWResponse&& from) noexcept
    : ViewerControllerWLWWResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerWLWWResponse& operator=(const ViewerControllerWLWWResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerWLWWResponse& operator=(ViewerControllerWLWWResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerWLWWResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerWLWWResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerWLWWResponse*>(
               &_ViewerControllerWLWWResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ViewerControllerWLWWResponse& a, ViewerControllerWLWWResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerWLWWResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerWLWWResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerWLWWResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerWLWWResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerWLWWResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerWLWWResponse& from) {
    ViewerControllerWLWWResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerWLWWResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerWLWWResponse";
  }
  protected:
  explicit ViewerControllerWLWWResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kWlFieldNumber = 2,
    kWwFieldNumber = 3,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // float wl = 2;
  void clear_wl() ;
  float wl() const;
  void set_wl(float value);

  private:
  float _internal_wl() const;
  void _internal_set_wl(float value);

  public:
  // float ww = 3;
  void clear_ww() ;
  float ww() const;
  void set_ww(float value);

  private:
  float _internal_ww() const;
  void _internal_set_ww(float value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerWLWWResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    float wl_;
    float ww_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerOpenVRViewerForModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse) */ {
 public:
  inline ViewerControllerOpenVRViewerForModeResponse() : ViewerControllerOpenVRViewerForModeResponse(nullptr) {}
  ~ViewerControllerOpenVRViewerForModeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerOpenVRViewerForModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerOpenVRViewerForModeResponse(const ViewerControllerOpenVRViewerForModeResponse& from);
  ViewerControllerOpenVRViewerForModeResponse(ViewerControllerOpenVRViewerForModeResponse&& from) noexcept
    : ViewerControllerOpenVRViewerForModeResponse() {
    *this = ::std::move(from);
  }

  inline ViewerControllerOpenVRViewerForModeResponse& operator=(const ViewerControllerOpenVRViewerForModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerOpenVRViewerForModeResponse& operator=(ViewerControllerOpenVRViewerForModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerOpenVRViewerForModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerOpenVRViewerForModeResponse* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerOpenVRViewerForModeResponse*>(
               &_ViewerControllerOpenVRViewerForModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ViewerControllerOpenVRViewerForModeResponse& a, ViewerControllerOpenVRViewerForModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerOpenVRViewerForModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerOpenVRViewerForModeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerOpenVRViewerForModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerOpenVRViewerForModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerOpenVRViewerForModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerOpenVRViewerForModeResponse& from) {
    ViewerControllerOpenVRViewerForModeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerOpenVRViewerForModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerOpenVRViewerForModeResponse";
  }
  protected:
  explicit ViewerControllerOpenVRViewerForModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kVrControllerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::osirixgrpc::Status& status() const;
  PROTOBUF_NODISCARD ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();
  // .osirixgrpc.VRController vr_controller = 2;
  bool has_vr_controller() const;
  void clear_vr_controller() ;
  const ::osirixgrpc::VRController& vr_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::VRController* release_vr_controller();
  ::osirixgrpc::VRController* mutable_vr_controller();
  void set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller);
  private:
  const ::osirixgrpc::VRController& _internal_vr_controller() const;
  ::osirixgrpc::VRController* _internal_mutable_vr_controller();
  public:
  void unsafe_arena_set_allocated_vr_controller(
      ::osirixgrpc::VRController* vr_controller);
  ::osirixgrpc::VRController* unsafe_arena_release_vr_controller();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::Status* status_;
    ::osirixgrpc::VRController* vr_controller_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerPixListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerPixListRequest) */ {
 public:
  inline ViewerControllerPixListRequest() : ViewerControllerPixListRequest(nullptr) {}
  ~ViewerControllerPixListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerPixListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerPixListRequest(const ViewerControllerPixListRequest& from);
  ViewerControllerPixListRequest(ViewerControllerPixListRequest&& from) noexcept
    : ViewerControllerPixListRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerPixListRequest& operator=(const ViewerControllerPixListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerPixListRequest& operator=(ViewerControllerPixListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerPixListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerPixListRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerPixListRequest*>(
               &_ViewerControllerPixListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ViewerControllerPixListRequest& a, ViewerControllerPixListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerPixListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerPixListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerPixListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerPixListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerPixListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerPixListRequest& from) {
    ViewerControllerPixListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerPixListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerPixListRequest";
  }
  protected:
  explicit ViewerControllerPixListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kMovieIdxFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // int32 movie_idx = 2;
  void clear_movie_idx() ;
  ::int32_t movie_idx() const;
  void set_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_movie_idx() const;
  void _internal_set_movie_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerPixListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::int32_t movie_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerROIListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerROIListRequest) */ {
 public:
  inline ViewerControllerROIListRequest() : ViewerControllerROIListRequest(nullptr) {}
  ~ViewerControllerROIListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerROIListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerROIListRequest(const ViewerControllerROIListRequest& from);
  ViewerControllerROIListRequest(ViewerControllerROIListRequest&& from) noexcept
    : ViewerControllerROIListRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerROIListRequest& operator=(const ViewerControllerROIListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerROIListRequest& operator=(ViewerControllerROIListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerROIListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerROIListRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerROIListRequest*>(
               &_ViewerControllerROIListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ViewerControllerROIListRequest& a, ViewerControllerROIListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerROIListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerROIListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerROIListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerROIListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerROIListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerROIListRequest& from) {
    ViewerControllerROIListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerROIListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerROIListRequest";
  }
  protected:
  explicit ViewerControllerROIListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kMovieIdxFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // int32 movie_idx = 2;
  void clear_movie_idx() ;
  ::int32_t movie_idx() const;
  void set_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_movie_idx() const;
  void _internal_set_movie_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerROIListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::int32_t movie_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerNewROIRequest_Buffer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerNewROIRequest.Buffer) */ {
 public:
  inline ViewerControllerNewROIRequest_Buffer() : ViewerControllerNewROIRequest_Buffer(nullptr) {}
  ~ViewerControllerNewROIRequest_Buffer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Buffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerNewROIRequest_Buffer(const ViewerControllerNewROIRequest_Buffer& from);
  ViewerControllerNewROIRequest_Buffer(ViewerControllerNewROIRequest_Buffer&& from) noexcept
    : ViewerControllerNewROIRequest_Buffer() {
    *this = ::std::move(from);
  }

  inline ViewerControllerNewROIRequest_Buffer& operator=(const ViewerControllerNewROIRequest_Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerNewROIRequest_Buffer& operator=(ViewerControllerNewROIRequest_Buffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerNewROIRequest_Buffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerNewROIRequest_Buffer* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerNewROIRequest_Buffer*>(
               &_ViewerControllerNewROIRequest_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ViewerControllerNewROIRequest_Buffer& a, ViewerControllerNewROIRequest_Buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerNewROIRequest_Buffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerNewROIRequest_Buffer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerNewROIRequest_Buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerNewROIRequest_Buffer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerNewROIRequest_Buffer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerNewROIRequest_Buffer& from) {
    ViewerControllerNewROIRequest_Buffer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerNewROIRequest_Buffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerNewROIRequest.Buffer";
  }
  protected:
  explicit ViewerControllerNewROIRequest_Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColumnsFieldNumber = 3,
  };
  // repeated bool buffer = 1;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;

  public:
  void clear_buffer() ;
  bool buffer(int index) const;
  void set_buffer(int index, bool value);
  void add_buffer(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>& buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>* mutable_buffer();

  private:
  bool _internal_buffer(int index) const;
  void _internal_add_buffer(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>& _internal_buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>* _internal_mutable_buffer();

  public:
  // int32 rows = 2;
  void clear_rows() ;
  ::int32_t rows() const;
  void set_rows(::int32_t value);

  private:
  ::int32_t _internal_rows() const;
  void _internal_set_rows(::int32_t value);

  public:
  // int32 columns = 3;
  void clear_columns() ;
  ::int32_t columns() const;
  void set_columns(::int32_t value);

  private:
  ::int32_t _internal_columns() const;
  void _internal_set_columns(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool> buffer_;
    ::int32_t rows_;
    ::int32_t columns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerNewROIRequest_Point2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerNewROIRequest.Point2D) */ {
 public:
  inline ViewerControllerNewROIRequest_Point2D() : ViewerControllerNewROIRequest_Point2D(nullptr) {}
  ~ViewerControllerNewROIRequest_Point2D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Point2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerNewROIRequest_Point2D(const ViewerControllerNewROIRequest_Point2D& from);
  ViewerControllerNewROIRequest_Point2D(ViewerControllerNewROIRequest_Point2D&& from) noexcept
    : ViewerControllerNewROIRequest_Point2D() {
    *this = ::std::move(from);
  }

  inline ViewerControllerNewROIRequest_Point2D& operator=(const ViewerControllerNewROIRequest_Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerNewROIRequest_Point2D& operator=(ViewerControllerNewROIRequest_Point2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerNewROIRequest_Point2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerNewROIRequest_Point2D* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerNewROIRequest_Point2D*>(
               &_ViewerControllerNewROIRequest_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ViewerControllerNewROIRequest_Point2D& a, ViewerControllerNewROIRequest_Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerNewROIRequest_Point2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerNewROIRequest_Point2D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerNewROIRequest_Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerNewROIRequest_Point2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerNewROIRequest_Point2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerNewROIRequest_Point2D& from) {
    ViewerControllerNewROIRequest_Point2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerNewROIRequest_Point2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerNewROIRequest.Point2D";
  }
  protected:
  explicit ViewerControllerNewROIRequest_Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerNewROIRequest_Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerNewROIRequest.Color) */ {
 public:
  inline ViewerControllerNewROIRequest_Color() : ViewerControllerNewROIRequest_Color(nullptr) {}
  ~ViewerControllerNewROIRequest_Color() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerNewROIRequest_Color(const ViewerControllerNewROIRequest_Color& from);
  ViewerControllerNewROIRequest_Color(ViewerControllerNewROIRequest_Color&& from) noexcept
    : ViewerControllerNewROIRequest_Color() {
    *this = ::std::move(from);
  }

  inline ViewerControllerNewROIRequest_Color& operator=(const ViewerControllerNewROIRequest_Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerNewROIRequest_Color& operator=(ViewerControllerNewROIRequest_Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerNewROIRequest_Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerNewROIRequest_Color* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerNewROIRequest_Color*>(
               &_ViewerControllerNewROIRequest_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ViewerControllerNewROIRequest_Color& a, ViewerControllerNewROIRequest_Color& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerNewROIRequest_Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerNewROIRequest_Color* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerNewROIRequest_Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerNewROIRequest_Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerNewROIRequest_Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerNewROIRequest_Color& from) {
    ViewerControllerNewROIRequest_Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerNewROIRequest_Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerNewROIRequest.Color";
  }
  protected:
  explicit ViewerControllerNewROIRequest_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // int32 r = 1;
  void clear_r() ;
  ::int32_t r() const;
  void set_r(::int32_t value);

  private:
  ::int32_t _internal_r() const;
  void _internal_set_r(::int32_t value);

  public:
  // int32 g = 2;
  void clear_g() ;
  ::int32_t g() const;
  void set_g(::int32_t value);

  private:
  ::int32_t _internal_g() const;
  void _internal_set_g(::int32_t value);

  public:
  // int32 b = 3;
  void clear_b() ;
  ::int32_t b() const;
  void set_b(::int32_t value);

  private:
  ::int32_t _internal_b() const;
  void _internal_set_b(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerNewROIRequest.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t r_;
    ::int32_t g_;
    ::int32_t b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerNewROIRequest_Rect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerNewROIRequest.Rect) */ {
 public:
  inline ViewerControllerNewROIRequest_Rect() : ViewerControllerNewROIRequest_Rect(nullptr) {}
  ~ViewerControllerNewROIRequest_Rect() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Rect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerNewROIRequest_Rect(const ViewerControllerNewROIRequest_Rect& from);
  ViewerControllerNewROIRequest_Rect(ViewerControllerNewROIRequest_Rect&& from) noexcept
    : ViewerControllerNewROIRequest_Rect() {
    *this = ::std::move(from);
  }

  inline ViewerControllerNewROIRequest_Rect& operator=(const ViewerControllerNewROIRequest_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerNewROIRequest_Rect& operator=(ViewerControllerNewROIRequest_Rect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerNewROIRequest_Rect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerNewROIRequest_Rect* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerNewROIRequest_Rect*>(
               &_ViewerControllerNewROIRequest_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ViewerControllerNewROIRequest_Rect& a, ViewerControllerNewROIRequest_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerNewROIRequest_Rect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerNewROIRequest_Rect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerNewROIRequest_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerNewROIRequest_Rect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerNewROIRequest_Rect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerNewROIRequest_Rect& from) {
    ViewerControllerNewROIRequest_Rect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerNewROIRequest_Rect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerNewROIRequest.Rect";
  }
  protected:
  explicit ViewerControllerNewROIRequest_Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginXFieldNumber = 1,
    kOriginYFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // float origin_x = 1;
  void clear_origin_x() ;
  float origin_x() const;
  void set_origin_x(float value);

  private:
  float _internal_origin_x() const;
  void _internal_set_origin_x(float value);

  public:
  // float origin_y = 2;
  void clear_origin_y() ;
  float origin_y() const;
  void set_origin_y(float value);

  private:
  float _internal_origin_y() const;
  void _internal_set_origin_y(float value);

  public:
  // float height = 3;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // float width = 4;
  void clear_width() ;
  float width() const;
  void set_width(float value);

  private:
  float _internal_width() const;
  void _internal_set_width(float value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerNewROIRequest.Rect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float origin_x_;
    float origin_y_;
    float height_;
    float width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerNewROIRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerNewROIRequest) */ {
 public:
  inline ViewerControllerNewROIRequest() : ViewerControllerNewROIRequest(nullptr) {}
  ~ViewerControllerNewROIRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerNewROIRequest(const ViewerControllerNewROIRequest& from);
  ViewerControllerNewROIRequest(ViewerControllerNewROIRequest&& from) noexcept
    : ViewerControllerNewROIRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerNewROIRequest& operator=(const ViewerControllerNewROIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerNewROIRequest& operator=(ViewerControllerNewROIRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerNewROIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerNewROIRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerNewROIRequest*>(
               &_ViewerControllerNewROIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ViewerControllerNewROIRequest& a, ViewerControllerNewROIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerNewROIRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerNewROIRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerNewROIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerNewROIRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerNewROIRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerNewROIRequest& from) {
    ViewerControllerNewROIRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerNewROIRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerNewROIRequest";
  }
  protected:
  explicit ViewerControllerNewROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ViewerControllerNewROIRequest_Buffer Buffer;
  typedef ViewerControllerNewROIRequest_Point2D Point2D;
  typedef ViewerControllerNewROIRequest_Color Color;
  typedef ViewerControllerNewROIRequest_Rect Rect;

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 12,
    kNameFieldNumber = 3,
    kViewerControllerFieldNumber = 1,
    kColorFieldNumber = 8,
    kBufferFieldNumber = 11,
    kRectangleFieldNumber = 13,
    kItypeFieldNumber = 2,
    kPositionFieldNumber = 4,
    kMovieIdxFieldNumber = 5,
    kBufferPositionXFieldNumber = 6,
    kBufferPositionYFieldNumber = 7,
    kThicknessFieldNumber = 9,
    kOpacityFieldNumber = 10,
  };
  // repeated .osirixgrpc.ViewerControllerNewROIRequest.Point2D points = 12;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D >*
      mutable_points();
  private:
  const ::osirixgrpc::ViewerControllerNewROIRequest_Point2D& _internal_points(int index) const;
  ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* _internal_add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerNewROIRequest_Point2D>& _internal_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerNewROIRequest_Point2D>* _internal_mutable_points();
  public:
  const ::osirixgrpc::ViewerControllerNewROIRequest_Point2D& points(int index) const;
  ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D >&
      points() const;
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // .osirixgrpc.ViewerControllerNewROIRequest.Color color = 8;
  bool has_color() const;
  void clear_color() ;
  const ::osirixgrpc::ViewerControllerNewROIRequest_Color& color() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerControllerNewROIRequest_Color* release_color();
  ::osirixgrpc::ViewerControllerNewROIRequest_Color* mutable_color();
  void set_allocated_color(::osirixgrpc::ViewerControllerNewROIRequest_Color* color);
  private:
  const ::osirixgrpc::ViewerControllerNewROIRequest_Color& _internal_color() const;
  ::osirixgrpc::ViewerControllerNewROIRequest_Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::osirixgrpc::ViewerControllerNewROIRequest_Color* color);
  ::osirixgrpc::ViewerControllerNewROIRequest_Color* unsafe_arena_release_color();
  // .osirixgrpc.ViewerControllerNewROIRequest.Buffer buffer = 11;
  bool has_buffer() const;
  void clear_buffer() ;
  const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer& buffer() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* release_buffer();
  ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* mutable_buffer();
  void set_allocated_buffer(::osirixgrpc::ViewerControllerNewROIRequest_Buffer* buffer);
  private:
  const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer& _internal_buffer() const;
  ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* _internal_mutable_buffer();
  public:
  void unsafe_arena_set_allocated_buffer(
      ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* buffer);
  ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* unsafe_arena_release_buffer();
  // .osirixgrpc.ViewerControllerNewROIRequest.Rect rectangle = 13;
  bool has_rectangle() const;
  void clear_rectangle() ;
  const ::osirixgrpc::ViewerControllerNewROIRequest_Rect& rectangle() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerControllerNewROIRequest_Rect* release_rectangle();
  ::osirixgrpc::ViewerControllerNewROIRequest_Rect* mutable_rectangle();
  void set_allocated_rectangle(::osirixgrpc::ViewerControllerNewROIRequest_Rect* rectangle);
  private:
  const ::osirixgrpc::ViewerControllerNewROIRequest_Rect& _internal_rectangle() const;
  ::osirixgrpc::ViewerControllerNewROIRequest_Rect* _internal_mutable_rectangle();
  public:
  void unsafe_arena_set_allocated_rectangle(
      ::osirixgrpc::ViewerControllerNewROIRequest_Rect* rectangle);
  ::osirixgrpc::ViewerControllerNewROIRequest_Rect* unsafe_arena_release_rectangle();
  // int32 itype = 2;
  void clear_itype() ;
  ::int32_t itype() const;
  void set_itype(::int32_t value);

  private:
  ::int32_t _internal_itype() const;
  void _internal_set_itype(::int32_t value);

  public:
  // int32 position = 4;
  void clear_position() ;
  ::int32_t position() const;
  void set_position(::int32_t value);

  private:
  ::int32_t _internal_position() const;
  void _internal_set_position(::int32_t value);

  public:
  // int32 movie_idx = 5;
  void clear_movie_idx() ;
  ::int32_t movie_idx() const;
  void set_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_movie_idx() const;
  void _internal_set_movie_idx(::int32_t value);

  public:
  // int32 buffer_position_x = 6;
  void clear_buffer_position_x() ;
  ::int32_t buffer_position_x() const;
  void set_buffer_position_x(::int32_t value);

  private:
  ::int32_t _internal_buffer_position_x() const;
  void _internal_set_buffer_position_x(::int32_t value);

  public:
  // int32 buffer_position_y = 7;
  void clear_buffer_position_y() ;
  ::int32_t buffer_position_y() const;
  void set_buffer_position_y(::int32_t value);

  private:
  ::int32_t _internal_buffer_position_y() const;
  void _internal_set_buffer_position_y(::int32_t value);

  public:
  // float thickness = 9;
  void clear_thickness() ;
  float thickness() const;
  void set_thickness(float value);

  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);

  public:
  // float opacity = 10;
  void clear_opacity() ;
  float opacity() const;
  void set_opacity(float value);

  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerNewROIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D > points_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::osirixgrpc::ViewerControllerNewROIRequest_Color* color_;
    ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* buffer_;
    ::osirixgrpc::ViewerControllerNewROIRequest_Rect* rectangle_;
    ::int32_t itype_;
    ::int32_t position_;
    ::int32_t movie_idx_;
    ::int32_t buffer_position_x_;
    ::int32_t buffer_position_y_;
    float thickness_;
    float opacity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerROIsWithNameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerROIsWithNameRequest) */ {
 public:
  inline ViewerControllerROIsWithNameRequest() : ViewerControllerROIsWithNameRequest(nullptr) {}
  ~ViewerControllerROIsWithNameRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerROIsWithNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerROIsWithNameRequest(const ViewerControllerROIsWithNameRequest& from);
  ViewerControllerROIsWithNameRequest(ViewerControllerROIsWithNameRequest&& from) noexcept
    : ViewerControllerROIsWithNameRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerROIsWithNameRequest& operator=(const ViewerControllerROIsWithNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerROIsWithNameRequest& operator=(ViewerControllerROIsWithNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerROIsWithNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerROIsWithNameRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerROIsWithNameRequest*>(
               &_ViewerControllerROIsWithNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ViewerControllerROIsWithNameRequest& a, ViewerControllerROIsWithNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerROIsWithNameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerROIsWithNameRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerROIsWithNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerROIsWithNameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerROIsWithNameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerROIsWithNameRequest& from) {
    ViewerControllerROIsWithNameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerROIsWithNameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerROIsWithNameRequest";
  }
  protected:
  explicit ViewerControllerROIsWithNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kViewerControllerFieldNumber = 1,
    kMovieIdxFieldNumber = 3,
    kIn4DFieldNumber = 4,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // int32 movie_idx = 3;
  void clear_movie_idx() ;
  ::int32_t movie_idx() const;
  void set_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_movie_idx() const;
  void _internal_set_movie_idx(::int32_t value);

  public:
  // bool in_4d = 4;
  void clear_in_4d() ;
  bool in_4d() const;
  void set_in_4d(bool value);

  private:
  bool _internal_in_4d() const;
  void _internal_set_in_4d(bool value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerROIsWithNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::int32_t movie_idx_;
    bool in_4d_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerResampleViewerControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerResampleViewerControllerRequest) */ {
 public:
  inline ViewerControllerResampleViewerControllerRequest() : ViewerControllerResampleViewerControllerRequest(nullptr) {}
  ~ViewerControllerResampleViewerControllerRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerResampleViewerControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerResampleViewerControllerRequest(const ViewerControllerResampleViewerControllerRequest& from);
  ViewerControllerResampleViewerControllerRequest(ViewerControllerResampleViewerControllerRequest&& from) noexcept
    : ViewerControllerResampleViewerControllerRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerResampleViewerControllerRequest& operator=(const ViewerControllerResampleViewerControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerResampleViewerControllerRequest& operator=(ViewerControllerResampleViewerControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerResampleViewerControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerResampleViewerControllerRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerResampleViewerControllerRequest*>(
               &_ViewerControllerResampleViewerControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ViewerControllerResampleViewerControllerRequest& a, ViewerControllerResampleViewerControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerResampleViewerControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerResampleViewerControllerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerResampleViewerControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerResampleViewerControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerResampleViewerControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerResampleViewerControllerRequest& from) {
    ViewerControllerResampleViewerControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerResampleViewerControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerResampleViewerControllerRequest";
  }
  protected:
  explicit ViewerControllerResampleViewerControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kFixedViewerControllerFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // .osirixgrpc.ViewerController fixed_viewer_controller = 2;
  bool has_fixed_viewer_controller() const;
  void clear_fixed_viewer_controller() ;
  const ::osirixgrpc::ViewerController& fixed_viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_fixed_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_fixed_viewer_controller();
  void set_allocated_fixed_viewer_controller(::osirixgrpc::ViewerController* fixed_viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_fixed_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_fixed_viewer_controller();
  public:
  void unsafe_arena_set_allocated_fixed_viewer_controller(
      ::osirixgrpc::ViewerController* fixed_viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_fixed_viewer_controller();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::osirixgrpc::ViewerController* fixed_viewer_controller_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerCopyViewerWindowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerCopyViewerWindowRequest) */ {
 public:
  inline ViewerControllerCopyViewerWindowRequest() : ViewerControllerCopyViewerWindowRequest(nullptr) {}
  ~ViewerControllerCopyViewerWindowRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerCopyViewerWindowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerCopyViewerWindowRequest(const ViewerControllerCopyViewerWindowRequest& from);
  ViewerControllerCopyViewerWindowRequest(ViewerControllerCopyViewerWindowRequest&& from) noexcept
    : ViewerControllerCopyViewerWindowRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerCopyViewerWindowRequest& operator=(const ViewerControllerCopyViewerWindowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerCopyViewerWindowRequest& operator=(ViewerControllerCopyViewerWindowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerCopyViewerWindowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerCopyViewerWindowRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerCopyViewerWindowRequest*>(
               &_ViewerControllerCopyViewerWindowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ViewerControllerCopyViewerWindowRequest& a, ViewerControllerCopyViewerWindowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerCopyViewerWindowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerCopyViewerWindowRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerCopyViewerWindowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerCopyViewerWindowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerCopyViewerWindowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerCopyViewerWindowRequest& from) {
    ViewerControllerCopyViewerWindowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerCopyViewerWindowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerCopyViewerWindowRequest";
  }
  protected:
  explicit ViewerControllerCopyViewerWindowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kIn4DFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // bool in_4d = 2;
  void clear_in_4d() ;
  bool in_4d() const;
  void set_in_4d(bool value);

  private:
  bool _internal_in_4d() const;
  void _internal_set_in_4d(bool value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    bool in_4d_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerSetMovieIdxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerSetMovieIdxRequest) */ {
 public:
  inline ViewerControllerSetMovieIdxRequest() : ViewerControllerSetMovieIdxRequest(nullptr) {}
  ~ViewerControllerSetMovieIdxRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerSetMovieIdxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerSetMovieIdxRequest(const ViewerControllerSetMovieIdxRequest& from);
  ViewerControllerSetMovieIdxRequest(ViewerControllerSetMovieIdxRequest&& from) noexcept
    : ViewerControllerSetMovieIdxRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerSetMovieIdxRequest& operator=(const ViewerControllerSetMovieIdxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerSetMovieIdxRequest& operator=(ViewerControllerSetMovieIdxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerSetMovieIdxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerSetMovieIdxRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerSetMovieIdxRequest*>(
               &_ViewerControllerSetMovieIdxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ViewerControllerSetMovieIdxRequest& a, ViewerControllerSetMovieIdxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerSetMovieIdxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerSetMovieIdxRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerSetMovieIdxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerSetMovieIdxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerSetMovieIdxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerSetMovieIdxRequest& from) {
    ViewerControllerSetMovieIdxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerSetMovieIdxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerSetMovieIdxRequest";
  }
  protected:
  explicit ViewerControllerSetMovieIdxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kMovieIdxFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // int32 movie_idx = 2;
  void clear_movie_idx() ;
  ::int32_t movie_idx() const;
  void set_movie_idx(::int32_t value);

  private:
  ::int32_t _internal_movie_idx() const;
  void _internal_set_movie_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerSetMovieIdxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::int32_t movie_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerIsDataVolumicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerIsDataVolumicRequest) */ {
 public:
  inline ViewerControllerIsDataVolumicRequest() : ViewerControllerIsDataVolumicRequest(nullptr) {}
  ~ViewerControllerIsDataVolumicRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerIsDataVolumicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerIsDataVolumicRequest(const ViewerControllerIsDataVolumicRequest& from);
  ViewerControllerIsDataVolumicRequest(ViewerControllerIsDataVolumicRequest&& from) noexcept
    : ViewerControllerIsDataVolumicRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerIsDataVolumicRequest& operator=(const ViewerControllerIsDataVolumicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerIsDataVolumicRequest& operator=(ViewerControllerIsDataVolumicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerIsDataVolumicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerIsDataVolumicRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerIsDataVolumicRequest*>(
               &_ViewerControllerIsDataVolumicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ViewerControllerIsDataVolumicRequest& a, ViewerControllerIsDataVolumicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerIsDataVolumicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerIsDataVolumicRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerIsDataVolumicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerIsDataVolumicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerIsDataVolumicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerIsDataVolumicRequest& from) {
    ViewerControllerIsDataVolumicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerIsDataVolumicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerIsDataVolumicRequest";
  }
  protected:
  explicit ViewerControllerIsDataVolumicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kIn4DFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // bool in_4d = 2;
  void clear_in_4d() ;
  bool in_4d() const;
  void set_in_4d(bool value);

  private:
  bool _internal_in_4d() const;
  void _internal_set_in_4d(bool value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerIsDataVolumicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    bool in_4d_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerSetIdxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerSetIdxRequest) */ {
 public:
  inline ViewerControllerSetIdxRequest() : ViewerControllerSetIdxRequest(nullptr) {}
  ~ViewerControllerSetIdxRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerSetIdxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerSetIdxRequest(const ViewerControllerSetIdxRequest& from);
  ViewerControllerSetIdxRequest(ViewerControllerSetIdxRequest&& from) noexcept
    : ViewerControllerSetIdxRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerSetIdxRequest& operator=(const ViewerControllerSetIdxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerSetIdxRequest& operator=(ViewerControllerSetIdxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerSetIdxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerSetIdxRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerSetIdxRequest*>(
               &_ViewerControllerSetIdxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ViewerControllerSetIdxRequest& a, ViewerControllerSetIdxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerSetIdxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerSetIdxRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerSetIdxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerSetIdxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerSetIdxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerSetIdxRequest& from) {
    ViewerControllerSetIdxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerSetIdxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerSetIdxRequest";
  }
  protected:
  explicit ViewerControllerSetIdxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kIdxFieldNumber = 2,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // int32 idx = 2;
  void clear_idx() ;
  ::int32_t idx() const;
  void set_idx(::int32_t value);

  private:
  ::int32_t _internal_idx() const;
  void _internal_set_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerSetIdxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    ::int32_t idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerSetWLWWRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerSetWLWWRequest) */ {
 public:
  inline ViewerControllerSetWLWWRequest() : ViewerControllerSetWLWWRequest(nullptr) {}
  ~ViewerControllerSetWLWWRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerSetWLWWRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerSetWLWWRequest(const ViewerControllerSetWLWWRequest& from);
  ViewerControllerSetWLWWRequest(ViewerControllerSetWLWWRequest&& from) noexcept
    : ViewerControllerSetWLWWRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerSetWLWWRequest& operator=(const ViewerControllerSetWLWWRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerSetWLWWRequest& operator=(ViewerControllerSetWLWWRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerSetWLWWRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerSetWLWWRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerSetWLWWRequest*>(
               &_ViewerControllerSetWLWWRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ViewerControllerSetWLWWRequest& a, ViewerControllerSetWLWWRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerSetWLWWRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerSetWLWWRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerSetWLWWRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerSetWLWWRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerSetWLWWRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerSetWLWWRequest& from) {
    ViewerControllerSetWLWWRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerSetWLWWRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerSetWLWWRequest";
  }
  protected:
  explicit ViewerControllerSetWLWWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllerFieldNumber = 1,
    kWlFieldNumber = 2,
    kWwFieldNumber = 3,
  };
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // float wl = 2;
  void clear_wl() ;
  float wl() const;
  void set_wl(float value);

  private:
  float _internal_wl() const;
  void _internal_set_wl(float value);

  public:
  // float ww = 3;
  void clear_ww() ;
  float ww() const;
  void set_ww(float value);

  private:
  float _internal_ww() const;
  void _internal_set_ww(float value);

  public:
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerSetWLWWRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osirixgrpc::ViewerController* viewer_controller_;
    float wl_;
    float ww_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};// -------------------------------------------------------------------

class ViewerControllerOpenVRViewerForModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest) */ {
 public:
  inline ViewerControllerOpenVRViewerForModeRequest() : ViewerControllerOpenVRViewerForModeRequest(nullptr) {}
  ~ViewerControllerOpenVRViewerForModeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViewerControllerOpenVRViewerForModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewerControllerOpenVRViewerForModeRequest(const ViewerControllerOpenVRViewerForModeRequest& from);
  ViewerControllerOpenVRViewerForModeRequest(ViewerControllerOpenVRViewerForModeRequest&& from) noexcept
    : ViewerControllerOpenVRViewerForModeRequest() {
    *this = ::std::move(from);
  }

  inline ViewerControllerOpenVRViewerForModeRequest& operator=(const ViewerControllerOpenVRViewerForModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerControllerOpenVRViewerForModeRequest& operator=(ViewerControllerOpenVRViewerForModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewerControllerOpenVRViewerForModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewerControllerOpenVRViewerForModeRequest* internal_default_instance() {
    return reinterpret_cast<const ViewerControllerOpenVRViewerForModeRequest*>(
               &_ViewerControllerOpenVRViewerForModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ViewerControllerOpenVRViewerForModeRequest& a, ViewerControllerOpenVRViewerForModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerControllerOpenVRViewerForModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerControllerOpenVRViewerForModeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewerControllerOpenVRViewerForModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewerControllerOpenVRViewerForModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewerControllerOpenVRViewerForModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewerControllerOpenVRViewerForModeRequest& from) {
    ViewerControllerOpenVRViewerForModeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerControllerOpenVRViewerForModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "osirixgrpc.ViewerControllerOpenVRViewerForModeRequest";
  }
  protected:
  explicit ViewerControllerOpenVRViewerForModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 2,
    kViewerControllerFieldNumber = 1,
  };
  // string mode = 2;
  void clear_mode() ;
  const std::string& mode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mode(Arg_&& arg, Args_... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* ptr);

  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(
      const std::string& value);
  std::string* _internal_mutable_mode();

  public:
  // .osirixgrpc.ViewerController viewer_controller = 1;
  bool has_viewer_controller() const;
  void clear_viewer_controller() ;
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  PROTOBUF_NODISCARD ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();
  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
    ::osirixgrpc::ViewerController* viewer_controller_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_viewercontroller_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ViewerControllerPixListResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerPixListResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerPixListResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerPixListResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerPixListResponse.status)
  return _internal_status();
}
inline void ViewerControllerPixListResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerPixListResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerPixListResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerPixListResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerPixListResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerPixListResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerPixListResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerPixListResponse.status)
  return _msg;
}
inline void ViewerControllerPixListResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerPixListResponse.status)
}

// repeated .osirixgrpc.DCMPix pix = 2;
inline int ViewerControllerPixListResponse::_internal_pix_size() const {
  return _impl_.pix_.size();
}
inline int ViewerControllerPixListResponse::pix_size() const {
  return _internal_pix_size();
}
inline ::osirixgrpc::DCMPix* ViewerControllerPixListResponse::mutable_pix(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerPixListResponse.pix)
  return _internal_mutable_pix()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::DCMPix >*
ViewerControllerPixListResponse::mutable_pix() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerPixListResponse.pix)
  return _internal_mutable_pix();
}
inline const ::osirixgrpc::DCMPix& ViewerControllerPixListResponse::_internal_pix(int index) const {
  return _internal_pix().Get(index);
}
inline const ::osirixgrpc::DCMPix& ViewerControllerPixListResponse::pix(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerPixListResponse.pix)
  return _internal_pix(index);
}
inline ::osirixgrpc::DCMPix* ViewerControllerPixListResponse::_internal_add_pix() {
  return _internal_mutable_pix()->Add();
}
inline ::osirixgrpc::DCMPix* ViewerControllerPixListResponse::add_pix() {
  ::osirixgrpc::DCMPix* _add = _internal_add_pix();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerPixListResponse.pix)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::DCMPix >&
ViewerControllerPixListResponse::pix() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerPixListResponse.pix)
  return _internal_pix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::DCMPix>&
ViewerControllerPixListResponse::_internal_pix() const {
  return _impl_.pix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::DCMPix>*
ViewerControllerPixListResponse::_internal_mutable_pix() {
  return &_impl_.pix_;
}

// -------------------------------------------------------------------

// ViewerControllerROIListResponse_ROISlice

// repeated .osirixgrpc.ROI rois = 1;
inline int ViewerControllerROIListResponse_ROISlice::_internal_rois_size() const {
  return _impl_.rois_.size();
}
inline int ViewerControllerROIListResponse_ROISlice::rois_size() const {
  return _internal_rois_size();
}
inline ::osirixgrpc::ROI* ViewerControllerROIListResponse_ROISlice::mutable_rois(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIListResponse.ROISlice.rois)
  return _internal_mutable_rois()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >*
ViewerControllerROIListResponse_ROISlice::mutable_rois() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerROIListResponse.ROISlice.rois)
  return _internal_mutable_rois();
}
inline const ::osirixgrpc::ROI& ViewerControllerROIListResponse_ROISlice::_internal_rois(int index) const {
  return _internal_rois().Get(index);
}
inline const ::osirixgrpc::ROI& ViewerControllerROIListResponse_ROISlice::rois(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIListResponse.ROISlice.rois)
  return _internal_rois(index);
}
inline ::osirixgrpc::ROI* ViewerControllerROIListResponse_ROISlice::_internal_add_rois() {
  return _internal_mutable_rois()->Add();
}
inline ::osirixgrpc::ROI* ViewerControllerROIListResponse_ROISlice::add_rois() {
  ::osirixgrpc::ROI* _add = _internal_add_rois();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerROIListResponse.ROISlice.rois)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >&
ViewerControllerROIListResponse_ROISlice::rois() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerROIListResponse.ROISlice.rois)
  return _internal_rois();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>&
ViewerControllerROIListResponse_ROISlice::_internal_rois() const {
  return _impl_.rois_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>*
ViewerControllerROIListResponse_ROISlice::_internal_mutable_rois() {
  return &_impl_.rois_;
}

// -------------------------------------------------------------------

// ViewerControllerROIListResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerROIListResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerROIListResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerROIListResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIListResponse.status)
  return _internal_status();
}
inline void ViewerControllerROIListResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerROIListResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerROIListResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerROIListResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerROIListResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerROIListResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerROIListResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIListResponse.status)
  return _msg;
}
inline void ViewerControllerROIListResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerROIListResponse.status)
}

// repeated .osirixgrpc.ViewerControllerROIListResponse.ROISlice roi_slices = 2;
inline int ViewerControllerROIListResponse::_internal_roi_slices_size() const {
  return _impl_.roi_slices_.size();
}
inline int ViewerControllerROIListResponse::roi_slices_size() const {
  return _internal_roi_slices_size();
}
inline void ViewerControllerROIListResponse::clear_roi_slices() {
  _internal_mutable_roi_slices()->Clear();
}
inline ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* ViewerControllerROIListResponse::mutable_roi_slices(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIListResponse.roi_slices)
  return _internal_mutable_roi_slices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice >*
ViewerControllerROIListResponse::mutable_roi_slices() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerROIListResponse.roi_slices)
  return _internal_mutable_roi_slices();
}
inline const ::osirixgrpc::ViewerControllerROIListResponse_ROISlice& ViewerControllerROIListResponse::_internal_roi_slices(int index) const {
  return _internal_roi_slices().Get(index);
}
inline const ::osirixgrpc::ViewerControllerROIListResponse_ROISlice& ViewerControllerROIListResponse::roi_slices(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIListResponse.roi_slices)
  return _internal_roi_slices(index);
}
inline ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* ViewerControllerROIListResponse::_internal_add_roi_slices() {
  return _internal_mutable_roi_slices()->Add();
}
inline ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* ViewerControllerROIListResponse::add_roi_slices() {
  ::osirixgrpc::ViewerControllerROIListResponse_ROISlice* _add = _internal_add_roi_slices();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerROIListResponse.roi_slices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice >&
ViewerControllerROIListResponse::roi_slices() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerROIListResponse.roi_slices)
  return _internal_roi_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerROIListResponse_ROISlice>&
ViewerControllerROIListResponse::_internal_roi_slices() const {
  return _impl_.roi_slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerROIListResponse_ROISlice>*
ViewerControllerROIListResponse::_internal_mutable_roi_slices() {
  return &_impl_.roi_slices_;
}

// -------------------------------------------------------------------

// ViewerControllerNewROIResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerNewROIResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerNewROIResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerNewROIResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIResponse.status)
  return _internal_status();
}
inline void ViewerControllerNewROIResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerNewROIResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerNewROIResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerNewROIResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerNewROIResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerNewROIResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIResponse.status)
  return _msg;
}
inline void ViewerControllerNewROIResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIResponse.status)
}

// .osirixgrpc.ROI roi = 2;
inline bool ViewerControllerNewROIResponse::has_roi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roi_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ROI& ViewerControllerNewROIResponse::_internal_roi() const {
  const ::osirixgrpc::ROI* p = _impl_.roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ROI&>(
      ::osirixgrpc::_ROI_default_instance_);
}
inline const ::osirixgrpc::ROI& ViewerControllerNewROIResponse::roi() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIResponse.roi)
  return _internal_roi();
}
inline void ViewerControllerNewROIResponse::unsafe_arena_set_allocated_roi(
    ::osirixgrpc::ROI* roi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_);
  }
  _impl_.roi_ = roi;
  if (roi) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerNewROIResponse.roi)
}
inline ::osirixgrpc::ROI* ViewerControllerNewROIResponse::release_roi() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ROI* temp = _impl_.roi_;
  _impl_.roi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ROI* ViewerControllerNewROIResponse::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIResponse.roi)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ROI* temp = _impl_.roi_;
  _impl_.roi_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ROI* ViewerControllerNewROIResponse::_internal_mutable_roi() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ROI>(GetArenaForAllocation());
    _impl_.roi_ = p;
  }
  return _impl_.roi_;
}
inline ::osirixgrpc::ROI* ViewerControllerNewROIResponse::mutable_roi() {
  ::osirixgrpc::ROI* _msg = _internal_mutable_roi();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIResponse.roi)
  return _msg;
}
inline void ViewerControllerNewROIResponse::set_allocated_roi(::osirixgrpc::ROI* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_);
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi));
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIResponse.roi)
}

// -------------------------------------------------------------------

// ViewerControllerCurDCMResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerCurDCMResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerCurDCMResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerCurDCMResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerCurDCMResponse.status)
  return _internal_status();
}
inline void ViewerControllerCurDCMResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerCurDCMResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerCurDCMResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerCurDCMResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerCurDCMResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerCurDCMResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerCurDCMResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerCurDCMResponse.status)
  return _msg;
}
inline void ViewerControllerCurDCMResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerCurDCMResponse.status)
}

// .osirixgrpc.DCMPix pix = 2;
inline bool ViewerControllerCurDCMResponse::has_pix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pix_ != nullptr);
  return value;
}
inline const ::osirixgrpc::DCMPix& ViewerControllerCurDCMResponse::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = _impl_.pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& ViewerControllerCurDCMResponse::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerCurDCMResponse.pix)
  return _internal_pix();
}
inline void ViewerControllerCurDCMResponse::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pix_);
  }
  _impl_.pix_ = pix;
  if (pix) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerCurDCMResponse.pix)
}
inline ::osirixgrpc::DCMPix* ViewerControllerCurDCMResponse::release_pix() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::DCMPix* temp = _impl_.pix_;
  _impl_.pix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::DCMPix* ViewerControllerCurDCMResponse::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerCurDCMResponse.pix)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::DCMPix* temp = _impl_.pix_;
  _impl_.pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* ViewerControllerCurDCMResponse::_internal_mutable_pix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArenaForAllocation());
    _impl_.pix_ = p;
  }
  return _impl_.pix_;
}
inline ::osirixgrpc::DCMPix* ViewerControllerCurDCMResponse::mutable_pix() {
  ::osirixgrpc::DCMPix* _msg = _internal_mutable_pix();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerCurDCMResponse.pix)
  return _msg;
}
inline void ViewerControllerCurDCMResponse::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix));
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerCurDCMResponse.pix)
}

// -------------------------------------------------------------------

// ViewerControllerROIsWithNameResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerROIsWithNameResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerROIsWithNameResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerROIsWithNameResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIsWithNameResponse.status)
  return _internal_status();
}
inline void ViewerControllerROIsWithNameResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerROIsWithNameResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerROIsWithNameResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerROIsWithNameResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerROIsWithNameResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerROIsWithNameResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerROIsWithNameResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIsWithNameResponse.status)
  return _msg;
}
inline void ViewerControllerROIsWithNameResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerROIsWithNameResponse.status)
}

// repeated .osirixgrpc.ROI rois = 2;
inline int ViewerControllerROIsWithNameResponse::_internal_rois_size() const {
  return _impl_.rois_.size();
}
inline int ViewerControllerROIsWithNameResponse::rois_size() const {
  return _internal_rois_size();
}
inline ::osirixgrpc::ROI* ViewerControllerROIsWithNameResponse::mutable_rois(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIsWithNameResponse.rois)
  return _internal_mutable_rois()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >*
ViewerControllerROIsWithNameResponse::mutable_rois() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerROIsWithNameResponse.rois)
  return _internal_mutable_rois();
}
inline const ::osirixgrpc::ROI& ViewerControllerROIsWithNameResponse::_internal_rois(int index) const {
  return _internal_rois().Get(index);
}
inline const ::osirixgrpc::ROI& ViewerControllerROIsWithNameResponse::rois(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIsWithNameResponse.rois)
  return _internal_rois(index);
}
inline ::osirixgrpc::ROI* ViewerControllerROIsWithNameResponse::_internal_add_rois() {
  return _internal_mutable_rois()->Add();
}
inline ::osirixgrpc::ROI* ViewerControllerROIsWithNameResponse::add_rois() {
  ::osirixgrpc::ROI* _add = _internal_add_rois();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerROIsWithNameResponse.rois)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >&
ViewerControllerROIsWithNameResponse::rois() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerROIsWithNameResponse.rois)
  return _internal_rois();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>&
ViewerControllerROIsWithNameResponse::_internal_rois() const {
  return _impl_.rois_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>*
ViewerControllerROIsWithNameResponse::_internal_mutable_rois() {
  return &_impl_.rois_;
}

// -------------------------------------------------------------------

// ViewerControllerSelectedROIsResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerSelectedROIsResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerSelectedROIsResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerSelectedROIsResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSelectedROIsResponse.status)
  return _internal_status();
}
inline void ViewerControllerSelectedROIsResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerSelectedROIsResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerSelectedROIsResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerSelectedROIsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerSelectedROIsResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerSelectedROIsResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerSelectedROIsResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerSelectedROIsResponse.status)
  return _msg;
}
inline void ViewerControllerSelectedROIsResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerSelectedROIsResponse.status)
}

// repeated .osirixgrpc.ROI rois = 2;
inline int ViewerControllerSelectedROIsResponse::_internal_rois_size() const {
  return _impl_.rois_.size();
}
inline int ViewerControllerSelectedROIsResponse::rois_size() const {
  return _internal_rois_size();
}
inline ::osirixgrpc::ROI* ViewerControllerSelectedROIsResponse::mutable_rois(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerSelectedROIsResponse.rois)
  return _internal_mutable_rois()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >*
ViewerControllerSelectedROIsResponse::mutable_rois() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerSelectedROIsResponse.rois)
  return _internal_mutable_rois();
}
inline const ::osirixgrpc::ROI& ViewerControllerSelectedROIsResponse::_internal_rois(int index) const {
  return _internal_rois().Get(index);
}
inline const ::osirixgrpc::ROI& ViewerControllerSelectedROIsResponse::rois(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSelectedROIsResponse.rois)
  return _internal_rois(index);
}
inline ::osirixgrpc::ROI* ViewerControllerSelectedROIsResponse::_internal_add_rois() {
  return _internal_mutable_rois()->Add();
}
inline ::osirixgrpc::ROI* ViewerControllerSelectedROIsResponse::add_rois() {
  ::osirixgrpc::ROI* _add = _internal_add_rois();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerSelectedROIsResponse.rois)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROI >&
ViewerControllerSelectedROIsResponse::rois() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerSelectedROIsResponse.rois)
  return _internal_rois();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>&
ViewerControllerSelectedROIsResponse::_internal_rois() const {
  return _impl_.rois_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ROI>*
ViewerControllerSelectedROIsResponse::_internal_mutable_rois() {
  return &_impl_.rois_;
}

// -------------------------------------------------------------------

// ViewerControllerIsDataVolumicResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerIsDataVolumicResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerIsDataVolumicResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerIsDataVolumicResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerIsDataVolumicResponse.status)
  return _internal_status();
}
inline void ViewerControllerIsDataVolumicResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerIsDataVolumicResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerIsDataVolumicResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerIsDataVolumicResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerIsDataVolumicResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerIsDataVolumicResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerIsDataVolumicResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerIsDataVolumicResponse.status)
  return _msg;
}
inline void ViewerControllerIsDataVolumicResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerIsDataVolumicResponse.status)
}

// bool is_volumic = 2;
inline void ViewerControllerIsDataVolumicResponse::clear_is_volumic() {
  _impl_.is_volumic_ = false;
}
inline bool ViewerControllerIsDataVolumicResponse::is_volumic() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerIsDataVolumicResponse.is_volumic)
  return _internal_is_volumic();
}
inline void ViewerControllerIsDataVolumicResponse::set_is_volumic(bool value) {
  _internal_set_is_volumic(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerIsDataVolumicResponse.is_volumic)
}
inline bool ViewerControllerIsDataVolumicResponse::_internal_is_volumic() const {
  return _impl_.is_volumic_;
}
inline void ViewerControllerIsDataVolumicResponse::_internal_set_is_volumic(bool value) {
  ;
  _impl_.is_volumic_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerBlendingControllerResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerBlendingControllerResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerBlendingControllerResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerBlendingControllerResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerBlendingControllerResponse.status)
  return _internal_status();
}
inline void ViewerControllerBlendingControllerResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerBlendingControllerResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerBlendingControllerResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerBlendingControllerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerBlendingControllerResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerBlendingControllerResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerBlendingControllerResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerBlendingControllerResponse.status)
  return _msg;
}
inline void ViewerControllerBlendingControllerResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerBlendingControllerResponse.status)
}

// .osirixgrpc.ViewerController blending_viewer = 2;
inline bool ViewerControllerBlendingControllerResponse::has_blending_viewer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_viewer_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerBlendingControllerResponse::_internal_blending_viewer() const {
  const ::osirixgrpc::ViewerController* p = _impl_.blending_viewer_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerBlendingControllerResponse::blending_viewer() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerBlendingControllerResponse.blending_viewer)
  return _internal_blending_viewer();
}
inline void ViewerControllerBlendingControllerResponse::unsafe_arena_set_allocated_blending_viewer(
    ::osirixgrpc::ViewerController* blending_viewer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blending_viewer_);
  }
  _impl_.blending_viewer_ = blending_viewer;
  if (blending_viewer) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerBlendingControllerResponse.blending_viewer)
}
inline ::osirixgrpc::ViewerController* ViewerControllerBlendingControllerResponse::release_blending_viewer() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ViewerController* temp = _impl_.blending_viewer_;
  _impl_.blending_viewer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerBlendingControllerResponse::unsafe_arena_release_blending_viewer() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerBlendingControllerResponse.blending_viewer)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ViewerController* temp = _impl_.blending_viewer_;
  _impl_.blending_viewer_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerBlendingControllerResponse::_internal_mutable_blending_viewer() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_viewer_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.blending_viewer_ = p;
  }
  return _impl_.blending_viewer_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerBlendingControllerResponse::mutable_blending_viewer() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_blending_viewer();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerBlendingControllerResponse.blending_viewer)
  return _msg;
}
inline void ViewerControllerBlendingControllerResponse::set_allocated_blending_viewer(::osirixgrpc::ViewerController* blending_viewer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blending_viewer_);
  }
  if (blending_viewer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blending_viewer));
    if (message_arena != submessage_arena) {
      blending_viewer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending_viewer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.blending_viewer_ = blending_viewer;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerBlendingControllerResponse.blending_viewer)
}

// -------------------------------------------------------------------

// ViewerControllerVRControllersResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerVRControllersResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerVRControllersResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerVRControllersResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerVRControllersResponse.status)
  return _internal_status();
}
inline void ViewerControllerVRControllersResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerVRControllersResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerVRControllersResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerVRControllersResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerVRControllersResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerVRControllersResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerVRControllersResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerVRControllersResponse.status)
  return _msg;
}
inline void ViewerControllerVRControllersResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerVRControllersResponse.status)
}

// repeated .osirixgrpc.VRController vr_controllers = 2;
inline int ViewerControllerVRControllersResponse::_internal_vr_controllers_size() const {
  return _impl_.vr_controllers_.size();
}
inline int ViewerControllerVRControllersResponse::vr_controllers_size() const {
  return _internal_vr_controllers_size();
}
inline ::osirixgrpc::VRController* ViewerControllerVRControllersResponse::mutable_vr_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerVRControllersResponse.vr_controllers)
  return _internal_mutable_vr_controllers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >*
ViewerControllerVRControllersResponse::mutable_vr_controllers() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerVRControllersResponse.vr_controllers)
  return _internal_mutable_vr_controllers();
}
inline const ::osirixgrpc::VRController& ViewerControllerVRControllersResponse::_internal_vr_controllers(int index) const {
  return _internal_vr_controllers().Get(index);
}
inline const ::osirixgrpc::VRController& ViewerControllerVRControllersResponse::vr_controllers(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerVRControllersResponse.vr_controllers)
  return _internal_vr_controllers(index);
}
inline ::osirixgrpc::VRController* ViewerControllerVRControllersResponse::_internal_add_vr_controllers() {
  return _internal_mutable_vr_controllers()->Add();
}
inline ::osirixgrpc::VRController* ViewerControllerVRControllersResponse::add_vr_controllers() {
  ::osirixgrpc::VRController* _add = _internal_add_vr_controllers();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerVRControllersResponse.vr_controllers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >&
ViewerControllerVRControllersResponse::vr_controllers() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerVRControllersResponse.vr_controllers)
  return _internal_vr_controllers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::VRController>&
ViewerControllerVRControllersResponse::_internal_vr_controllers() const {
  return _impl_.vr_controllers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::VRController>*
ViewerControllerVRControllersResponse::_internal_mutable_vr_controllers() {
  return &_impl_.vr_controllers_;
}

// -------------------------------------------------------------------

// ViewerControllerTitleResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerTitleResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerTitleResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerTitleResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerTitleResponse.status)
  return _internal_status();
}
inline void ViewerControllerTitleResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerTitleResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerTitleResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerTitleResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerTitleResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerTitleResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerTitleResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerTitleResponse.status)
  return _msg;
}
inline void ViewerControllerTitleResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerTitleResponse.status)
}

// string title = 2;
inline void ViewerControllerTitleResponse::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ViewerControllerTitleResponse::title() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerTitleResponse.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewerControllerTitleResponse::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerTitleResponse.title)
}
inline std::string* ViewerControllerTitleResponse::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerTitleResponse.title)
  return _s;
}
inline const std::string& ViewerControllerTitleResponse::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ViewerControllerTitleResponse::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewerControllerTitleResponse::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* ViewerControllerTitleResponse::release_title() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerTitleResponse.title)
  return _impl_.title_.Release();
}
inline void ViewerControllerTitleResponse::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerTitleResponse.title)
}

// -------------------------------------------------------------------

// ViewerControllerModalityResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerModalityResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerModalityResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerModalityResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerModalityResponse.status)
  return _internal_status();
}
inline void ViewerControllerModalityResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerModalityResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerModalityResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerModalityResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerModalityResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerModalityResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerModalityResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerModalityResponse.status)
  return _msg;
}
inline void ViewerControllerModalityResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerModalityResponse.status)
}

// string modality = 2;
inline void ViewerControllerModalityResponse::clear_modality() {
  _impl_.modality_.ClearToEmpty();
}
inline const std::string& ViewerControllerModalityResponse::modality() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerModalityResponse.modality)
  return _internal_modality();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewerControllerModalityResponse::set_modality(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.modality_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerModalityResponse.modality)
}
inline std::string* ViewerControllerModalityResponse::mutable_modality() {
  std::string* _s = _internal_mutable_modality();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerModalityResponse.modality)
  return _s;
}
inline const std::string& ViewerControllerModalityResponse::_internal_modality() const {
  return _impl_.modality_.Get();
}
inline void ViewerControllerModalityResponse::_internal_set_modality(const std::string& value) {
  ;


  _impl_.modality_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewerControllerModalityResponse::_internal_mutable_modality() {
  ;
  return _impl_.modality_.Mutable( GetArenaForAllocation());
}
inline std::string* ViewerControllerModalityResponse::release_modality() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerModalityResponse.modality)
  return _impl_.modality_.Release();
}
inline void ViewerControllerModalityResponse::set_allocated_modality(std::string* value) {
  _impl_.modality_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.modality_.IsDefault()) {
          _impl_.modality_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerModalityResponse.modality)
}

// -------------------------------------------------------------------

// ViewerControllerMovieIdxResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerMovieIdxResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerMovieIdxResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerMovieIdxResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerMovieIdxResponse.status)
  return _internal_status();
}
inline void ViewerControllerMovieIdxResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerMovieIdxResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerMovieIdxResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerMovieIdxResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerMovieIdxResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerMovieIdxResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerMovieIdxResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerMovieIdxResponse.status)
  return _msg;
}
inline void ViewerControllerMovieIdxResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerMovieIdxResponse.status)
}

// int32 movie_idx = 2;
inline void ViewerControllerMovieIdxResponse::clear_movie_idx() {
  _impl_.movie_idx_ = 0;
}
inline ::int32_t ViewerControllerMovieIdxResponse::movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerMovieIdxResponse.movie_idx)
  return _internal_movie_idx();
}
inline void ViewerControllerMovieIdxResponse::set_movie_idx(::int32_t value) {
  _internal_set_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerMovieIdxResponse.movie_idx)
}
inline ::int32_t ViewerControllerMovieIdxResponse::_internal_movie_idx() const {
  return _impl_.movie_idx_;
}
inline void ViewerControllerMovieIdxResponse::_internal_set_movie_idx(::int32_t value) {
  ;
  _impl_.movie_idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerMaxMovieIdxResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerMaxMovieIdxResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerMaxMovieIdxResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerMaxMovieIdxResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerMaxMovieIdxResponse.status)
  return _internal_status();
}
inline void ViewerControllerMaxMovieIdxResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerMaxMovieIdxResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerMaxMovieIdxResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerMaxMovieIdxResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerMaxMovieIdxResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerMaxMovieIdxResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerMaxMovieIdxResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerMaxMovieIdxResponse.status)
  return _msg;
}
inline void ViewerControllerMaxMovieIdxResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerMaxMovieIdxResponse.status)
}

// int32 max_movie_idx = 2;
inline void ViewerControllerMaxMovieIdxResponse::clear_max_movie_idx() {
  _impl_.max_movie_idx_ = 0;
}
inline ::int32_t ViewerControllerMaxMovieIdxResponse::max_movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerMaxMovieIdxResponse.max_movie_idx)
  return _internal_max_movie_idx();
}
inline void ViewerControllerMaxMovieIdxResponse::set_max_movie_idx(::int32_t value) {
  _internal_set_max_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerMaxMovieIdxResponse.max_movie_idx)
}
inline ::int32_t ViewerControllerMaxMovieIdxResponse::_internal_max_movie_idx() const {
  return _impl_.max_movie_idx_;
}
inline void ViewerControllerMaxMovieIdxResponse::_internal_set_max_movie_idx(::int32_t value) {
  ;
  _impl_.max_movie_idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerIdxResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerIdxResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerIdxResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerIdxResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerIdxResponse.status)
  return _internal_status();
}
inline void ViewerControllerIdxResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerIdxResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerIdxResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerIdxResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerIdxResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerIdxResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerIdxResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerIdxResponse.status)
  return _msg;
}
inline void ViewerControllerIdxResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerIdxResponse.status)
}

// int32 idx = 2;
inline void ViewerControllerIdxResponse::clear_idx() {
  _impl_.idx_ = 0;
}
inline ::int32_t ViewerControllerIdxResponse::idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerIdxResponse.idx)
  return _internal_idx();
}
inline void ViewerControllerIdxResponse::set_idx(::int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerIdxResponse.idx)
}
inline ::int32_t ViewerControllerIdxResponse::_internal_idx() const {
  return _impl_.idx_;
}
inline void ViewerControllerIdxResponse::_internal_set_idx(::int32_t value) {
  ;
  _impl_.idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerWLWWResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerWLWWResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerWLWWResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerWLWWResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerWLWWResponse.status)
  return _internal_status();
}
inline void ViewerControllerWLWWResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerWLWWResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerWLWWResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerWLWWResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerWLWWResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerWLWWResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerWLWWResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerWLWWResponse.status)
  return _msg;
}
inline void ViewerControllerWLWWResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerWLWWResponse.status)
}

// float wl = 2;
inline void ViewerControllerWLWWResponse::clear_wl() {
  _impl_.wl_ = 0;
}
inline float ViewerControllerWLWWResponse::wl() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerWLWWResponse.wl)
  return _internal_wl();
}
inline void ViewerControllerWLWWResponse::set_wl(float value) {
  _internal_set_wl(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerWLWWResponse.wl)
}
inline float ViewerControllerWLWWResponse::_internal_wl() const {
  return _impl_.wl_;
}
inline void ViewerControllerWLWWResponse::_internal_set_wl(float value) {
  ;
  _impl_.wl_ = value;
}

// float ww = 3;
inline void ViewerControllerWLWWResponse::clear_ww() {
  _impl_.ww_ = 0;
}
inline float ViewerControllerWLWWResponse::ww() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerWLWWResponse.ww)
  return _internal_ww();
}
inline void ViewerControllerWLWWResponse::set_ww(float value) {
  _internal_set_ww(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerWLWWResponse.ww)
}
inline float ViewerControllerWLWWResponse::_internal_ww() const {
  return _impl_.ww_;
}
inline void ViewerControllerWLWWResponse::_internal_set_ww(float value) {
  ;
  _impl_.ww_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerOpenVRViewerForModeResponse

// .osirixgrpc.Status status = 1;
inline bool ViewerControllerOpenVRViewerForModeResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::osirixgrpc::Status& ViewerControllerOpenVRViewerForModeResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& ViewerControllerOpenVRViewerForModeResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.status)
  return _internal_status();
}
inline void ViewerControllerOpenVRViewerForModeResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.status)
}
inline ::osirixgrpc::Status* ViewerControllerOpenVRViewerForModeResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerOpenVRViewerForModeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* ViewerControllerOpenVRViewerForModeResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::osirixgrpc::Status* ViewerControllerOpenVRViewerForModeResponse::mutable_status() {
  ::osirixgrpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.status)
  return _msg;
}
inline void ViewerControllerOpenVRViewerForModeResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.status)
}

// .osirixgrpc.VRController vr_controller = 2;
inline bool ViewerControllerOpenVRViewerForModeResponse::has_vr_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vr_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::VRController& ViewerControllerOpenVRViewerForModeResponse::_internal_vr_controller() const {
  const ::osirixgrpc::VRController* p = _impl_.vr_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::VRController&>(
      ::osirixgrpc::_VRController_default_instance_);
}
inline const ::osirixgrpc::VRController& ViewerControllerOpenVRViewerForModeResponse::vr_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.vr_controller)
  return _internal_vr_controller();
}
inline void ViewerControllerOpenVRViewerForModeResponse::unsafe_arena_set_allocated_vr_controller(
    ::osirixgrpc::VRController* vr_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vr_controller_);
  }
  _impl_.vr_controller_ = vr_controller;
  if (vr_controller) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.vr_controller)
}
inline ::osirixgrpc::VRController* ViewerControllerOpenVRViewerForModeResponse::release_vr_controller() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::VRController* temp = _impl_.vr_controller_;
  _impl_.vr_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::VRController* ViewerControllerOpenVRViewerForModeResponse::unsafe_arena_release_vr_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.vr_controller)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::VRController* temp = _impl_.vr_controller_;
  _impl_.vr_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::VRController* ViewerControllerOpenVRViewerForModeResponse::_internal_mutable_vr_controller() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::VRController>(GetArenaForAllocation());
    _impl_.vr_controller_ = p;
  }
  return _impl_.vr_controller_;
}
inline ::osirixgrpc::VRController* ViewerControllerOpenVRViewerForModeResponse::mutable_vr_controller() {
  ::osirixgrpc::VRController* _msg = _internal_mutable_vr_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.vr_controller)
  return _msg;
}
inline void ViewerControllerOpenVRViewerForModeResponse::set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vr_controller_);
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller));
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse.vr_controller)
}

// -------------------------------------------------------------------

// ViewerControllerPixListRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerPixListRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerPixListRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerPixListRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerPixListRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerPixListRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerPixListRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerPixListRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerPixListRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerPixListRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerPixListRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerPixListRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerPixListRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerPixListRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerPixListRequest.viewer_controller)
}

// int32 movie_idx = 2;
inline void ViewerControllerPixListRequest::clear_movie_idx() {
  _impl_.movie_idx_ = 0;
}
inline ::int32_t ViewerControllerPixListRequest::movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerPixListRequest.movie_idx)
  return _internal_movie_idx();
}
inline void ViewerControllerPixListRequest::set_movie_idx(::int32_t value) {
  _internal_set_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerPixListRequest.movie_idx)
}
inline ::int32_t ViewerControllerPixListRequest::_internal_movie_idx() const {
  return _impl_.movie_idx_;
}
inline void ViewerControllerPixListRequest::_internal_set_movie_idx(::int32_t value) {
  ;
  _impl_.movie_idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerROIListRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerROIListRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerROIListRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerROIListRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIListRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerROIListRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerROIListRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIListRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIListRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerROIListRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIListRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIListRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIListRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerROIListRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerROIListRequest.viewer_controller)
}

// int32 movie_idx = 2;
inline void ViewerControllerROIListRequest::clear_movie_idx() {
  _impl_.movie_idx_ = 0;
}
inline ::int32_t ViewerControllerROIListRequest::movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIListRequest.movie_idx)
  return _internal_movie_idx();
}
inline void ViewerControllerROIListRequest::set_movie_idx(::int32_t value) {
  _internal_set_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerROIListRequest.movie_idx)
}
inline ::int32_t ViewerControllerROIListRequest::_internal_movie_idx() const {
  return _impl_.movie_idx_;
}
inline void ViewerControllerROIListRequest::_internal_set_movie_idx(::int32_t value) {
  ;
  _impl_.movie_idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerNewROIRequest_Buffer

// repeated bool buffer = 1;
inline int ViewerControllerNewROIRequest_Buffer::_internal_buffer_size() const {
  return _impl_.buffer_.size();
}
inline int ViewerControllerNewROIRequest_Buffer::buffer_size() const {
  return _internal_buffer_size();
}
inline void ViewerControllerNewROIRequest_Buffer::clear_buffer() {
  _internal_mutable_buffer()->Clear();
}
inline bool ViewerControllerNewROIRequest_Buffer::buffer(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Buffer.buffer)
  return _internal_buffer(index);
}
inline void ViewerControllerNewROIRequest_Buffer::set_buffer(int index, bool value) {
  _internal_mutable_buffer()->Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Buffer.buffer)
}
inline void ViewerControllerNewROIRequest_Buffer::add_buffer(bool value) {
  _internal_add_buffer(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerNewROIRequest.Buffer.buffer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>& ViewerControllerNewROIRequest_Buffer::buffer() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerNewROIRequest.Buffer.buffer)
  return _internal_buffer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>* ViewerControllerNewROIRequest_Buffer::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerNewROIRequest.Buffer.buffer)
  return _internal_mutable_buffer();
}

inline bool ViewerControllerNewROIRequest_Buffer::_internal_buffer(int index) const {
  return _internal_buffer().Get(index);
}
inline void ViewerControllerNewROIRequest_Buffer::_internal_add_buffer(bool value) {
  _internal_mutable_buffer()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>& ViewerControllerNewROIRequest_Buffer::_internal_buffer() const {
  return _impl_.buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<bool>* ViewerControllerNewROIRequest_Buffer::_internal_mutable_buffer() {
  return &_impl_.buffer_;
}

// int32 rows = 2;
inline void ViewerControllerNewROIRequest_Buffer::clear_rows() {
  _impl_.rows_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest_Buffer::rows() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Buffer.rows)
  return _internal_rows();
}
inline void ViewerControllerNewROIRequest_Buffer::set_rows(::int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Buffer.rows)
}
inline ::int32_t ViewerControllerNewROIRequest_Buffer::_internal_rows() const {
  return _impl_.rows_;
}
inline void ViewerControllerNewROIRequest_Buffer::_internal_set_rows(::int32_t value) {
  ;
  _impl_.rows_ = value;
}

// int32 columns = 3;
inline void ViewerControllerNewROIRequest_Buffer::clear_columns() {
  _impl_.columns_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest_Buffer::columns() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Buffer.columns)
  return _internal_columns();
}
inline void ViewerControllerNewROIRequest_Buffer::set_columns(::int32_t value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Buffer.columns)
}
inline ::int32_t ViewerControllerNewROIRequest_Buffer::_internal_columns() const {
  return _impl_.columns_;
}
inline void ViewerControllerNewROIRequest_Buffer::_internal_set_columns(::int32_t value) {
  ;
  _impl_.columns_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerNewROIRequest_Point2D

// float x = 1;
inline void ViewerControllerNewROIRequest_Point2D::clear_x() {
  _impl_.x_ = 0;
}
inline float ViewerControllerNewROIRequest_Point2D::x() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Point2D.x)
  return _internal_x();
}
inline void ViewerControllerNewROIRequest_Point2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Point2D.x)
}
inline float ViewerControllerNewROIRequest_Point2D::_internal_x() const {
  return _impl_.x_;
}
inline void ViewerControllerNewROIRequest_Point2D::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2;
inline void ViewerControllerNewROIRequest_Point2D::clear_y() {
  _impl_.y_ = 0;
}
inline float ViewerControllerNewROIRequest_Point2D::y() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Point2D.y)
  return _internal_y();
}
inline void ViewerControllerNewROIRequest_Point2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Point2D.y)
}
inline float ViewerControllerNewROIRequest_Point2D::_internal_y() const {
  return _impl_.y_;
}
inline void ViewerControllerNewROIRequest_Point2D::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerNewROIRequest_Color

// int32 r = 1;
inline void ViewerControllerNewROIRequest_Color::clear_r() {
  _impl_.r_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest_Color::r() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Color.r)
  return _internal_r();
}
inline void ViewerControllerNewROIRequest_Color::set_r(::int32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Color.r)
}
inline ::int32_t ViewerControllerNewROIRequest_Color::_internal_r() const {
  return _impl_.r_;
}
inline void ViewerControllerNewROIRequest_Color::_internal_set_r(::int32_t value) {
  ;
  _impl_.r_ = value;
}

// int32 g = 2;
inline void ViewerControllerNewROIRequest_Color::clear_g() {
  _impl_.g_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest_Color::g() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Color.g)
  return _internal_g();
}
inline void ViewerControllerNewROIRequest_Color::set_g(::int32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Color.g)
}
inline ::int32_t ViewerControllerNewROIRequest_Color::_internal_g() const {
  return _impl_.g_;
}
inline void ViewerControllerNewROIRequest_Color::_internal_set_g(::int32_t value) {
  ;
  _impl_.g_ = value;
}

// int32 b = 3;
inline void ViewerControllerNewROIRequest_Color::clear_b() {
  _impl_.b_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest_Color::b() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Color.b)
  return _internal_b();
}
inline void ViewerControllerNewROIRequest_Color::set_b(::int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Color.b)
}
inline ::int32_t ViewerControllerNewROIRequest_Color::_internal_b() const {
  return _impl_.b_;
}
inline void ViewerControllerNewROIRequest_Color::_internal_set_b(::int32_t value) {
  ;
  _impl_.b_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerNewROIRequest_Rect

// float origin_x = 1;
inline void ViewerControllerNewROIRequest_Rect::clear_origin_x() {
  _impl_.origin_x_ = 0;
}
inline float ViewerControllerNewROIRequest_Rect::origin_x() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Rect.origin_x)
  return _internal_origin_x();
}
inline void ViewerControllerNewROIRequest_Rect::set_origin_x(float value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Rect.origin_x)
}
inline float ViewerControllerNewROIRequest_Rect::_internal_origin_x() const {
  return _impl_.origin_x_;
}
inline void ViewerControllerNewROIRequest_Rect::_internal_set_origin_x(float value) {
  ;
  _impl_.origin_x_ = value;
}

// float origin_y = 2;
inline void ViewerControllerNewROIRequest_Rect::clear_origin_y() {
  _impl_.origin_y_ = 0;
}
inline float ViewerControllerNewROIRequest_Rect::origin_y() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Rect.origin_y)
  return _internal_origin_y();
}
inline void ViewerControllerNewROIRequest_Rect::set_origin_y(float value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Rect.origin_y)
}
inline float ViewerControllerNewROIRequest_Rect::_internal_origin_y() const {
  return _impl_.origin_y_;
}
inline void ViewerControllerNewROIRequest_Rect::_internal_set_origin_y(float value) {
  ;
  _impl_.origin_y_ = value;
}

// float height = 3;
inline void ViewerControllerNewROIRequest_Rect::clear_height() {
  _impl_.height_ = 0;
}
inline float ViewerControllerNewROIRequest_Rect::height() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Rect.height)
  return _internal_height();
}
inline void ViewerControllerNewROIRequest_Rect::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Rect.height)
}
inline float ViewerControllerNewROIRequest_Rect::_internal_height() const {
  return _impl_.height_;
}
inline void ViewerControllerNewROIRequest_Rect::_internal_set_height(float value) {
  ;
  _impl_.height_ = value;
}

// float width = 4;
inline void ViewerControllerNewROIRequest_Rect::clear_width() {
  _impl_.width_ = 0;
}
inline float ViewerControllerNewROIRequest_Rect::width() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.Rect.width)
  return _internal_width();
}
inline void ViewerControllerNewROIRequest_Rect::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.Rect.width)
}
inline float ViewerControllerNewROIRequest_Rect::_internal_width() const {
  return _impl_.width_;
}
inline void ViewerControllerNewROIRequest_Rect::_internal_set_width(float value) {
  ;
  _impl_.width_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerNewROIRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerNewROIRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerNewROIRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerNewROIRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerNewROIRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerNewROIRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerNewROIRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerNewROIRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerNewROIRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerNewROIRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.viewer_controller)
}

// int32 itype = 2;
inline void ViewerControllerNewROIRequest::clear_itype() {
  _impl_.itype_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest::itype() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.itype)
  return _internal_itype();
}
inline void ViewerControllerNewROIRequest::set_itype(::int32_t value) {
  _internal_set_itype(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.itype)
}
inline ::int32_t ViewerControllerNewROIRequest::_internal_itype() const {
  return _impl_.itype_;
}
inline void ViewerControllerNewROIRequest::_internal_set_itype(::int32_t value) {
  ;
  _impl_.itype_ = value;
}

// string name = 3;
inline void ViewerControllerNewROIRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ViewerControllerNewROIRequest::name() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewerControllerNewROIRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.name)
}
inline std::string* ViewerControllerNewROIRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIRequest.name)
  return _s;
}
inline const std::string& ViewerControllerNewROIRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ViewerControllerNewROIRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewerControllerNewROIRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ViewerControllerNewROIRequest::release_name() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIRequest.name)
  return _impl_.name_.Release();
}
inline void ViewerControllerNewROIRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.name)
}

// int32 position = 4;
inline void ViewerControllerNewROIRequest::clear_position() {
  _impl_.position_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest::position() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.position)
  return _internal_position();
}
inline void ViewerControllerNewROIRequest::set_position(::int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.position)
}
inline ::int32_t ViewerControllerNewROIRequest::_internal_position() const {
  return _impl_.position_;
}
inline void ViewerControllerNewROIRequest::_internal_set_position(::int32_t value) {
  ;
  _impl_.position_ = value;
}

// int32 movie_idx = 5;
inline void ViewerControllerNewROIRequest::clear_movie_idx() {
  _impl_.movie_idx_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest::movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.movie_idx)
  return _internal_movie_idx();
}
inline void ViewerControllerNewROIRequest::set_movie_idx(::int32_t value) {
  _internal_set_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.movie_idx)
}
inline ::int32_t ViewerControllerNewROIRequest::_internal_movie_idx() const {
  return _impl_.movie_idx_;
}
inline void ViewerControllerNewROIRequest::_internal_set_movie_idx(::int32_t value) {
  ;
  _impl_.movie_idx_ = value;
}

// int32 buffer_position_x = 6;
inline void ViewerControllerNewROIRequest::clear_buffer_position_x() {
  _impl_.buffer_position_x_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest::buffer_position_x() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.buffer_position_x)
  return _internal_buffer_position_x();
}
inline void ViewerControllerNewROIRequest::set_buffer_position_x(::int32_t value) {
  _internal_set_buffer_position_x(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.buffer_position_x)
}
inline ::int32_t ViewerControllerNewROIRequest::_internal_buffer_position_x() const {
  return _impl_.buffer_position_x_;
}
inline void ViewerControllerNewROIRequest::_internal_set_buffer_position_x(::int32_t value) {
  ;
  _impl_.buffer_position_x_ = value;
}

// int32 buffer_position_y = 7;
inline void ViewerControllerNewROIRequest::clear_buffer_position_y() {
  _impl_.buffer_position_y_ = 0;
}
inline ::int32_t ViewerControllerNewROIRequest::buffer_position_y() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.buffer_position_y)
  return _internal_buffer_position_y();
}
inline void ViewerControllerNewROIRequest::set_buffer_position_y(::int32_t value) {
  _internal_set_buffer_position_y(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.buffer_position_y)
}
inline ::int32_t ViewerControllerNewROIRequest::_internal_buffer_position_y() const {
  return _impl_.buffer_position_y_;
}
inline void ViewerControllerNewROIRequest::_internal_set_buffer_position_y(::int32_t value) {
  ;
  _impl_.buffer_position_y_ = value;
}

// .osirixgrpc.ViewerControllerNewROIRequest.Color color = 8;
inline bool ViewerControllerNewROIRequest::has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_ != nullptr);
  return value;
}
inline void ViewerControllerNewROIRequest::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Color& ViewerControllerNewROIRequest::_internal_color() const {
  const ::osirixgrpc::ViewerControllerNewROIRequest_Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerControllerNewROIRequest_Color&>(
      ::osirixgrpc::_ViewerControllerNewROIRequest_Color_default_instance_);
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Color& ViewerControllerNewROIRequest::color() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.color)
  return _internal_color();
}
inline void ViewerControllerNewROIRequest::unsafe_arena_set_allocated_color(
    ::osirixgrpc::ViewerControllerNewROIRequest_Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.color)
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Color* ViewerControllerNewROIRequest::release_color() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ViewerControllerNewROIRequest_Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Color* ViewerControllerNewROIRequest::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIRequest.color)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ViewerControllerNewROIRequest_Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Color* ViewerControllerNewROIRequest::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Color* ViewerControllerNewROIRequest::mutable_color() {
  ::osirixgrpc::ViewerControllerNewROIRequest_Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIRequest.color)
  return _msg;
}
inline void ViewerControllerNewROIRequest::set_allocated_color(::osirixgrpc::ViewerControllerNewROIRequest_Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.color)
}

// float thickness = 9;
inline void ViewerControllerNewROIRequest::clear_thickness() {
  _impl_.thickness_ = 0;
}
inline float ViewerControllerNewROIRequest::thickness() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.thickness)
  return _internal_thickness();
}
inline void ViewerControllerNewROIRequest::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.thickness)
}
inline float ViewerControllerNewROIRequest::_internal_thickness() const {
  return _impl_.thickness_;
}
inline void ViewerControllerNewROIRequest::_internal_set_thickness(float value) {
  ;
  _impl_.thickness_ = value;
}

// float opacity = 10;
inline void ViewerControllerNewROIRequest::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline float ViewerControllerNewROIRequest::opacity() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.opacity)
  return _internal_opacity();
}
inline void ViewerControllerNewROIRequest::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerNewROIRequest.opacity)
}
inline float ViewerControllerNewROIRequest::_internal_opacity() const {
  return _impl_.opacity_;
}
inline void ViewerControllerNewROIRequest::_internal_set_opacity(float value) {
  ;
  _impl_.opacity_ = value;
}

// .osirixgrpc.ViewerControllerNewROIRequest.Buffer buffer = 11;
inline bool ViewerControllerNewROIRequest::has_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_ != nullptr);
  return value;
}
inline void ViewerControllerNewROIRequest::clear_buffer() {
  if (_impl_.buffer_ != nullptr) _impl_.buffer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer& ViewerControllerNewROIRequest::_internal_buffer() const {
  const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* p = _impl_.buffer_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer&>(
      ::osirixgrpc::_ViewerControllerNewROIRequest_Buffer_default_instance_);
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer& ViewerControllerNewROIRequest::buffer() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.buffer)
  return _internal_buffer();
}
inline void ViewerControllerNewROIRequest::unsafe_arena_set_allocated_buffer(
    ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* buffer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_);
  }
  _impl_.buffer_ = buffer;
  if (buffer) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.buffer)
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* ViewerControllerNewROIRequest::release_buffer() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* temp = _impl_.buffer_;
  _impl_.buffer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* ViewerControllerNewROIRequest::unsafe_arena_release_buffer() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIRequest.buffer)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* temp = _impl_.buffer_;
  _impl_.buffer_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* ViewerControllerNewROIRequest::_internal_mutable_buffer() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Buffer>(GetArenaForAllocation());
    _impl_.buffer_ = p;
  }
  return _impl_.buffer_;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* ViewerControllerNewROIRequest::mutable_buffer() {
  ::osirixgrpc::ViewerControllerNewROIRequest_Buffer* _msg = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIRequest.buffer)
  return _msg;
}
inline void ViewerControllerNewROIRequest::set_allocated_buffer(::osirixgrpc::ViewerControllerNewROIRequest_Buffer* buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buffer_;
  }
  if (buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buffer);
    if (message_arena != submessage_arena) {
      buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.buffer_ = buffer;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.buffer)
}

// repeated .osirixgrpc.ViewerControllerNewROIRequest.Point2D points = 12;
inline int ViewerControllerNewROIRequest::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int ViewerControllerNewROIRequest::points_size() const {
  return _internal_points_size();
}
inline void ViewerControllerNewROIRequest::clear_points() {
  _internal_mutable_points()->Clear();
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* ViewerControllerNewROIRequest::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIRequest.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D >*
ViewerControllerNewROIRequest::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.ViewerControllerNewROIRequest.points)
  return _internal_mutable_points();
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Point2D& ViewerControllerNewROIRequest::_internal_points(int index) const {
  return _internal_points().Get(index);
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Point2D& ViewerControllerNewROIRequest::points(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.points)
  return _internal_points(index);
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* ViewerControllerNewROIRequest::_internal_add_points() {
  return _internal_mutable_points()->Add();
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* ViewerControllerNewROIRequest::add_points() {
  ::osirixgrpc::ViewerControllerNewROIRequest_Point2D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:osirixgrpc.ViewerControllerNewROIRequest.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D >&
ViewerControllerNewROIRequest::points() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.ViewerControllerNewROIRequest.points)
  return _internal_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerNewROIRequest_Point2D>&
ViewerControllerNewROIRequest::_internal_points() const {
  return _impl_.points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::osirixgrpc::ViewerControllerNewROIRequest_Point2D>*
ViewerControllerNewROIRequest::_internal_mutable_points() {
  return &_impl_.points_;
}

// .osirixgrpc.ViewerControllerNewROIRequest.Rect rectangle = 13;
inline bool ViewerControllerNewROIRequest::has_rectangle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rectangle_ != nullptr);
  return value;
}
inline void ViewerControllerNewROIRequest::clear_rectangle() {
  if (_impl_.rectangle_ != nullptr) _impl_.rectangle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Rect& ViewerControllerNewROIRequest::_internal_rectangle() const {
  const ::osirixgrpc::ViewerControllerNewROIRequest_Rect* p = _impl_.rectangle_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerControllerNewROIRequest_Rect&>(
      ::osirixgrpc::_ViewerControllerNewROIRequest_Rect_default_instance_);
}
inline const ::osirixgrpc::ViewerControllerNewROIRequest_Rect& ViewerControllerNewROIRequest::rectangle() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerNewROIRequest.rectangle)
  return _internal_rectangle();
}
inline void ViewerControllerNewROIRequest::unsafe_arena_set_allocated_rectangle(
    ::osirixgrpc::ViewerControllerNewROIRequest_Rect* rectangle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rectangle_);
  }
  _impl_.rectangle_ = rectangle;
  if (rectangle) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.rectangle)
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Rect* ViewerControllerNewROIRequest::release_rectangle() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osirixgrpc::ViewerControllerNewROIRequest_Rect* temp = _impl_.rectangle_;
  _impl_.rectangle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Rect* ViewerControllerNewROIRequest::unsafe_arena_release_rectangle() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerNewROIRequest.rectangle)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osirixgrpc::ViewerControllerNewROIRequest_Rect* temp = _impl_.rectangle_;
  _impl_.rectangle_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Rect* ViewerControllerNewROIRequest::_internal_mutable_rectangle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerControllerNewROIRequest_Rect>(GetArenaForAllocation());
    _impl_.rectangle_ = p;
  }
  return _impl_.rectangle_;
}
inline ::osirixgrpc::ViewerControllerNewROIRequest_Rect* ViewerControllerNewROIRequest::mutable_rectangle() {
  ::osirixgrpc::ViewerControllerNewROIRequest_Rect* _msg = _internal_mutable_rectangle();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerNewROIRequest.rectangle)
  return _msg;
}
inline void ViewerControllerNewROIRequest::set_allocated_rectangle(::osirixgrpc::ViewerControllerNewROIRequest_Rect* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rectangle_;
  }
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rectangle);
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerNewROIRequest.rectangle)
}

// -------------------------------------------------------------------

// ViewerControllerROIsWithNameRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerROIsWithNameRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerROIsWithNameRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerROIsWithNameRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIsWithNameRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerROIsWithNameRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerROIsWithNameRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIsWithNameRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIsWithNameRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerROIsWithNameRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIsWithNameRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerROIsWithNameRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIsWithNameRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerROIsWithNameRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerROIsWithNameRequest.viewer_controller)
}

// string name = 2;
inline void ViewerControllerROIsWithNameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ViewerControllerROIsWithNameRequest::name() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIsWithNameRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewerControllerROIsWithNameRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerROIsWithNameRequest.name)
}
inline std::string* ViewerControllerROIsWithNameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerROIsWithNameRequest.name)
  return _s;
}
inline const std::string& ViewerControllerROIsWithNameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ViewerControllerROIsWithNameRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewerControllerROIsWithNameRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ViewerControllerROIsWithNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerROIsWithNameRequest.name)
  return _impl_.name_.Release();
}
inline void ViewerControllerROIsWithNameRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerROIsWithNameRequest.name)
}

// int32 movie_idx = 3;
inline void ViewerControllerROIsWithNameRequest::clear_movie_idx() {
  _impl_.movie_idx_ = 0;
}
inline ::int32_t ViewerControllerROIsWithNameRequest::movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIsWithNameRequest.movie_idx)
  return _internal_movie_idx();
}
inline void ViewerControllerROIsWithNameRequest::set_movie_idx(::int32_t value) {
  _internal_set_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerROIsWithNameRequest.movie_idx)
}
inline ::int32_t ViewerControllerROIsWithNameRequest::_internal_movie_idx() const {
  return _impl_.movie_idx_;
}
inline void ViewerControllerROIsWithNameRequest::_internal_set_movie_idx(::int32_t value) {
  ;
  _impl_.movie_idx_ = value;
}

// bool in_4d = 4;
inline void ViewerControllerROIsWithNameRequest::clear_in_4d() {
  _impl_.in_4d_ = false;
}
inline bool ViewerControllerROIsWithNameRequest::in_4d() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerROIsWithNameRequest.in_4d)
  return _internal_in_4d();
}
inline void ViewerControllerROIsWithNameRequest::set_in_4d(bool value) {
  _internal_set_in_4d(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerROIsWithNameRequest.in_4d)
}
inline bool ViewerControllerROIsWithNameRequest::_internal_in_4d() const {
  return _impl_.in_4d_;
}
inline void ViewerControllerROIsWithNameRequest::_internal_set_in_4d(bool value) {
  ;
  _impl_.in_4d_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerResampleViewerControllerRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerResampleViewerControllerRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerResampleViewerControllerRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerResampleViewerControllerRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerResampleViewerControllerRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerResampleViewerControllerRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerResampleViewerControllerRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerResampleViewerControllerRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerResampleViewerControllerRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerResampleViewerControllerRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerResampleViewerControllerRequest.viewer_controller)
}

// .osirixgrpc.ViewerController fixed_viewer_controller = 2;
inline bool ViewerControllerResampleViewerControllerRequest::has_fixed_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerResampleViewerControllerRequest::_internal_fixed_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.fixed_viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerResampleViewerControllerRequest::fixed_viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerResampleViewerControllerRequest.fixed_viewer_controller)
  return _internal_fixed_viewer_controller();
}
inline void ViewerControllerResampleViewerControllerRequest::unsafe_arena_set_allocated_fixed_viewer_controller(
    ::osirixgrpc::ViewerController* fixed_viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_viewer_controller_);
  }
  _impl_.fixed_viewer_controller_ = fixed_viewer_controller;
  if (fixed_viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerResampleViewerControllerRequest.fixed_viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::release_fixed_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ViewerController* temp = _impl_.fixed_viewer_controller_;
  _impl_.fixed_viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::unsafe_arena_release_fixed_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerResampleViewerControllerRequest.fixed_viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osirixgrpc::ViewerController* temp = _impl_.fixed_viewer_controller_;
  _impl_.fixed_viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::_internal_mutable_fixed_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.fixed_viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.fixed_viewer_controller_ = p;
  }
  return _impl_.fixed_viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerResampleViewerControllerRequest::mutable_fixed_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_fixed_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerResampleViewerControllerRequest.fixed_viewer_controller)
  return _msg;
}
inline void ViewerControllerResampleViewerControllerRequest::set_allocated_fixed_viewer_controller(::osirixgrpc::ViewerController* fixed_viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_viewer_controller_);
  }
  if (fixed_viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_viewer_controller));
    if (message_arena != submessage_arena) {
      fixed_viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fixed_viewer_controller_ = fixed_viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerResampleViewerControllerRequest.fixed_viewer_controller)
}

// -------------------------------------------------------------------

// ViewerControllerCopyViewerWindowRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerCopyViewerWindowRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerCopyViewerWindowRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerCopyViewerWindowRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerCopyViewerWindowRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerCopyViewerWindowRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerCopyViewerWindowRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerCopyViewerWindowRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerCopyViewerWindowRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerCopyViewerWindowRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerCopyViewerWindowRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerCopyViewerWindowRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerCopyViewerWindowRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerCopyViewerWindowRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerCopyViewerWindowRequest.viewer_controller)
}

// bool in_4d = 2;
inline void ViewerControllerCopyViewerWindowRequest::clear_in_4d() {
  _impl_.in_4d_ = false;
}
inline bool ViewerControllerCopyViewerWindowRequest::in_4d() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerCopyViewerWindowRequest.in_4d)
  return _internal_in_4d();
}
inline void ViewerControllerCopyViewerWindowRequest::set_in_4d(bool value) {
  _internal_set_in_4d(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerCopyViewerWindowRequest.in_4d)
}
inline bool ViewerControllerCopyViewerWindowRequest::_internal_in_4d() const {
  return _impl_.in_4d_;
}
inline void ViewerControllerCopyViewerWindowRequest::_internal_set_in_4d(bool value) {
  ;
  _impl_.in_4d_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerSetMovieIdxRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerSetMovieIdxRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerSetMovieIdxRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerSetMovieIdxRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetMovieIdxRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerSetMovieIdxRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerSetMovieIdxRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetMovieIdxRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetMovieIdxRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerSetMovieIdxRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetMovieIdxRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetMovieIdxRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerSetMovieIdxRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerSetMovieIdxRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerSetMovieIdxRequest.viewer_controller)
}

// int32 movie_idx = 2;
inline void ViewerControllerSetMovieIdxRequest::clear_movie_idx() {
  _impl_.movie_idx_ = 0;
}
inline ::int32_t ViewerControllerSetMovieIdxRequest::movie_idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetMovieIdxRequest.movie_idx)
  return _internal_movie_idx();
}
inline void ViewerControllerSetMovieIdxRequest::set_movie_idx(::int32_t value) {
  _internal_set_movie_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerSetMovieIdxRequest.movie_idx)
}
inline ::int32_t ViewerControllerSetMovieIdxRequest::_internal_movie_idx() const {
  return _impl_.movie_idx_;
}
inline void ViewerControllerSetMovieIdxRequest::_internal_set_movie_idx(::int32_t value) {
  ;
  _impl_.movie_idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerIsDataVolumicRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerIsDataVolumicRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerIsDataVolumicRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerIsDataVolumicRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerIsDataVolumicRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerIsDataVolumicRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerIsDataVolumicRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerIsDataVolumicRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerIsDataVolumicRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerIsDataVolumicRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerIsDataVolumicRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerIsDataVolumicRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerIsDataVolumicRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerIsDataVolumicRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerIsDataVolumicRequest.viewer_controller)
}

// bool in_4d = 2;
inline void ViewerControllerIsDataVolumicRequest::clear_in_4d() {
  _impl_.in_4d_ = false;
}
inline bool ViewerControllerIsDataVolumicRequest::in_4d() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerIsDataVolumicRequest.in_4d)
  return _internal_in_4d();
}
inline void ViewerControllerIsDataVolumicRequest::set_in_4d(bool value) {
  _internal_set_in_4d(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerIsDataVolumicRequest.in_4d)
}
inline bool ViewerControllerIsDataVolumicRequest::_internal_in_4d() const {
  return _impl_.in_4d_;
}
inline void ViewerControllerIsDataVolumicRequest::_internal_set_in_4d(bool value) {
  ;
  _impl_.in_4d_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerSetIdxRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerSetIdxRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerSetIdxRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerSetIdxRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetIdxRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerSetIdxRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerSetIdxRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetIdxRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetIdxRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerSetIdxRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetIdxRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetIdxRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerSetIdxRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerSetIdxRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerSetIdxRequest.viewer_controller)
}

// int32 idx = 2;
inline void ViewerControllerSetIdxRequest::clear_idx() {
  _impl_.idx_ = 0;
}
inline ::int32_t ViewerControllerSetIdxRequest::idx() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetIdxRequest.idx)
  return _internal_idx();
}
inline void ViewerControllerSetIdxRequest::set_idx(::int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerSetIdxRequest.idx)
}
inline ::int32_t ViewerControllerSetIdxRequest::_internal_idx() const {
  return _impl_.idx_;
}
inline void ViewerControllerSetIdxRequest::_internal_set_idx(::int32_t value) {
  ;
  _impl_.idx_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerSetWLWWRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerSetWLWWRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerSetWLWWRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerSetWLWWRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetWLWWRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerSetWLWWRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerSetWLWWRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetWLWWRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetWLWWRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerSetWLWWRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetWLWWRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerSetWLWWRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerSetWLWWRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerSetWLWWRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerSetWLWWRequest.viewer_controller)
}

// float wl = 2;
inline void ViewerControllerSetWLWWRequest::clear_wl() {
  _impl_.wl_ = 0;
}
inline float ViewerControllerSetWLWWRequest::wl() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetWLWWRequest.wl)
  return _internal_wl();
}
inline void ViewerControllerSetWLWWRequest::set_wl(float value) {
  _internal_set_wl(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerSetWLWWRequest.wl)
}
inline float ViewerControllerSetWLWWRequest::_internal_wl() const {
  return _impl_.wl_;
}
inline void ViewerControllerSetWLWWRequest::_internal_set_wl(float value) {
  ;
  _impl_.wl_ = value;
}

// float ww = 3;
inline void ViewerControllerSetWLWWRequest::clear_ww() {
  _impl_.ww_ = 0;
}
inline float ViewerControllerSetWLWWRequest::ww() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerSetWLWWRequest.ww)
  return _internal_ww();
}
inline void ViewerControllerSetWLWWRequest::set_ww(float value) {
  _internal_set_ww(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerSetWLWWRequest.ww)
}
inline float ViewerControllerSetWLWWRequest::_internal_ww() const {
  return _impl_.ww_;
}
inline void ViewerControllerSetWLWWRequest::_internal_set_ww(float value) {
  ;
  _impl_.ww_ = value;
}

// -------------------------------------------------------------------

// ViewerControllerOpenVRViewerForModeRequest

// .osirixgrpc.ViewerController viewer_controller = 1;
inline bool ViewerControllerOpenVRViewerForModeRequest::has_viewer_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewer_controller_ != nullptr);
  return value;
}
inline const ::osirixgrpc::ViewerController& ViewerControllerOpenVRViewerForModeRequest::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = _impl_.viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& ViewerControllerOpenVRViewerForModeRequest::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.viewer_controller)
  return _internal_viewer_controller();
}
inline void ViewerControllerOpenVRViewerForModeRequest::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  _impl_.viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.viewer_controller)
}
inline ::osirixgrpc::ViewerController* ViewerControllerOpenVRViewerForModeRequest::release_viewer_controller() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerOpenVRViewerForModeRequest::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.viewer_controller)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osirixgrpc::ViewerController* temp = _impl_.viewer_controller_;
  _impl_.viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* ViewerControllerOpenVRViewerForModeRequest::_internal_mutable_viewer_controller() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArenaForAllocation());
    _impl_.viewer_controller_ = p;
  }
  return _impl_.viewer_controller_;
}
inline ::osirixgrpc::ViewerController* ViewerControllerOpenVRViewerForModeRequest::mutable_viewer_controller() {
  ::osirixgrpc::ViewerController* _msg = _internal_mutable_viewer_controller();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.viewer_controller)
  return _msg;
}
inline void ViewerControllerOpenVRViewerForModeRequest::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller));
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.viewer_controller)
}

// string mode = 2;
inline void ViewerControllerOpenVRViewerForModeRequest::clear_mode() {
  _impl_.mode_.ClearToEmpty();
}
inline const std::string& ViewerControllerOpenVRViewerForModeRequest::mode() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode)
  return _internal_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewerControllerOpenVRViewerForModeRequest::set_mode(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.mode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode)
}
inline std::string* ViewerControllerOpenVRViewerForModeRequest::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode)
  return _s;
}
inline const std::string& ViewerControllerOpenVRViewerForModeRequest::_internal_mode() const {
  return _impl_.mode_.Get();
}
inline void ViewerControllerOpenVRViewerForModeRequest::_internal_set_mode(const std::string& value) {
  ;


  _impl_.mode_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewerControllerOpenVRViewerForModeRequest::_internal_mutable_mode() {
  ;
  return _impl_.mode_.Mutable( GetArenaForAllocation());
}
inline std::string* ViewerControllerOpenVRViewerForModeRequest::release_mode() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode)
  return _impl_.mode_.Release();
}
inline void ViewerControllerOpenVRViewerForModeRequest::set_allocated_mode(std::string* value) {
  _impl_.mode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mode_.IsDefault()) {
          _impl_.mode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace osirixgrpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_viewercontroller_2eproto_2epb_2eh
