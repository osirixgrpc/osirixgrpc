// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: osirix.proto
#ifndef GRPC_osirix_2eproto__INCLUDED
#define GRPC_osirix_2eproto__INCLUDED

#include "osirix.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace osirixgrpc {

class OsiriXService final {
 public:
  static constexpr char const* service_full_name() {
    return "osirixgrpc.OsiriXService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // OsiriX messages
    virtual ::grpc::Status OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixCurrentBrowserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixCurrentBrowserResponse>> AsyncOsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixCurrentBrowserResponse>>(AsyncOsirixCurrentBrowserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixCurrentBrowserResponse>> PrepareAsyncOsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixCurrentBrowserResponse>>(PrepareAsyncOsirixCurrentBrowserRaw(context, request, cq));
    }
    virtual ::grpc::Status OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixFrontmostViewerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostViewerResponse>> AsyncOsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostViewerResponse>>(AsyncOsirixFrontmostViewerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostViewerResponse>> PrepareAsyncOsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostViewerResponse>>(PrepareAsyncOsirixFrontmostViewerRaw(context, request, cq));
    }
    virtual ::grpc::Status OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayed2DViewersResponse>> AsyncOsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayed2DViewersResponse>>(AsyncOsirixDisplayed2DViewersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayed2DViewersResponse>> PrepareAsyncOsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayed2DViewersResponse>>(PrepareAsyncOsirixDisplayed2DViewersRaw(context, request, cq));
    }
    virtual ::grpc::Status OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostVRControllerResponse>> AsyncOsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostVRControllerResponse>>(AsyncOsirixFrontmostVRControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostVRControllerResponse>> PrepareAsyncOsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostVRControllerResponse>>(PrepareAsyncOsirixFrontmostVRControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayedVRControllersResponse>> AsyncOsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayedVRControllersResponse>>(AsyncOsirixDisplayedVRControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayedVRControllersResponse>> PrepareAsyncOsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayedVRControllersResponse>>(PrepareAsyncOsirixDisplayedVRControllersRaw(context, request, cq));
    }
    // ROI messages
    virtual ::grpc::Status ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIFlipHorizontallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIFlipHorizontallyRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIFlipVerticallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIFlipVerticallyRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIAreaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIAreaResponse>> AsyncROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIAreaResponse>>(AsyncROIAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIAreaResponse>> PrepareAsyncROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIAreaResponse>>(PrepareAsyncROIAreaRaw(context, request, cq));
    }
    virtual ::grpc::Status ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROICentroidResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROICentroidResponse>> AsyncROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROICentroidResponse>>(AsyncROICentroidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROICentroidResponse>> PrepareAsyncROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROICentroidResponse>>(PrepareAsyncROICentroidRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIRotateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIRotateRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIPixResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPixResponse>> AsyncROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPixResponse>>(AsyncROIPixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPixResponse>> PrepareAsyncROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPixResponse>>(PrepareAsyncROIPixRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROINameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROINameResponse>> AsyncROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROINameResponse>>(AsyncROINameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROINameResponse>> PrepareAsyncROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROINameResponse>>(PrepareAsyncROINameRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIITypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIITypeResponse>> AsyncROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIITypeResponse>>(AsyncROIITypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIITypeResponse>> PrepareAsyncROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIITypeResponse>>(PrepareAsyncROIITypeRaw(context, request, cq));
    }
    virtual ::grpc::Status ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROISetNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROISetNameRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIColorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIColorResponse>> AsyncROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIColorResponse>>(AsyncROIColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIColorResponse>> PrepareAsyncROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIColorResponse>>(PrepareAsyncROIColorRaw(context, request, cq));
    }
    virtual ::grpc::Status ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROISetColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROISetColorRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIOpacityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIOpacityResponse>> AsyncROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIOpacityResponse>>(AsyncROIOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIOpacityResponse>> PrepareAsyncROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIOpacityResponse>>(PrepareAsyncROIOpacityRaw(context, request, cq));
    }
    virtual ::grpc::Status ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROISetOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROISetOpacityRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIThicknessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIThicknessResponse>> AsyncROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIThicknessResponse>>(AsyncROIThicknessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIThicknessResponse>> PrepareAsyncROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIThicknessResponse>>(PrepareAsyncROIThicknessRaw(context, request, cq));
    }
    virtual ::grpc::Status ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROISetThicknessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROISetThicknessRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPointsResponse>> AsyncROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPointsResponse>>(AsyncROIPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPointsResponse>> PrepareAsyncROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPointsResponse>>(PrepareAsyncROIPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROISetPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROISetPointsRaw(context, request, cq));
    }
    // ROIVolume messages
    virtual ::grpc::Status ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeTextureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeTextureResponse>> AsyncROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeTextureResponse>>(AsyncROIVolumeTextureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeTextureResponse>> PrepareAsyncROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeTextureResponse>>(PrepareAsyncROIVolumeTextureRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIVolumeSetTextureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetTextureRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeVolumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVolumeResponse>> AsyncROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVolumeResponse>>(AsyncROIVolumeVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVolumeResponse>> PrepareAsyncROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVolumeResponse>>(PrepareAsyncROIVolumeVolumeRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeColorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeColorResponse>> AsyncROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeColorResponse>>(AsyncROIVolumeColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeColorResponse>> PrepareAsyncROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeColorResponse>>(PrepareAsyncROIVolumeColorRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIVolumeSetColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetColorRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeOpacityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeOpacityResponse>> AsyncROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeOpacityResponse>>(AsyncROIVolumeOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeOpacityResponse>> PrepareAsyncROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeOpacityResponse>>(PrepareAsyncROIVolumeOpacityRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIVolumeSetOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetOpacityRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeFactorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeFactorResponse>> AsyncROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeFactorResponse>>(AsyncROIVolumeFactorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeFactorResponse>> PrepareAsyncROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeFactorResponse>>(PrepareAsyncROIVolumeFactorRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncROIVolumeSetFactorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetFactorRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeNameResponse>> AsyncROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeNameResponse>>(AsyncROIVolumeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeNameResponse>> PrepareAsyncROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeNameResponse>>(PrepareAsyncROIVolumeNameRaw(context, request, cq));
    }
    virtual ::grpc::Status ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeVisibleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVisibleResponse>> AsyncROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVisibleResponse>>(AsyncROIVolumeVisibleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVisibleResponse>> PrepareAsyncROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVisibleResponse>>(PrepareAsyncROIVolumeVisibleRaw(context, request, cq));
    }
    // DCMPix messages
    virtual ::grpc::Status DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncDCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncDCMPixConvertToRGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncDCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncDCMPixConvertToRGBRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncDCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncDCMPixConvertToBWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncDCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncDCMPixConvertToBWRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixIsRGBResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixIsRGBResponse>> AsyncDCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixIsRGBResponse>>(AsyncDCMPixIsRGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixIsRGBResponse>> PrepareAsyncDCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixIsRGBResponse>>(PrepareAsyncDCMPixIsRGBRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::osirixgrpc::DCMPixComputeROIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixComputeROIResponse>> AsyncDCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixComputeROIResponse>>(AsyncDCMPixComputeROIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixComputeROIResponse>> PrepareAsyncDCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixComputeROIResponse>>(PrepareAsyncDCMPixComputeROIRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::osirixgrpc::DCMPixROIValuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixROIValuesResponse>> AsyncDCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixROIValuesResponse>>(AsyncDCMPixROIValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixROIValuesResponse>> PrepareAsyncDCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixROIValuesResponse>>(PrepareAsyncDCMPixROIValuesRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixShapeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixShapeResponse>> AsyncDCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixShapeResponse>>(AsyncDCMPixShapeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixShapeResponse>> PrepareAsyncDCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixShapeResponse>>(PrepareAsyncDCMPixShapeRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSpacingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSpacingResponse>> AsyncDCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSpacingResponse>>(AsyncDCMPixSpacingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSpacingResponse>> PrepareAsyncDCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSpacingResponse>>(PrepareAsyncDCMPixSpacingRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixOriginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOriginResponse>> AsyncDCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOriginResponse>>(AsyncDCMPixOriginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOriginResponse>> PrepareAsyncDCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOriginResponse>>(PrepareAsyncDCMPixOriginRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixOrientationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOrientationResponse>> AsyncDCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOrientationResponse>>(AsyncDCMPixOrientationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOrientationResponse>> PrepareAsyncDCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOrientationResponse>>(PrepareAsyncDCMPixOrientationRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSliceLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSliceLocationResponse>> AsyncDCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSliceLocationResponse>>(AsyncDCMPixSliceLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSliceLocationResponse>> PrepareAsyncDCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSliceLocationResponse>>(PrepareAsyncDCMPixSliceLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSourceFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSourceFileResponse>> AsyncDCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSourceFileResponse>>(AsyncDCMPixSourceFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSourceFileResponse>> PrepareAsyncDCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSourceFileResponse>>(PrepareAsyncDCMPixSourceFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixImageResponse>> AsyncDCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixImageResponse>>(AsyncDCMPixImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixImageResponse>> PrepareAsyncDCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixImageResponse>>(PrepareAsyncDCMPixImageRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncDCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncDCMPixSetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncDCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncDCMPixSetImageRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixGetMapFromROIResponse>> AsyncDCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixGetMapFromROIResponse>>(AsyncDCMPixGetMapFromROIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixGetMapFromROIResponse>> PrepareAsyncDCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixGetMapFromROIResponse>>(PrepareAsyncDCMPixGetMapFromROIRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomImageResponse>> AsyncDCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomImageResponse>>(AsyncDCMPixDicomImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomImageResponse>> PrepareAsyncDCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomImageResponse>>(PrepareAsyncDCMPixDicomImageRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomSeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomSeriesResponse>> AsyncDCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomSeriesResponse>>(AsyncDCMPixDicomSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomSeriesResponse>> PrepareAsyncDCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomSeriesResponse>>(PrepareAsyncDCMPixDicomSeriesRaw(context, request, cq));
    }
    virtual ::grpc::Status DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomStudyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomStudyResponse>> AsyncDCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomStudyResponse>>(AsyncDCMPixDicomStudyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomStudyResponse>> PrepareAsyncDCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomStudyResponse>>(PrepareAsyncDCMPixDicomStudyRaw(context, request, cq));
    }
    // VRController messages
    virtual ::grpc::Status VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerViewer2DResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerViewer2DResponse>> AsyncVRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerViewer2DResponse>>(AsyncVRControllerViewer2DRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerViewer2DResponse>> PrepareAsyncVRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerViewer2DResponse>>(PrepareAsyncVRControllerViewer2DRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerBlendingControllerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerBlendingControllerResponse>> AsyncVRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerBlendingControllerResponse>>(AsyncVRControllerBlendingControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerBlendingControllerResponse>> PrepareAsyncVRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerBlendingControllerResponse>>(PrepareAsyncVRControllerBlendingControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerStyleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerStyleResponse>> AsyncVRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerStyleResponse>>(AsyncVRControllerStyleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerStyleResponse>> PrepareAsyncVRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerStyleResponse>>(PrepareAsyncVRControllerStyleRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerTitleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerTitleResponse>> AsyncVRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerTitleResponse>>(AsyncVRControllerTitleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerTitleResponse>> PrepareAsyncVRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerTitleResponse>>(PrepareAsyncVRControllerTitleRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerROIVolumesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerROIVolumesResponse>> AsyncVRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerROIVolumesResponse>>(AsyncVRControllerROIVolumesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerROIVolumesResponse>> PrepareAsyncVRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerROIVolumesResponse>>(PrepareAsyncVRControllerROIVolumesRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerRenderingModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerRenderingModeResponse>> AsyncVRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerRenderingModeResponse>>(AsyncVRControllerRenderingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerRenderingModeResponse>> PrepareAsyncVRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerRenderingModeResponse>>(PrepareAsyncVRControllerRenderingModeRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncVRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncVRControllerSetRenderingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncVRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncVRControllerSetRenderingModeRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerWLWWResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerWLWWResponse>> AsyncVRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerWLWWResponse>>(AsyncVRControllerWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerWLWWResponse>> PrepareAsyncVRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerWLWWResponse>>(PrepareAsyncVRControllerWLWWRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncVRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncVRControllerSetWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncVRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncVRControllerSetWLWWRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncVRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncVRControllerHideROIVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncVRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncVRControllerHideROIVolumeRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncVRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncVRControllerDisplayROIVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncVRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncVRControllerDisplayROIVolumeRaw(context, request, cq));
    }
    virtual ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncVRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncVRControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncVRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncVRControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    // ViewerController messages
    virtual ::grpc::Status ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerCloseViewerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerCloseViewerRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::osirixgrpc::ViewerControllerPixListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerPixListResponse>> AsyncViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerPixListResponse>>(AsyncViewerControllerPixListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerPixListResponse>> PrepareAsyncViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerPixListResponse>>(PrepareAsyncViewerControllerPixListRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::osirixgrpc::ViewerControllerROIListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIListResponse>> AsyncViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIListResponse>>(AsyncViewerControllerROIListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIListResponse>> PrepareAsyncViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIListResponse>>(PrepareAsyncViewerControllerROIListRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::osirixgrpc::ViewerControllerNewROIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerNewROIResponse>> AsyncViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerNewROIResponse>>(AsyncViewerControllerNewROIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerNewROIResponse>> PrepareAsyncViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerNewROIResponse>>(PrepareAsyncViewerControllerNewROIRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerCurDCMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerCurDCMResponse>> AsyncViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerCurDCMResponse>>(AsyncViewerControllerCurDCMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerCurDCMResponse>> PrepareAsyncViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerCurDCMResponse>>(PrepareAsyncViewerControllerCurDCMRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIsWithNameResponse>> AsyncViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIsWithNameResponse>>(AsyncViewerControllerROIsWithNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIsWithNameResponse>> PrepareAsyncViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIsWithNameResponse>>(PrepareAsyncViewerControllerROIsWithNameRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerSelectedROIsResponse>> AsyncViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerSelectedROIsResponse>>(AsyncViewerControllerSelectedROIsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerSelectedROIsResponse>> PrepareAsyncViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerSelectedROIsResponse>>(PrepareAsyncViewerControllerSelectedROIsRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>> AsyncViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>>(AsyncViewerControllerIsDataVolumicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>> PrepareAsyncViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>>(PrepareAsyncViewerControllerIsDataVolumicRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerCopyViewerWindowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerCopyViewerWindowRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerResampleViewerControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerResampleViewerControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerBlendingControllerResponse>> AsyncViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerBlendingControllerResponse>>(AsyncViewerControllerBlendingControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerBlendingControllerResponse>> PrepareAsyncViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerBlendingControllerResponse>>(PrepareAsyncViewerControllerBlendingControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerVRControllersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerVRControllersResponse>> AsyncViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerVRControllersResponse>>(AsyncViewerControllerVRControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerVRControllersResponse>> PrepareAsyncViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerVRControllersResponse>>(PrepareAsyncViewerControllerVRControllersRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerTitleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerTitleResponse>> AsyncViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerTitleResponse>>(AsyncViewerControllerTitleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerTitleResponse>> PrepareAsyncViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerTitleResponse>>(PrepareAsyncViewerControllerTitleRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerModalityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerModalityResponse>> AsyncViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerModalityResponse>>(AsyncViewerControllerModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerModalityResponse>> PrepareAsyncViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerModalityResponse>>(PrepareAsyncViewerControllerModalityRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMovieIdxResponse>> AsyncViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMovieIdxResponse>>(AsyncViewerControllerMovieIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMovieIdxResponse>> PrepareAsyncViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMovieIdxResponse>>(PrepareAsyncViewerControllerMovieIdxRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerSetMovieIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerSetMovieIdxRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>> AsyncViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>>(AsyncViewerControllerMaxMovieIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>> PrepareAsyncViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>>(PrepareAsyncViewerControllerMaxMovieIdxRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerIdxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIdxResponse>> AsyncViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIdxResponse>>(AsyncViewerControllerIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIdxResponse>> PrepareAsyncViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIdxResponse>>(PrepareAsyncViewerControllerIdxRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerSetIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerSetIdxRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerWLWWResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerWLWWResponse>> AsyncViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerWLWWResponse>>(AsyncViewerControllerWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerWLWWResponse>> PrepareAsyncViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerWLWWResponse>>(PrepareAsyncViewerControllerWLWWRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncViewerControllerSetWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerSetWLWWRaw(context, request, cq));
    }
    virtual ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>> AsyncViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>>(AsyncViewerControllerOpenVRViewerForModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>> PrepareAsyncViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>>(PrepareAsyncViewerControllerOpenVRViewerForModeRaw(context, request, cq));
    }
    // BrowserController messages
    virtual ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>> AsyncBrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>>(AsyncBrowserControllerDatabaseSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>> PrepareAsyncBrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>>(PrepareAsyncBrowserControllerDatabaseSelectionRaw(context, request, cq));
    }
    virtual ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::osirixgrpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> AsyncBrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(AsyncBrowserControllerCopyFilesIfNeededRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>> PrepareAsyncBrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>>(PrepareAsyncBrowserControllerCopyFilesIfNeededRaw(context, request, cq));
    }
    // DicomImage messages
    virtual ::grpc::Status DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageWidthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageWidthResponse>> AsyncDicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageWidthResponse>>(AsyncDicomImageWidthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageWidthResponse>> PrepareAsyncDicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageWidthResponse>>(PrepareAsyncDicomImageWidthRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageHeightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageHeightResponse>> AsyncDicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageHeightResponse>>(AsyncDicomImageHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageHeightResponse>> PrepareAsyncDicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageHeightResponse>>(PrepareAsyncDicomImageHeightRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>> AsyncDicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>>(AsyncDicomImageSOPInstanceUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>> PrepareAsyncDicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>>(PrepareAsyncDicomImageSOPInstanceUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageCompletePathResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageCompletePathResponse>> AsyncDicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageCompletePathResponse>>(AsyncDicomImageCompletePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageCompletePathResponse>> PrepareAsyncDicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageCompletePathResponse>>(PrepareAsyncDicomImageCompletePathRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageDateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageDateResponse>> AsyncDicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageDateResponse>>(AsyncDicomImageDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageDateResponse>> PrepareAsyncDicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageDateResponse>>(PrepareAsyncDicomImageDateRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageNumberOfFramesResponse>> AsyncDicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageNumberOfFramesResponse>>(AsyncDicomImageNumberOfFramesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageNumberOfFramesResponse>> PrepareAsyncDicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageNumberOfFramesResponse>>(PrepareAsyncDicomImageNumberOfFramesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageModalityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageModalityResponse>> AsyncDicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageModalityResponse>>(AsyncDicomImageModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageModalityResponse>> PrepareAsyncDicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageModalityResponse>>(PrepareAsyncDicomImageModalityRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSeriesResponse>> AsyncDicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSeriesResponse>>(AsyncDicomImageSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSeriesResponse>> PrepareAsyncDicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSeriesResponse>>(PrepareAsyncDicomImageSeriesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSliceLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSliceLocationResponse>> AsyncDicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSliceLocationResponse>>(AsyncDicomImageSliceLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSliceLocationResponse>> PrepareAsyncDicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSliceLocationResponse>>(PrepareAsyncDicomImageSliceLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageInstanceNumberResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageInstanceNumberResponse>> AsyncDicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageInstanceNumberResponse>>(AsyncDicomImageInstanceNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageInstanceNumberResponse>> PrepareAsyncDicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageInstanceNumberResponse>>(PrepareAsyncDicomImageInstanceNumberRaw(context, request, cq));
    }
    // DicomSeries messages
    virtual ::grpc::Status DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesPathsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPathsResponse>> AsyncDicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPathsResponse>>(AsyncDicomSeriesPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPathsResponse>> PrepareAsyncDicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPathsResponse>>(PrepareAsyncDicomSeriesPathsRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>> AsyncDicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>>(AsyncDicomSeriesPreviousSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>> PrepareAsyncDicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>>(PrepareAsyncDicomSeriesPreviousSeriesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNextSeriesResponse>> AsyncDicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNextSeriesResponse>>(AsyncDicomSeriesNextSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNextSeriesResponse>> PrepareAsyncDicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNextSeriesResponse>>(PrepareAsyncDicomSeriesNextSeriesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSortedImagesResponse>> AsyncDicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSortedImagesResponse>>(AsyncDicomSeriesSortedImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSortedImagesResponse>> PrepareAsyncDicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSortedImagesResponse>>(PrepareAsyncDicomSeriesSortedImagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesStudyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesStudyResponse>> AsyncDicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesStudyResponse>>(AsyncDicomSeriesStudyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesStudyResponse>> PrepareAsyncDicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesStudyResponse>>(PrepareAsyncDicomSeriesStudyRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesImagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesImagesResponse>> AsyncDicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesImagesResponse>>(AsyncDicomSeriesImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesImagesResponse>> PrepareAsyncDicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesImagesResponse>>(PrepareAsyncDicomSeriesImagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>> AsyncDicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>>(AsyncDicomSeriesSeriesInstanceUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>> PrepareAsyncDicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>>(PrepareAsyncDicomSeriesSeriesInstanceUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>> AsyncDicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>>(AsyncDicomSeriesSeriesSOPClassUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>> PrepareAsyncDicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>>(PrepareAsyncDicomSeriesSeriesSOPClassUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>> AsyncDicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>>(AsyncDicomSeriesSeriesDescriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>> PrepareAsyncDicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>>(PrepareAsyncDicomSeriesSeriesDescriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesModalityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesModalityResponse>> AsyncDicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesModalityResponse>>(AsyncDicomSeriesModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesModalityResponse>> PrepareAsyncDicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesModalityResponse>>(PrepareAsyncDicomSeriesModalityRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNameResponse>> AsyncDicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNameResponse>>(AsyncDicomSeriesNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNameResponse>> PrepareAsyncDicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNameResponse>>(PrepareAsyncDicomSeriesNameRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesDateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesDateResponse>> AsyncDicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesDateResponse>>(AsyncDicomSeriesDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesDateResponse>> PrepareAsyncDicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesDateResponse>>(PrepareAsyncDicomSeriesDateRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>> AsyncDicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>>(AsyncDicomSeriesNumberOfImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>> PrepareAsyncDicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>>(PrepareAsyncDicomSeriesNumberOfImagesRaw(context, request, cq));
    }
    // DicomStudy messages
    virtual ::grpc::Status DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPathsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPathsResponse>> AsyncDicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPathsResponse>>(AsyncDicomStudyPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPathsResponse>> PrepareAsyncDicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPathsResponse>>(PrepareAsyncDicomStudyPathsRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyImagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyImagesResponse>> AsyncDicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyImagesResponse>>(AsyncDicomStudyImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyImagesResponse>> PrepareAsyncDicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyImagesResponse>>(PrepareAsyncDicomStudyImagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyModalitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalitiesResponse>> AsyncDicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalitiesResponse>>(AsyncDicomStudyModalitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalitiesResponse>> PrepareAsyncDicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalitiesResponse>>(PrepareAsyncDicomStudyModalitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNoFilesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesResponse>> AsyncDicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesResponse>>(AsyncDicomStudyNoFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesResponse>> PrepareAsyncDicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesResponse>>(PrepareAsyncDicomStudyNoFilesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyRawNoFilesResponse>> AsyncDicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyRawNoFilesResponse>>(AsyncDicomStudyRawNoFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyRawNoFilesResponse>> PrepareAsyncDicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyRawNoFilesResponse>>(PrepareAsyncDicomStudyRawNoFilesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>> AsyncDicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>>(AsyncDicomStudyNoFilesExcludingMultiFramesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>> PrepareAsyncDicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>>(PrepareAsyncDicomStudyNoFilesExcludingMultiFramesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNumberOfImagesResponse>> AsyncDicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNumberOfImagesResponse>>(AsyncDicomStudyNumberOfImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNumberOfImagesResponse>> PrepareAsyncDicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNumberOfImagesResponse>>(PrepareAsyncDicomStudyNumberOfImagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudySeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudySeriesResponse>> AsyncDicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudySeriesResponse>>(AsyncDicomStudySeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudySeriesResponse>> PrepareAsyncDicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudySeriesResponse>>(PrepareAsyncDicomStudySeriesRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNameResponse>> AsyncDicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNameResponse>>(AsyncDicomStudyNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNameResponse>> PrepareAsyncDicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNameResponse>>(PrepareAsyncDicomStudyNameRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateResponse>> AsyncDicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateResponse>>(AsyncDicomStudyDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateResponse>> PrepareAsyncDicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateResponse>>(PrepareAsyncDicomStudyDateRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateAddedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateAddedResponse>> AsyncDicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateAddedResponse>>(AsyncDicomStudyDateAddedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateAddedResponse>> PrepareAsyncDicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateAddedResponse>>(PrepareAsyncDicomStudyDateAddedRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateOfBirthResponse>> AsyncDicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateOfBirthResponse>>(AsyncDicomStudyDateOfBirthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateOfBirthResponse>> PrepareAsyncDicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateOfBirthResponse>>(PrepareAsyncDicomStudyDateOfBirthRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyInstitutionNameResponse>> AsyncDicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyInstitutionNameResponse>>(AsyncDicomStudyInstitutionNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyInstitutionNameResponse>> PrepareAsyncDicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyInstitutionNameResponse>>(PrepareAsyncDicomStudyInstitutionNameRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyModalityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalityResponse>> AsyncDicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalityResponse>>(AsyncDicomStudyModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalityResponse>> PrepareAsyncDicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalityResponse>>(PrepareAsyncDicomStudyModalityRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientIDResponse>> AsyncDicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientIDResponse>>(AsyncDicomStudyPatientIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientIDResponse>> PrepareAsyncDicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientIDResponse>>(PrepareAsyncDicomStudyPatientIDRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientUIDResponse>> AsyncDicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientUIDResponse>>(AsyncDicomStudyPatientUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientUIDResponse>> PrepareAsyncDicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientUIDResponse>>(PrepareAsyncDicomStudyPatientUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientSexResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientSexResponse>> AsyncDicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientSexResponse>>(AsyncDicomStudyPatientSexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientSexResponse>> PrepareAsyncDicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientSexResponse>>(PrepareAsyncDicomStudyPatientSexRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>> AsyncDicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>>(AsyncDicomStudyPerformingPhysicianRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>> PrepareAsyncDicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>>(PrepareAsyncDicomStudyPerformingPhysicianRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyReferringPhysicianResponse>> AsyncDicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyReferringPhysicianResponse>>(AsyncDicomStudyReferringPhysicianRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyReferringPhysicianResponse>> PrepareAsyncDicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyReferringPhysicianResponse>>(PrepareAsyncDicomStudyReferringPhysicianRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>> AsyncDicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>>(AsyncDicomStudyStudyInstanceUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>> PrepareAsyncDicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>>(PrepareAsyncDicomStudyStudyInstanceUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyStudyNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyNameResponse>> AsyncDicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyNameResponse>>(AsyncDicomStudyStudyNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyNameResponse>> PrepareAsyncDicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyNameResponse>>(PrepareAsyncDicomStudyStudyNameRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // OsiriX messages
      virtual void OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ROI messages
      virtual void ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ROIVolume messages
      virtual void ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DCMPix messages
      virtual void DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // VRController messages
      virtual void VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ViewerController messages
      virtual void ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BrowserController messages
      virtual void BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DicomImage messages
      virtual void DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DicomSeries messages
      virtual void DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DicomStudy messages
      virtual void DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixCurrentBrowserResponse>* AsyncOsirixCurrentBrowserRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixCurrentBrowserResponse>* PrepareAsyncOsirixCurrentBrowserRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostViewerResponse>* AsyncOsirixFrontmostViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostViewerResponse>* PrepareAsyncOsirixFrontmostViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* AsyncOsirixDisplayed2DViewersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* PrepareAsyncOsirixDisplayed2DViewersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* AsyncOsirixFrontmostVRControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* PrepareAsyncOsirixFrontmostVRControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* AsyncOsirixDisplayedVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* PrepareAsyncOsirixDisplayedVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIFlipHorizontallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIFlipHorizontallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIFlipVerticallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIFlipVerticallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIAreaResponse>* AsyncROIAreaRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIAreaResponse>* PrepareAsyncROIAreaRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROICentroidResponse>* AsyncROICentroidRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROICentroidResponse>* PrepareAsyncROICentroidRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIRotateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIRotateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIMoveRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIMoveRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPixResponse>* AsyncROIPixRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPixResponse>* PrepareAsyncROIPixRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROINameResponse>* AsyncROINameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROINameResponse>* PrepareAsyncROINameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIITypeResponse>* AsyncROIITypeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIITypeResponse>* PrepareAsyncROIITypeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROISetNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROISetNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIColorResponse>* AsyncROIColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIColorResponse>* PrepareAsyncROIColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROISetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROISetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIOpacityResponse>* AsyncROIOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIOpacityResponse>* PrepareAsyncROIOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROISetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROISetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIThicknessResponse>* AsyncROIThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIThicknessResponse>* PrepareAsyncROIThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROISetThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROISetThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPointsResponse>* AsyncROIPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIPointsResponse>* PrepareAsyncROIPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROISetPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROISetPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeTextureResponse>* AsyncROIVolumeTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeTextureResponse>* PrepareAsyncROIVolumeTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIVolumeSetTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVolumeResponse>* AsyncROIVolumeVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVolumeResponse>* PrepareAsyncROIVolumeVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeColorResponse>* AsyncROIVolumeColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeColorResponse>* PrepareAsyncROIVolumeColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIVolumeSetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeOpacityResponse>* AsyncROIVolumeOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeOpacityResponse>* PrepareAsyncROIVolumeOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIVolumeSetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeFactorResponse>* AsyncROIVolumeFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeFactorResponse>* PrepareAsyncROIVolumeFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncROIVolumeSetFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeNameResponse>* AsyncROIVolumeNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeNameResponse>* PrepareAsyncROIVolumeNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVisibleResponse>* AsyncROIVolumeVisibleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ROIVolumeVisibleResponse>* PrepareAsyncROIVolumeVisibleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncDCMPixConvertToRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncDCMPixConvertToRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncDCMPixConvertToBWRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncDCMPixConvertToBWRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixIsRGBResponse>* AsyncDCMPixIsRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixIsRGBResponse>* PrepareAsyncDCMPixIsRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixComputeROIResponse>* AsyncDCMPixComputeROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixComputeROIResponse>* PrepareAsyncDCMPixComputeROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixROIValuesResponse>* AsyncDCMPixROIValuesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixROIValuesResponse>* PrepareAsyncDCMPixROIValuesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixShapeResponse>* AsyncDCMPixShapeRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixShapeResponse>* PrepareAsyncDCMPixShapeRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSpacingResponse>* AsyncDCMPixSpacingRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSpacingResponse>* PrepareAsyncDCMPixSpacingRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOriginResponse>* AsyncDCMPixOriginRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOriginResponse>* PrepareAsyncDCMPixOriginRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOrientationResponse>* AsyncDCMPixOrientationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixOrientationResponse>* PrepareAsyncDCMPixOrientationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSliceLocationResponse>* AsyncDCMPixSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSliceLocationResponse>* PrepareAsyncDCMPixSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSourceFileResponse>* AsyncDCMPixSourceFileRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixSourceFileResponse>* PrepareAsyncDCMPixSourceFileRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixImageResponse>* AsyncDCMPixImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixImageResponse>* PrepareAsyncDCMPixImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncDCMPixSetImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncDCMPixSetImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixGetMapFromROIResponse>* AsyncDCMPixGetMapFromROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixGetMapFromROIResponse>* PrepareAsyncDCMPixGetMapFromROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomImageResponse>* AsyncDCMPixDicomImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomImageResponse>* PrepareAsyncDCMPixDicomImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomSeriesResponse>* AsyncDCMPixDicomSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomSeriesResponse>* PrepareAsyncDCMPixDicomSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomStudyResponse>* AsyncDCMPixDicomStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DCMPixDicomStudyResponse>* PrepareAsyncDCMPixDicomStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerViewer2DResponse>* AsyncVRControllerViewer2DRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerViewer2DResponse>* PrepareAsyncVRControllerViewer2DRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerBlendingControllerResponse>* AsyncVRControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerBlendingControllerResponse>* PrepareAsyncVRControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerStyleResponse>* AsyncVRControllerStyleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerStyleResponse>* PrepareAsyncVRControllerStyleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerTitleResponse>* AsyncVRControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerTitleResponse>* PrepareAsyncVRControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerROIVolumesResponse>* AsyncVRControllerROIVolumesRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerROIVolumesResponse>* PrepareAsyncVRControllerROIVolumesRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerRenderingModeResponse>* AsyncVRControllerRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerRenderingModeResponse>* PrepareAsyncVRControllerRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncVRControllerSetRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncVRControllerSetRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerWLWWResponse>* AsyncVRControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::VRControllerWLWWResponse>* PrepareAsyncVRControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncVRControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncVRControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncVRControllerHideROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncVRControllerHideROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncVRControllerDisplayROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncVRControllerDisplayROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncVRControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncVRControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerCloseViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerCloseViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerPixListResponse>* AsyncViewerControllerPixListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerPixListResponse>* PrepareAsyncViewerControllerPixListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIListResponse>* AsyncViewerControllerROIListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIListResponse>* PrepareAsyncViewerControllerROIListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerNewROIResponse>* AsyncViewerControllerNewROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerNewROIResponse>* PrepareAsyncViewerControllerNewROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerCurDCMResponse>* AsyncViewerControllerCurDCMRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerCurDCMResponse>* PrepareAsyncViewerControllerCurDCMRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* AsyncViewerControllerROIsWithNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* PrepareAsyncViewerControllerROIsWithNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* AsyncViewerControllerSelectedROIsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* PrepareAsyncViewerControllerSelectedROIsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* AsyncViewerControllerIsDataVolumicRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* PrepareAsyncViewerControllerIsDataVolumicRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerCopyViewerWindowRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerCopyViewerWindowRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerResampleViewerControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerResampleViewerControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* AsyncViewerControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* PrepareAsyncViewerControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerVRControllersResponse>* AsyncViewerControllerVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerVRControllersResponse>* PrepareAsyncViewerControllerVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerTitleResponse>* AsyncViewerControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerTitleResponse>* PrepareAsyncViewerControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerModalityResponse>* AsyncViewerControllerModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerModalityResponse>* PrepareAsyncViewerControllerModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMovieIdxResponse>* AsyncViewerControllerMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMovieIdxResponse>* PrepareAsyncViewerControllerMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerSetMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerSetMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* AsyncViewerControllerMaxMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* PrepareAsyncViewerControllerMaxMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIdxResponse>* AsyncViewerControllerIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerIdxResponse>* PrepareAsyncViewerControllerIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerSetIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerSetIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerWLWWResponse>* AsyncViewerControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerWLWWResponse>* PrepareAsyncViewerControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncViewerControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncViewerControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* AsyncViewerControllerOpenVRViewerForModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* PrepareAsyncViewerControllerOpenVRViewerForModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* AsyncBrowserControllerDatabaseSelectionRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* PrepareAsyncBrowserControllerDatabaseSelectionRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* AsyncBrowserControllerCopyFilesIfNeededRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::Response>* PrepareAsyncBrowserControllerCopyFilesIfNeededRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageWidthResponse>* AsyncDicomImageWidthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageWidthResponse>* PrepareAsyncDicomImageWidthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageHeightResponse>* AsyncDicomImageHeightRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageHeightResponse>* PrepareAsyncDicomImageHeightRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* AsyncDicomImageSOPInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* PrepareAsyncDicomImageSOPInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageCompletePathResponse>* AsyncDicomImageCompletePathRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageCompletePathResponse>* PrepareAsyncDicomImageCompletePathRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageDateResponse>* AsyncDicomImageDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageDateResponse>* PrepareAsyncDicomImageDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageNumberOfFramesResponse>* AsyncDicomImageNumberOfFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageNumberOfFramesResponse>* PrepareAsyncDicomImageNumberOfFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageModalityResponse>* AsyncDicomImageModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageModalityResponse>* PrepareAsyncDicomImageModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSeriesResponse>* AsyncDicomImageSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSeriesResponse>* PrepareAsyncDicomImageSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSliceLocationResponse>* AsyncDicomImageSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageSliceLocationResponse>* PrepareAsyncDicomImageSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageInstanceNumberResponse>* AsyncDicomImageInstanceNumberRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomImageInstanceNumberResponse>* PrepareAsyncDicomImageInstanceNumberRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPathsResponse>* AsyncDicomSeriesPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPathsResponse>* PrepareAsyncDicomSeriesPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* AsyncDicomSeriesPreviousSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* PrepareAsyncDicomSeriesPreviousSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNextSeriesResponse>* AsyncDicomSeriesNextSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNextSeriesResponse>* PrepareAsyncDicomSeriesNextSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSortedImagesResponse>* AsyncDicomSeriesSortedImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSortedImagesResponse>* PrepareAsyncDicomSeriesSortedImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesStudyResponse>* AsyncDicomSeriesStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesStudyResponse>* PrepareAsyncDicomSeriesStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesImagesResponse>* AsyncDicomSeriesImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesImagesResponse>* PrepareAsyncDicomSeriesImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* AsyncDicomSeriesSeriesInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* PrepareAsyncDicomSeriesSeriesInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* AsyncDicomSeriesSeriesSOPClassUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* PrepareAsyncDicomSeriesSeriesSOPClassUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* AsyncDicomSeriesSeriesDescriptionRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* PrepareAsyncDicomSeriesSeriesDescriptionRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesModalityResponse>* AsyncDicomSeriesModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesModalityResponse>* PrepareAsyncDicomSeriesModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNameResponse>* AsyncDicomSeriesNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNameResponse>* PrepareAsyncDicomSeriesNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesDateResponse>* AsyncDicomSeriesDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesDateResponse>* PrepareAsyncDicomSeriesDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* AsyncDicomSeriesNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* PrepareAsyncDicomSeriesNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPathsResponse>* AsyncDicomStudyPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPathsResponse>* PrepareAsyncDicomStudyPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyImagesResponse>* AsyncDicomStudyImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyImagesResponse>* PrepareAsyncDicomStudyImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalitiesResponse>* AsyncDicomStudyModalitiesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalitiesResponse>* PrepareAsyncDicomStudyModalitiesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesResponse>* AsyncDicomStudyNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesResponse>* PrepareAsyncDicomStudyNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyRawNoFilesResponse>* AsyncDicomStudyRawNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyRawNoFilesResponse>* PrepareAsyncDicomStudyRawNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* AsyncDicomStudyNoFilesExcludingMultiFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* PrepareAsyncDicomStudyNoFilesExcludingMultiFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* AsyncDicomStudyNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* PrepareAsyncDicomStudyNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudySeriesResponse>* AsyncDicomStudySeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudySeriesResponse>* PrepareAsyncDicomStudySeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNameResponse>* AsyncDicomStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyNameResponse>* PrepareAsyncDicomStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateResponse>* AsyncDicomStudyDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateResponse>* PrepareAsyncDicomStudyDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateAddedResponse>* AsyncDicomStudyDateAddedRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateAddedResponse>* PrepareAsyncDicomStudyDateAddedRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateOfBirthResponse>* AsyncDicomStudyDateOfBirthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyDateOfBirthResponse>* PrepareAsyncDicomStudyDateOfBirthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyInstitutionNameResponse>* AsyncDicomStudyInstitutionNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyInstitutionNameResponse>* PrepareAsyncDicomStudyInstitutionNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalityResponse>* AsyncDicomStudyModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyModalityResponse>* PrepareAsyncDicomStudyModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientIDResponse>* AsyncDicomStudyPatientIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientIDResponse>* PrepareAsyncDicomStudyPatientIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientUIDResponse>* AsyncDicomStudyPatientUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientUIDResponse>* PrepareAsyncDicomStudyPatientUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientSexResponse>* AsyncDicomStudyPatientSexRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPatientSexResponse>* PrepareAsyncDicomStudyPatientSexRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* AsyncDicomStudyPerformingPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* PrepareAsyncDicomStudyPerformingPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* AsyncDicomStudyReferringPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* PrepareAsyncDicomStudyReferringPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* AsyncDicomStudyStudyInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* PrepareAsyncDicomStudyStudyInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyNameResponse>* AsyncDicomStudyStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::osirixgrpc::DicomStudyStudyNameResponse>* PrepareAsyncDicomStudyStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixCurrentBrowserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>> AsyncOsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>>(AsyncOsirixCurrentBrowserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>> PrepareAsyncOsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>>(PrepareAsyncOsirixCurrentBrowserRaw(context, request, cq));
    }
    ::grpc::Status OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixFrontmostViewerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>> AsyncOsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>>(AsyncOsirixFrontmostViewerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>> PrepareAsyncOsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>>(PrepareAsyncOsirixFrontmostViewerRaw(context, request, cq));
    }
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>> AsyncOsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>>(AsyncOsirixDisplayed2DViewersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>> PrepareAsyncOsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>>(PrepareAsyncOsirixDisplayed2DViewersRaw(context, request, cq));
    }
    ::grpc::Status OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>> AsyncOsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>>(AsyncOsirixFrontmostVRControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>> PrepareAsyncOsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>>(PrepareAsyncOsirixFrontmostVRControllerRaw(context, request, cq));
    }
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>> AsyncOsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>>(AsyncOsirixDisplayedVRControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>> PrepareAsyncOsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>>(PrepareAsyncOsirixDisplayedVRControllersRaw(context, request, cq));
    }
    ::grpc::Status ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIFlipHorizontallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIFlipHorizontallyRaw(context, request, cq));
    }
    ::grpc::Status ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIFlipVerticallyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIFlipVerticallyRaw(context, request, cq));
    }
    ::grpc::Status ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIAreaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>> AsyncROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>>(AsyncROIAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>> PrepareAsyncROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>>(PrepareAsyncROIAreaRaw(context, request, cq));
    }
    ::grpc::Status ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROICentroidResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>> AsyncROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>>(AsyncROICentroidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>> PrepareAsyncROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>>(PrepareAsyncROICentroidRaw(context, request, cq));
    }
    ::grpc::Status ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIRotateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIRotateRaw(context, request, cq));
    }
    ::grpc::Status ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIMoveRaw(context, request, cq));
    }
    ::grpc::Status ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIPixResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>> AsyncROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>>(AsyncROIPixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>> PrepareAsyncROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>>(PrepareAsyncROIPixRaw(context, request, cq));
    }
    ::grpc::Status ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROINameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>> AsyncROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>>(AsyncROINameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>> PrepareAsyncROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>>(PrepareAsyncROINameRaw(context, request, cq));
    }
    ::grpc::Status ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIITypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>> AsyncROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>>(AsyncROIITypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>> PrepareAsyncROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>>(PrepareAsyncROIITypeRaw(context, request, cq));
    }
    ::grpc::Status ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROISetNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROISetNameRaw(context, request, cq));
    }
    ::grpc::Status ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIColorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>> AsyncROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>>(AsyncROIColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>> PrepareAsyncROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>>(PrepareAsyncROIColorRaw(context, request, cq));
    }
    ::grpc::Status ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROISetColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROISetColorRaw(context, request, cq));
    }
    ::grpc::Status ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIOpacityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>> AsyncROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>>(AsyncROIOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>> PrepareAsyncROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>>(PrepareAsyncROIOpacityRaw(context, request, cq));
    }
    ::grpc::Status ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROISetOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROISetOpacityRaw(context, request, cq));
    }
    ::grpc::Status ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIThicknessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>> AsyncROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>>(AsyncROIThicknessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>> PrepareAsyncROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>>(PrepareAsyncROIThicknessRaw(context, request, cq));
    }
    ::grpc::Status ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROISetThicknessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROISetThicknessRaw(context, request, cq));
    }
    ::grpc::Status ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>> AsyncROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>>(AsyncROIPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>> PrepareAsyncROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>>(PrepareAsyncROIPointsRaw(context, request, cq));
    }
    ::grpc::Status ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROISetPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROISetPointsRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeTextureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>> AsyncROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>>(AsyncROIVolumeTextureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>> PrepareAsyncROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>>(PrepareAsyncROIVolumeTextureRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIVolumeSetTextureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetTextureRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeVolumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>> AsyncROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>>(AsyncROIVolumeVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>> PrepareAsyncROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>>(PrepareAsyncROIVolumeVolumeRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeColorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>> AsyncROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>>(AsyncROIVolumeColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>> PrepareAsyncROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>>(PrepareAsyncROIVolumeColorRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIVolumeSetColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetColorRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeOpacityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>> AsyncROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>>(AsyncROIVolumeOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>> PrepareAsyncROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>>(PrepareAsyncROIVolumeOpacityRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIVolumeSetOpacityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetOpacityRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeFactorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>> AsyncROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>>(AsyncROIVolumeFactorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>> PrepareAsyncROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>>(PrepareAsyncROIVolumeFactorRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncROIVolumeSetFactorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncROIVolumeSetFactorRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>> AsyncROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>>(AsyncROIVolumeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>> PrepareAsyncROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>>(PrepareAsyncROIVolumeNameRaw(context, request, cq));
    }
    ::grpc::Status ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeVisibleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>> AsyncROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>>(AsyncROIVolumeVisibleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>> PrepareAsyncROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>>(PrepareAsyncROIVolumeVisibleRaw(context, request, cq));
    }
    ::grpc::Status DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncDCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncDCMPixConvertToRGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncDCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncDCMPixConvertToRGBRaw(context, request, cq));
    }
    ::grpc::Status DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncDCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncDCMPixConvertToBWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncDCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncDCMPixConvertToBWRaw(context, request, cq));
    }
    ::grpc::Status DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixIsRGBResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>> AsyncDCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>>(AsyncDCMPixIsRGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>> PrepareAsyncDCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>>(PrepareAsyncDCMPixIsRGBRaw(context, request, cq));
    }
    ::grpc::Status DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::osirixgrpc::DCMPixComputeROIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>> AsyncDCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>>(AsyncDCMPixComputeROIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>> PrepareAsyncDCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>>(PrepareAsyncDCMPixComputeROIRaw(context, request, cq));
    }
    ::grpc::Status DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::osirixgrpc::DCMPixROIValuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>> AsyncDCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>>(AsyncDCMPixROIValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>> PrepareAsyncDCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>>(PrepareAsyncDCMPixROIValuesRaw(context, request, cq));
    }
    ::grpc::Status DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixShapeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>> AsyncDCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>>(AsyncDCMPixShapeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>> PrepareAsyncDCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>>(PrepareAsyncDCMPixShapeRaw(context, request, cq));
    }
    ::grpc::Status DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSpacingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>> AsyncDCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>>(AsyncDCMPixSpacingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>> PrepareAsyncDCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>>(PrepareAsyncDCMPixSpacingRaw(context, request, cq));
    }
    ::grpc::Status DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixOriginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>> AsyncDCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>>(AsyncDCMPixOriginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>> PrepareAsyncDCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>>(PrepareAsyncDCMPixOriginRaw(context, request, cq));
    }
    ::grpc::Status DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixOrientationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>> AsyncDCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>>(AsyncDCMPixOrientationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>> PrepareAsyncDCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>>(PrepareAsyncDCMPixOrientationRaw(context, request, cq));
    }
    ::grpc::Status DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSliceLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>> AsyncDCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>>(AsyncDCMPixSliceLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>> PrepareAsyncDCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>>(PrepareAsyncDCMPixSliceLocationRaw(context, request, cq));
    }
    ::grpc::Status DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSourceFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>> AsyncDCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>>(AsyncDCMPixSourceFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>> PrepareAsyncDCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>>(PrepareAsyncDCMPixSourceFileRaw(context, request, cq));
    }
    ::grpc::Status DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>> AsyncDCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>>(AsyncDCMPixImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>> PrepareAsyncDCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>>(PrepareAsyncDCMPixImageRaw(context, request, cq));
    }
    ::grpc::Status DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncDCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncDCMPixSetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncDCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncDCMPixSetImageRaw(context, request, cq));
    }
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>> AsyncDCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>>(AsyncDCMPixGetMapFromROIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>> PrepareAsyncDCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>>(PrepareAsyncDCMPixGetMapFromROIRaw(context, request, cq));
    }
    ::grpc::Status DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>> AsyncDCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>>(AsyncDCMPixDicomImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>> PrepareAsyncDCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>>(PrepareAsyncDCMPixDicomImageRaw(context, request, cq));
    }
    ::grpc::Status DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomSeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>> AsyncDCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>>(AsyncDCMPixDicomSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>> PrepareAsyncDCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>>(PrepareAsyncDCMPixDicomSeriesRaw(context, request, cq));
    }
    ::grpc::Status DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomStudyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>> AsyncDCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>>(AsyncDCMPixDicomStudyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>> PrepareAsyncDCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>>(PrepareAsyncDCMPixDicomStudyRaw(context, request, cq));
    }
    ::grpc::Status VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerViewer2DResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>> AsyncVRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>>(AsyncVRControllerViewer2DRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>> PrepareAsyncVRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>>(PrepareAsyncVRControllerViewer2DRaw(context, request, cq));
    }
    ::grpc::Status VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerBlendingControllerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>> AsyncVRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>>(AsyncVRControllerBlendingControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>> PrepareAsyncVRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>>(PrepareAsyncVRControllerBlendingControllerRaw(context, request, cq));
    }
    ::grpc::Status VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerStyleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>> AsyncVRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>>(AsyncVRControllerStyleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>> PrepareAsyncVRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>>(PrepareAsyncVRControllerStyleRaw(context, request, cq));
    }
    ::grpc::Status VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerTitleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>> AsyncVRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>>(AsyncVRControllerTitleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>> PrepareAsyncVRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>>(PrepareAsyncVRControllerTitleRaw(context, request, cq));
    }
    ::grpc::Status VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerROIVolumesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>> AsyncVRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>>(AsyncVRControllerROIVolumesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>> PrepareAsyncVRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>>(PrepareAsyncVRControllerROIVolumesRaw(context, request, cq));
    }
    ::grpc::Status VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerRenderingModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>> AsyncVRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>>(AsyncVRControllerRenderingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>> PrepareAsyncVRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>>(PrepareAsyncVRControllerRenderingModeRaw(context, request, cq));
    }
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncVRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncVRControllerSetRenderingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncVRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncVRControllerSetRenderingModeRaw(context, request, cq));
    }
    ::grpc::Status VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerWLWWResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>> AsyncVRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>>(AsyncVRControllerWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>> PrepareAsyncVRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>>(PrepareAsyncVRControllerWLWWRaw(context, request, cq));
    }
    ::grpc::Status VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncVRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncVRControllerSetWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncVRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncVRControllerSetWLWWRaw(context, request, cq));
    }
    ::grpc::Status VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncVRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncVRControllerHideROIVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncVRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncVRControllerHideROIVolumeRaw(context, request, cq));
    }
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncVRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncVRControllerDisplayROIVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncVRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncVRControllerDisplayROIVolumeRaw(context, request, cq));
    }
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncVRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncVRControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncVRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncVRControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerCloseViewerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerCloseViewerRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::osirixgrpc::ViewerControllerPixListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>> AsyncViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>>(AsyncViewerControllerPixListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>> PrepareAsyncViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>>(PrepareAsyncViewerControllerPixListRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerNeedsDisplayUpdateRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::osirixgrpc::ViewerControllerROIListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>> AsyncViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>>(AsyncViewerControllerROIListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>> PrepareAsyncViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>>(PrepareAsyncViewerControllerROIListRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::osirixgrpc::ViewerControllerNewROIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>> AsyncViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>>(AsyncViewerControllerNewROIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>> PrepareAsyncViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>>(PrepareAsyncViewerControllerNewROIRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerCurDCMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>> AsyncViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>>(AsyncViewerControllerCurDCMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>> PrepareAsyncViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>>(PrepareAsyncViewerControllerCurDCMRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>> AsyncViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>>(AsyncViewerControllerROIsWithNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>> PrepareAsyncViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>>(PrepareAsyncViewerControllerROIsWithNameRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>> AsyncViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>>(AsyncViewerControllerSelectedROIsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>> PrepareAsyncViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>>(PrepareAsyncViewerControllerSelectedROIsRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>> AsyncViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>>(AsyncViewerControllerIsDataVolumicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>> PrepareAsyncViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>>(PrepareAsyncViewerControllerIsDataVolumicRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerCopyViewerWindowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerCopyViewerWindowRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerResampleViewerControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerResampleViewerControllerRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>> AsyncViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>>(AsyncViewerControllerBlendingControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>> PrepareAsyncViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>>(PrepareAsyncViewerControllerBlendingControllerRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerVRControllersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>> AsyncViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>>(AsyncViewerControllerVRControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>> PrepareAsyncViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>>(PrepareAsyncViewerControllerVRControllersRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerTitleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>> AsyncViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>>(AsyncViewerControllerTitleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>> PrepareAsyncViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>>(PrepareAsyncViewerControllerTitleRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerModalityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>> AsyncViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>>(AsyncViewerControllerModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>> PrepareAsyncViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>>(PrepareAsyncViewerControllerModalityRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>> AsyncViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>>(AsyncViewerControllerMovieIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>> PrepareAsyncViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>>(PrepareAsyncViewerControllerMovieIdxRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerSetMovieIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerSetMovieIdxRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>> AsyncViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>>(AsyncViewerControllerMaxMovieIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>> PrepareAsyncViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>>(PrepareAsyncViewerControllerMaxMovieIdxRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerIdxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>> AsyncViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>>(AsyncViewerControllerIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>> PrepareAsyncViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>>(PrepareAsyncViewerControllerIdxRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerSetIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerSetIdxRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerWLWWResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>> AsyncViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>>(AsyncViewerControllerWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>> PrepareAsyncViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>>(PrepareAsyncViewerControllerWLWWRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncViewerControllerSetWLWWRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncViewerControllerSetWLWWRaw(context, request, cq));
    }
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>> AsyncViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>>(AsyncViewerControllerOpenVRViewerForModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>> PrepareAsyncViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>>(PrepareAsyncViewerControllerOpenVRViewerForModeRaw(context, request, cq));
    }
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>> AsyncBrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>>(AsyncBrowserControllerDatabaseSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>> PrepareAsyncBrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>>(PrepareAsyncBrowserControllerDatabaseSelectionRaw(context, request, cq));
    }
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::osirixgrpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> AsyncBrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(AsyncBrowserControllerCopyFilesIfNeededRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>> PrepareAsyncBrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>>(PrepareAsyncBrowserControllerCopyFilesIfNeededRaw(context, request, cq));
    }
    ::grpc::Status DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageWidthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>> AsyncDicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>>(AsyncDicomImageWidthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>> PrepareAsyncDicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>>(PrepareAsyncDicomImageWidthRaw(context, request, cq));
    }
    ::grpc::Status DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageHeightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>> AsyncDicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>>(AsyncDicomImageHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>> PrepareAsyncDicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>>(PrepareAsyncDicomImageHeightRaw(context, request, cq));
    }
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>> AsyncDicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>>(AsyncDicomImageSOPInstanceUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>> PrepareAsyncDicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>>(PrepareAsyncDicomImageSOPInstanceUIDRaw(context, request, cq));
    }
    ::grpc::Status DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageCompletePathResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>> AsyncDicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>>(AsyncDicomImageCompletePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>> PrepareAsyncDicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>>(PrepareAsyncDicomImageCompletePathRaw(context, request, cq));
    }
    ::grpc::Status DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageDateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>> AsyncDicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>>(AsyncDicomImageDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>> PrepareAsyncDicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>>(PrepareAsyncDicomImageDateRaw(context, request, cq));
    }
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>> AsyncDicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>>(AsyncDicomImageNumberOfFramesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>> PrepareAsyncDicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>>(PrepareAsyncDicomImageNumberOfFramesRaw(context, request, cq));
    }
    ::grpc::Status DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageModalityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>> AsyncDicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>>(AsyncDicomImageModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>> PrepareAsyncDicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>>(PrepareAsyncDicomImageModalityRaw(context, request, cq));
    }
    ::grpc::Status DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>> AsyncDicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>>(AsyncDicomImageSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>> PrepareAsyncDicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>>(PrepareAsyncDicomImageSeriesRaw(context, request, cq));
    }
    ::grpc::Status DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSliceLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>> AsyncDicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>>(AsyncDicomImageSliceLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>> PrepareAsyncDicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>>(PrepareAsyncDicomImageSliceLocationRaw(context, request, cq));
    }
    ::grpc::Status DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageInstanceNumberResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>> AsyncDicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>>(AsyncDicomImageInstanceNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>> PrepareAsyncDicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>>(PrepareAsyncDicomImageInstanceNumberRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesPathsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>> AsyncDicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>>(AsyncDicomSeriesPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>> PrepareAsyncDicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>>(PrepareAsyncDicomSeriesPathsRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>> AsyncDicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>>(AsyncDicomSeriesPreviousSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>> PrepareAsyncDicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>>(PrepareAsyncDicomSeriesPreviousSeriesRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>> AsyncDicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>>(AsyncDicomSeriesNextSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>> PrepareAsyncDicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>>(PrepareAsyncDicomSeriesNextSeriesRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>> AsyncDicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>>(AsyncDicomSeriesSortedImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>> PrepareAsyncDicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>>(PrepareAsyncDicomSeriesSortedImagesRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesStudyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>> AsyncDicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>>(AsyncDicomSeriesStudyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>> PrepareAsyncDicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>>(PrepareAsyncDicomSeriesStudyRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesImagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>> AsyncDicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>>(AsyncDicomSeriesImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>> PrepareAsyncDicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>>(PrepareAsyncDicomSeriesImagesRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>> AsyncDicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>>(AsyncDicomSeriesSeriesInstanceUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>> PrepareAsyncDicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>>(PrepareAsyncDicomSeriesSeriesInstanceUIDRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>> AsyncDicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>>(AsyncDicomSeriesSeriesSOPClassUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>> PrepareAsyncDicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>>(PrepareAsyncDicomSeriesSeriesSOPClassUIDRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>> AsyncDicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>>(AsyncDicomSeriesSeriesDescriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>> PrepareAsyncDicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>>(PrepareAsyncDicomSeriesSeriesDescriptionRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesModalityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>> AsyncDicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>>(AsyncDicomSeriesModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>> PrepareAsyncDicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>>(PrepareAsyncDicomSeriesModalityRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>> AsyncDicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>>(AsyncDicomSeriesNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>> PrepareAsyncDicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>>(PrepareAsyncDicomSeriesNameRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesDateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>> AsyncDicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>>(AsyncDicomSeriesDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>> PrepareAsyncDicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>>(PrepareAsyncDicomSeriesDateRaw(context, request, cq));
    }
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>> AsyncDicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>>(AsyncDicomSeriesNumberOfImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>> PrepareAsyncDicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>>(PrepareAsyncDicomSeriesNumberOfImagesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPathsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>> AsyncDicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>>(AsyncDicomStudyPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>> PrepareAsyncDicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>>(PrepareAsyncDicomStudyPathsRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyImagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>> AsyncDicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>>(AsyncDicomStudyImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>> PrepareAsyncDicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>>(PrepareAsyncDicomStudyImagesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyModalitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>> AsyncDicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>>(AsyncDicomStudyModalitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>> PrepareAsyncDicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>>(PrepareAsyncDicomStudyModalitiesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNoFilesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>> AsyncDicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>>(AsyncDicomStudyNoFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>> PrepareAsyncDicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>>(PrepareAsyncDicomStudyNoFilesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>> AsyncDicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>>(AsyncDicomStudyRawNoFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>> PrepareAsyncDicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>>(PrepareAsyncDicomStudyRawNoFilesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>> AsyncDicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>>(AsyncDicomStudyNoFilesExcludingMultiFramesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>> PrepareAsyncDicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>>(PrepareAsyncDicomStudyNoFilesExcludingMultiFramesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>> AsyncDicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>>(AsyncDicomStudyNumberOfImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>> PrepareAsyncDicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>>(PrepareAsyncDicomStudyNumberOfImagesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudySeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>> AsyncDicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>>(AsyncDicomStudySeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>> PrepareAsyncDicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>>(PrepareAsyncDicomStudySeriesRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>> AsyncDicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>>(AsyncDicomStudyNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>> PrepareAsyncDicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>>(PrepareAsyncDicomStudyNameRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>> AsyncDicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>>(AsyncDicomStudyDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>> PrepareAsyncDicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>>(PrepareAsyncDicomStudyDateRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateAddedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>> AsyncDicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>>(AsyncDicomStudyDateAddedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>> PrepareAsyncDicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>>(PrepareAsyncDicomStudyDateAddedRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>> AsyncDicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>>(AsyncDicomStudyDateOfBirthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>> PrepareAsyncDicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>>(PrepareAsyncDicomStudyDateOfBirthRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>> AsyncDicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>>(AsyncDicomStudyInstitutionNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>> PrepareAsyncDicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>>(PrepareAsyncDicomStudyInstitutionNameRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyModalityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>> AsyncDicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>>(AsyncDicomStudyModalityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>> PrepareAsyncDicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>>(PrepareAsyncDicomStudyModalityRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>> AsyncDicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>>(AsyncDicomStudyPatientIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>> PrepareAsyncDicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>>(PrepareAsyncDicomStudyPatientIDRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>> AsyncDicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>>(AsyncDicomStudyPatientUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>> PrepareAsyncDicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>>(PrepareAsyncDicomStudyPatientUIDRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientSexResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>> AsyncDicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>>(AsyncDicomStudyPatientSexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>> PrepareAsyncDicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>>(PrepareAsyncDicomStudyPatientSexRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>> AsyncDicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>>(AsyncDicomStudyPerformingPhysicianRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>> PrepareAsyncDicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>>(PrepareAsyncDicomStudyPerformingPhysicianRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>> AsyncDicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>>(AsyncDicomStudyReferringPhysicianRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>> PrepareAsyncDicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>>(PrepareAsyncDicomStudyReferringPhysicianRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>> AsyncDicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>>(AsyncDicomStudyStudyInstanceUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>> PrepareAsyncDicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>>(PrepareAsyncDicomStudyStudyInstanceUIDRaw(context, request, cq));
    }
    ::grpc::Status DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyStudyNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>> AsyncDicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>>(AsyncDicomStudyStudyNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>> PrepareAsyncDicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>>(PrepareAsyncDicomStudyStudyNameRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response, std::function<void(::grpc::Status)>) override;
      void OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response, std::function<void(::grpc::Status)>) override;
      void OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response, std::function<void(::grpc::Status)>) override;
      void OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response, std::function<void(::grpc::Status)>) override;
      void OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response, std::function<void(::grpc::Status)>) override;
      void OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response, std::function<void(::grpc::Status)>) override;
      void ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response, std::function<void(::grpc::Status)>) override;
      void ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response, std::function<void(::grpc::Status)>) override;
      void DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response, std::function<void(::grpc::Status)>) override;
      void VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response, std::function<void(::grpc::Status)>) override;
      void BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)>) override;
      void BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response, std::function<void(::grpc::Status)>) override;
      void DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>* AsyncOsirixCurrentBrowserRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>* PrepareAsyncOsirixCurrentBrowserRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>* AsyncOsirixFrontmostViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>* PrepareAsyncOsirixFrontmostViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* AsyncOsirixDisplayed2DViewersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* PrepareAsyncOsirixDisplayed2DViewersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* AsyncOsirixFrontmostVRControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* PrepareAsyncOsirixFrontmostVRControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* AsyncOsirixDisplayedVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* PrepareAsyncOsirixDisplayedVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIFlipHorizontallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIFlipHorizontallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIFlipVerticallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIFlipVerticallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>* AsyncROIAreaRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>* PrepareAsyncROIAreaRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>* AsyncROICentroidRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>* PrepareAsyncROICentroidRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIRotateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIRotateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIMoveRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIMoveRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>* AsyncROIPixRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>* PrepareAsyncROIPixRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>* AsyncROINameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>* PrepareAsyncROINameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>* AsyncROIITypeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>* PrepareAsyncROIITypeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROISetNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROISetNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>* AsyncROIColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>* PrepareAsyncROIColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROISetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROISetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>* AsyncROIOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>* PrepareAsyncROIOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROISetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROISetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>* AsyncROIThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>* PrepareAsyncROIThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROISetThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROISetThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>* AsyncROIPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>* PrepareAsyncROIPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROISetPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROISetPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>* AsyncROIVolumeTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>* PrepareAsyncROIVolumeTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIVolumeSetTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>* AsyncROIVolumeVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>* PrepareAsyncROIVolumeVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>* AsyncROIVolumeColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>* PrepareAsyncROIVolumeColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIVolumeSetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>* AsyncROIVolumeOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>* PrepareAsyncROIVolumeOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIVolumeSetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>* AsyncROIVolumeFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>* PrepareAsyncROIVolumeFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncROIVolumeSetFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncROIVolumeSetFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>* AsyncROIVolumeNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>* PrepareAsyncROIVolumeNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>* AsyncROIVolumeVisibleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>* PrepareAsyncROIVolumeVisibleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncDCMPixConvertToRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncDCMPixConvertToRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncDCMPixConvertToBWRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncDCMPixConvertToBWRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>* AsyncDCMPixIsRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>* PrepareAsyncDCMPixIsRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>* AsyncDCMPixComputeROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>* PrepareAsyncDCMPixComputeROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>* AsyncDCMPixROIValuesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>* PrepareAsyncDCMPixROIValuesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>* AsyncDCMPixShapeRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>* PrepareAsyncDCMPixShapeRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>* AsyncDCMPixSpacingRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>* PrepareAsyncDCMPixSpacingRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>* AsyncDCMPixOriginRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>* PrepareAsyncDCMPixOriginRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>* AsyncDCMPixOrientationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>* PrepareAsyncDCMPixOrientationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>* AsyncDCMPixSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>* PrepareAsyncDCMPixSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>* AsyncDCMPixSourceFileRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>* PrepareAsyncDCMPixSourceFileRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>* AsyncDCMPixImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>* PrepareAsyncDCMPixImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncDCMPixSetImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncDCMPixSetImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>* AsyncDCMPixGetMapFromROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>* PrepareAsyncDCMPixGetMapFromROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>* AsyncDCMPixDicomImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>* PrepareAsyncDCMPixDicomImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>* AsyncDCMPixDicomSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>* PrepareAsyncDCMPixDicomSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>* AsyncDCMPixDicomStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>* PrepareAsyncDCMPixDicomStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>* AsyncVRControllerViewer2DRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>* PrepareAsyncVRControllerViewer2DRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>* AsyncVRControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>* PrepareAsyncVRControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>* AsyncVRControllerStyleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>* PrepareAsyncVRControllerStyleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>* AsyncVRControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>* PrepareAsyncVRControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>* AsyncVRControllerROIVolumesRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>* PrepareAsyncVRControllerROIVolumesRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>* AsyncVRControllerRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>* PrepareAsyncVRControllerRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncVRControllerSetRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncVRControllerSetRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>* AsyncVRControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>* PrepareAsyncVRControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncVRControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncVRControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncVRControllerHideROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncVRControllerHideROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncVRControllerDisplayROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncVRControllerDisplayROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncVRControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncVRControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerCloseViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerCloseViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>* AsyncViewerControllerPixListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>* PrepareAsyncViewerControllerPixListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>* AsyncViewerControllerROIListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>* PrepareAsyncViewerControllerROIListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>* AsyncViewerControllerNewROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>* PrepareAsyncViewerControllerNewROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>* AsyncViewerControllerCurDCMRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>* PrepareAsyncViewerControllerCurDCMRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* AsyncViewerControllerROIsWithNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* PrepareAsyncViewerControllerROIsWithNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* AsyncViewerControllerSelectedROIsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* PrepareAsyncViewerControllerSelectedROIsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* AsyncViewerControllerIsDataVolumicRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* PrepareAsyncViewerControllerIsDataVolumicRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerCopyViewerWindowRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerCopyViewerWindowRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerResampleViewerControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerResampleViewerControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* AsyncViewerControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* PrepareAsyncViewerControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>* AsyncViewerControllerVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>* PrepareAsyncViewerControllerVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>* AsyncViewerControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>* PrepareAsyncViewerControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>* AsyncViewerControllerModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>* PrepareAsyncViewerControllerModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>* AsyncViewerControllerMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>* PrepareAsyncViewerControllerMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerSetMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerSetMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* AsyncViewerControllerMaxMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* PrepareAsyncViewerControllerMaxMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>* AsyncViewerControllerIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>* PrepareAsyncViewerControllerIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerSetIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerSetIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>* AsyncViewerControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>* PrepareAsyncViewerControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncViewerControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncViewerControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* AsyncViewerControllerOpenVRViewerForModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* PrepareAsyncViewerControllerOpenVRViewerForModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* AsyncBrowserControllerDatabaseSelectionRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* PrepareAsyncBrowserControllerDatabaseSelectionRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* AsyncBrowserControllerCopyFilesIfNeededRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* PrepareAsyncBrowserControllerCopyFilesIfNeededRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>* AsyncDicomImageWidthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>* PrepareAsyncDicomImageWidthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>* AsyncDicomImageHeightRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>* PrepareAsyncDicomImageHeightRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* AsyncDicomImageSOPInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* PrepareAsyncDicomImageSOPInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>* AsyncDicomImageCompletePathRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>* PrepareAsyncDicomImageCompletePathRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>* AsyncDicomImageDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>* PrepareAsyncDicomImageDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>* AsyncDicomImageNumberOfFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>* PrepareAsyncDicomImageNumberOfFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>* AsyncDicomImageModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>* PrepareAsyncDicomImageModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>* AsyncDicomImageSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>* PrepareAsyncDicomImageSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>* AsyncDicomImageSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>* PrepareAsyncDicomImageSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>* AsyncDicomImageInstanceNumberRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>* PrepareAsyncDicomImageInstanceNumberRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>* AsyncDicomSeriesPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>* PrepareAsyncDicomSeriesPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* AsyncDicomSeriesPreviousSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* PrepareAsyncDicomSeriesPreviousSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>* AsyncDicomSeriesNextSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>* PrepareAsyncDicomSeriesNextSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>* AsyncDicomSeriesSortedImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>* PrepareAsyncDicomSeriesSortedImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>* AsyncDicomSeriesStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>* PrepareAsyncDicomSeriesStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>* AsyncDicomSeriesImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>* PrepareAsyncDicomSeriesImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* AsyncDicomSeriesSeriesInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* PrepareAsyncDicomSeriesSeriesInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* AsyncDicomSeriesSeriesSOPClassUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* PrepareAsyncDicomSeriesSeriesSOPClassUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* AsyncDicomSeriesSeriesDescriptionRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* PrepareAsyncDicomSeriesSeriesDescriptionRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>* AsyncDicomSeriesModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>* PrepareAsyncDicomSeriesModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>* AsyncDicomSeriesNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>* PrepareAsyncDicomSeriesNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>* AsyncDicomSeriesDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>* PrepareAsyncDicomSeriesDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* AsyncDicomSeriesNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* PrepareAsyncDicomSeriesNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>* AsyncDicomStudyPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>* PrepareAsyncDicomStudyPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>* AsyncDicomStudyImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>* PrepareAsyncDicomStudyImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>* AsyncDicomStudyModalitiesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>* PrepareAsyncDicomStudyModalitiesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>* AsyncDicomStudyNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>* PrepareAsyncDicomStudyNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>* AsyncDicomStudyRawNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>* PrepareAsyncDicomStudyRawNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* AsyncDicomStudyNoFilesExcludingMultiFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* PrepareAsyncDicomStudyNoFilesExcludingMultiFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* AsyncDicomStudyNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* PrepareAsyncDicomStudyNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>* AsyncDicomStudySeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>* PrepareAsyncDicomStudySeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>* AsyncDicomStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>* PrepareAsyncDicomStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>* AsyncDicomStudyDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>* PrepareAsyncDicomStudyDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>* AsyncDicomStudyDateAddedRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>* PrepareAsyncDicomStudyDateAddedRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>* AsyncDicomStudyDateOfBirthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>* PrepareAsyncDicomStudyDateOfBirthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>* AsyncDicomStudyInstitutionNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>* PrepareAsyncDicomStudyInstitutionNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>* AsyncDicomStudyModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>* PrepareAsyncDicomStudyModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>* AsyncDicomStudyPatientIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>* PrepareAsyncDicomStudyPatientIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>* AsyncDicomStudyPatientUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>* PrepareAsyncDicomStudyPatientUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>* AsyncDicomStudyPatientSexRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>* PrepareAsyncDicomStudyPatientSexRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* AsyncDicomStudyPerformingPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* PrepareAsyncDicomStudyPerformingPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* AsyncDicomStudyReferringPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* PrepareAsyncDicomStudyReferringPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* AsyncDicomStudyStudyInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* PrepareAsyncDicomStudyStudyInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>* AsyncDicomStudyStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>* PrepareAsyncDicomStudyStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OsirixCurrentBrowser_;
    const ::grpc::internal::RpcMethod rpcmethod_OsirixFrontmostViewer_;
    const ::grpc::internal::RpcMethod rpcmethod_OsirixDisplayed2DViewers_;
    const ::grpc::internal::RpcMethod rpcmethod_OsirixFrontmostVRController_;
    const ::grpc::internal::RpcMethod rpcmethod_OsirixDisplayedVRControllers_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIFlipHorizontally_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIFlipVertically_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIArea_;
    const ::grpc::internal::RpcMethod rpcmethod_ROICentroid_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIRotate_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIMove_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIPix_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIName_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIIType_;
    const ::grpc::internal::RpcMethod rpcmethod_ROISetName_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIColor_;
    const ::grpc::internal::RpcMethod rpcmethod_ROISetColor_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIOpacity_;
    const ::grpc::internal::RpcMethod rpcmethod_ROISetOpacity_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIThickness_;
    const ::grpc::internal::RpcMethod rpcmethod_ROISetThickness_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_ROISetPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeTexture_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeSetTexture_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeColor_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeSetColor_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeOpacity_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeSetOpacity_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeFactor_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeSetFactor_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeName_;
    const ::grpc::internal::RpcMethod rpcmethod_ROIVolumeVisible_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixConvertToRGB_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixConvertToBW_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixIsRGB_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixComputeROI_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixROIValues_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixShape_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixSpacing_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixOrigin_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixOrientation_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixSliceLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixSourceFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixImage_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixSetImage_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixGetMapFromROI_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixDicomImage_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixDicomSeries_;
    const ::grpc::internal::RpcMethod rpcmethod_DCMPixDicomStudy_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerViewer2D_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerBlendingController_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerStyle_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerTitle_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerROIVolumes_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerRenderingMode_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerSetRenderingMode_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerWLWW_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerSetWLWW_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerHideROIVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerDisplayROIVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_VRControllerNeedsDisplayUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerCloseViewer_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerPixList_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerNeedsDisplayUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerROIList_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerNewROI_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerCurDCM_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerROIsWithName_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerSelectedROIs_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerIsDataVolumic_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerCopyViewerWindow_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerResampleViewerController_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerBlendingController_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerVRControllers_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerTitle_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerModality_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerMovieIdx_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerSetMovieIdx_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerMaxMovieIdx_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerIdx_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerSetIdx_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerWLWW_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerSetWLWW_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewerControllerOpenVRViewerForMode_;
    const ::grpc::internal::RpcMethod rpcmethod_BrowserControllerDatabaseSelection_;
    const ::grpc::internal::RpcMethod rpcmethod_BrowserControllerCopyFilesIfNeeded_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageWidth_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageHeight_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageSOPInstanceUID_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageCompletePath_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageDate_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageNumberOfFrames_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageModality_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageSeries_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageSliceLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomImageInstanceNumber_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesPaths_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesPreviousSeries_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesNextSeries_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesSortedImages_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesStudy_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesImages_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesSeriesInstanceUID_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesSeriesSOPClassUID_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesSeriesDescription_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesModality_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesName_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesDate_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomSeriesNumberOfImages_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyPaths_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyImages_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyModalities_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyNoFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyRawNoFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyNoFilesExcludingMultiFrames_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyNumberOfImages_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudySeries_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyName_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyDate_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyDateAdded_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyDateOfBirth_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyInstitutionName_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyModality_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyPatientID_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyPatientUID_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyPatientSex_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyPerformingPhysician_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyReferringPhysician_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyStudyInstanceUID_;
    const ::grpc::internal::RpcMethod rpcmethod_DicomStudyStudyName_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // OsiriX messages
    virtual ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response);
    virtual ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response);
    virtual ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response);
    virtual ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response);
    virtual ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response);
    // ROI messages
    virtual ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIFlipVertically(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIArea(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response);
    virtual ::grpc::Status ROICentroid(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response);
    virtual ::grpc::Status ROIRotate(::grpc::ServerContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIMove(::grpc::ServerContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIPix(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response);
    virtual ::grpc::Status ROIName(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response);
    virtual ::grpc::Status ROIIType(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response);
    virtual ::grpc::Status ROISetName(::grpc::ServerContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIColor(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response);
    virtual ::grpc::Status ROISetColor(::grpc::ServerContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response);
    virtual ::grpc::Status ROISetOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIThickness(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response);
    virtual ::grpc::Status ROISetThickness(::grpc::ServerContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIPoints(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response);
    virtual ::grpc::Status ROISetPoints(::grpc::ServerContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response);
    // ROIVolume messages
    virtual ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response);
    virtual ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response);
    virtual ::grpc::Status ROIVolumeColor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response);
    virtual ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response);
    virtual ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response);
    virtual ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ROIVolumeName(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response);
    virtual ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response);
    // DCMPix messages
    virtual ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response);
    virtual ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response);
    virtual ::grpc::Status DCMPixROIValues(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response);
    virtual ::grpc::Status DCMPixShape(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response);
    virtual ::grpc::Status DCMPixSpacing(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response);
    virtual ::grpc::Status DCMPixOrigin(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response);
    virtual ::grpc::Status DCMPixOrientation(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response);
    virtual ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response);
    virtual ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response);
    virtual ::grpc::Status DCMPixImage(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response);
    virtual ::grpc::Status DCMPixSetImage(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response);
    virtual ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response);
    virtual ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response);
    virtual ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response);
    // VRController messages
    virtual ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response);
    virtual ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response);
    virtual ::grpc::Status VRControllerStyle(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response);
    virtual ::grpc::Status VRControllerTitle(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response);
    virtual ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response);
    virtual ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response);
    virtual ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status VRControllerWLWW(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response);
    virtual ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response);
    // ViewerController messages
    virtual ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response);
    virtual ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response);
    virtual ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response);
    virtual ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response);
    virtual ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response);
    virtual ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response);
    virtual ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response);
    virtual ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response);
    virtual ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response);
    virtual ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response);
    virtual ::grpc::Status ViewerControllerModality(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response);
    virtual ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response);
    virtual ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response);
    virtual ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response);
    virtual ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response);
    virtual ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response);
    virtual ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response);
    // BrowserController messages
    virtual ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response);
    virtual ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response);
    // DicomImage messages
    virtual ::grpc::Status DicomImageWidth(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response);
    virtual ::grpc::Status DicomImageHeight(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response);
    virtual ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response);
    virtual ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response);
    virtual ::grpc::Status DicomImageDate(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response);
    virtual ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response);
    virtual ::grpc::Status DicomImageModality(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response);
    virtual ::grpc::Status DicomImageSeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response);
    virtual ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response);
    virtual ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response);
    // DicomSeries messages
    virtual ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response);
    virtual ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response);
    virtual ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response);
    virtual ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response);
    virtual ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response);
    virtual ::grpc::Status DicomSeriesImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response);
    virtual ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response);
    virtual ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response);
    virtual ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response);
    virtual ::grpc::Status DicomSeriesModality(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response);
    virtual ::grpc::Status DicomSeriesName(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response);
    virtual ::grpc::Status DicomSeriesDate(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response);
    virtual ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response);
    // DicomStudy messages
    virtual ::grpc::Status DicomStudyPaths(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response);
    virtual ::grpc::Status DicomStudyImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response);
    virtual ::grpc::Status DicomStudyModalities(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response);
    virtual ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response);
    virtual ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response);
    virtual ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response);
    virtual ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response);
    virtual ::grpc::Status DicomStudySeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response);
    virtual ::grpc::Status DicomStudyName(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response);
    virtual ::grpc::Status DicomStudyDate(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response);
    virtual ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response);
    virtual ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response);
    virtual ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response);
    virtual ::grpc::Status DicomStudyModality(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response);
    virtual ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response);
    virtual ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response);
    virtual ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response);
    virtual ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response);
    virtual ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response);
    virtual ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response);
    virtual ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OsirixCurrentBrowser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OsirixCurrentBrowser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OsirixCurrentBrowser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixCurrentBrowser(::grpc::ServerContext* context, ::osirixgrpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::OsirixCurrentBrowserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OsirixFrontmostViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OsirixFrontmostViewer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OsirixFrontmostViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixFrontmostViewer(::grpc::ServerContext* context, ::osirixgrpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::OsirixFrontmostViewerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OsirixDisplayed2DViewers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OsirixDisplayed2DViewers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OsirixDisplayed2DViewers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixDisplayed2DViewers(::grpc::ServerContext* context, ::osirixgrpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OsirixFrontmostVRController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OsirixFrontmostVRController() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OsirixFrontmostVRController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixFrontmostVRController(::grpc::ServerContext* context, ::osirixgrpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OsirixDisplayedVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OsirixDisplayedVRControllers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OsirixDisplayedVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixDisplayedVRControllers(::grpc::ServerContext* context, ::osirixgrpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIFlipHorizontally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIFlipHorizontally() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ROIFlipHorizontally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIFlipHorizontally(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIFlipVertically : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIFlipVertically() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ROIFlipVertically() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipVertically(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIFlipVertically(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIArea() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ROIArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIArea(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIArea(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIAreaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROICentroid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROICentroid() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ROICentroid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROICentroid(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROICentroid(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROICentroidResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIRotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIRotate() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ROIRotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIRotate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIRotate(::grpc::ServerContext* context, ::osirixgrpc::ROIRotateRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIMove() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ROIMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIMove(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIMove(::grpc::ServerContext* context, ::osirixgrpc::ROIMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIPix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIPix() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ROIPix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPix(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIPix(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIPixResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIName() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ROIName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIName(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROINameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIIType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIIType() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ROIIType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIIType(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIIType(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIITypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROISetName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROISetName() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ROISetName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetName(::grpc::ServerContext* context, ::osirixgrpc::ROISetNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIColor() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ROIColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIColor(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIColorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROISetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROISetColor() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ROISetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetColor(::grpc::ServerContext* context, ::osirixgrpc::ROISetColorRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIOpacity() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_ROIOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIOpacity(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIOpacityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROISetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROISetOpacity() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_ROISetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetOpacity(::grpc::ServerContext* context, ::osirixgrpc::ROISetOpacityRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIThickness() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_ROIThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIThickness(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIThicknessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROISetThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROISetThickness() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_ROISetThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetThickness(::grpc::ServerContext* context, ::osirixgrpc::ROISetThicknessRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIPoints() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_ROIPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIPoints(::grpc::ServerContext* context, ::osirixgrpc::ROI* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROISetPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROISetPoints() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_ROISetPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetPoints(::grpc::ServerContext* context, ::osirixgrpc::ROISetPointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeTexture() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_ROIVolumeTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeTexture(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeTextureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeSetTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeSetTexture() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_ROIVolumeSetTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetTexture(::grpc::ServerContext* context, ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeVolume() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ROIVolumeVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeVolume(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeVolumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeColor() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_ROIVolumeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeColor(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeColorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeSetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeSetColor() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_ROIVolumeSetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetColor(::grpc::ServerContext* context, ::osirixgrpc::ROIVolumeSetColorRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeOpacity() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_ROIVolumeOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeOpacity(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeOpacityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeSetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeSetOpacity() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_ROIVolumeSetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetOpacity(::grpc::ServerContext* context, ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeFactor() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_ROIVolumeFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeFactor(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeFactorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeSetFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeSetFactor() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_ROIVolumeSetFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetFactor(::grpc::ServerContext* context, ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeName() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_ROIVolumeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeName(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ROIVolumeVisible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ROIVolumeVisible() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_ROIVolumeVisible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeVisible(::grpc::ServerContext* context, ::osirixgrpc::ROIVolume* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ROIVolumeVisibleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixConvertToRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixConvertToRGB() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_DCMPixConvertToRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixConvertToRGB(::grpc::ServerContext* context, ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixConvertToBW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixConvertToBW() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_DCMPixConvertToBW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixConvertToBW(::grpc::ServerContext* context, ::osirixgrpc::DCMPixConvertToBWRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixIsRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixIsRGB() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_DCMPixIsRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixIsRGB(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixIsRGBResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixComputeROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixComputeROI() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_DCMPixComputeROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixComputeROI(::grpc::ServerContext* context, ::osirixgrpc::DCMPixComputeROIRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixComputeROIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixROIValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixROIValues() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_DCMPixROIValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixROIValues(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixROIValues(::grpc::ServerContext* context, ::osirixgrpc::DCMPixROIValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixROIValuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixShape() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_DCMPixShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixShape(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixShape(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixShapeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixSpacing() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_DCMPixSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSpacing(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSpacing(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixSpacingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixOrigin() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_DCMPixOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrigin(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixOrigin(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixOriginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixOrientation() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_DCMPixOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrientation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixOrientation(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixOrientationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixSliceLocation() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_DCMPixSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSliceLocation(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixSliceLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixSourceFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixSourceFile() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_DCMPixSourceFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSourceFile(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixSourceFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixImage() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_DCMPixImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixImage(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixSetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixSetImage() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_DCMPixSetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSetImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSetImage(::grpc::ServerContext* context, ::osirixgrpc::DCMPixSetImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixGetMapFromROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixGetMapFromROI() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_DCMPixGetMapFromROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixGetMapFromROI(::grpc::ServerContext* context, ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixGetMapFromROIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixDicomImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixDicomImage() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_DCMPixDicomImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixDicomImage(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixDicomImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixDicomSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixDicomSeries() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_DCMPixDicomSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixDicomSeries(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixDicomSeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DCMPixDicomStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DCMPixDicomStudy() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_DCMPixDicomStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixDicomStudy(::grpc::ServerContext* context, ::osirixgrpc::DCMPix* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DCMPixDicomStudyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerViewer2D : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerViewer2D() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_VRControllerViewer2D() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerViewer2D(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerViewer2DResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerBlendingController() {
      ::grpc::Service::MarkMethodAsync(52);
    }
    ~WithAsyncMethod_VRControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerBlendingController(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerBlendingControllerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerStyle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerStyle() {
      ::grpc::Service::MarkMethodAsync(53);
    }
    ~WithAsyncMethod_VRControllerStyle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerStyle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerStyle(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerStyleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerTitle() {
      ::grpc::Service::MarkMethodAsync(54);
    }
    ~WithAsyncMethod_VRControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerTitle(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerTitleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerROIVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerROIVolumes() {
      ::grpc::Service::MarkMethodAsync(55);
    }
    ~WithAsyncMethod_VRControllerROIVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerROIVolumes(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerROIVolumesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerRenderingMode() {
      ::grpc::Service::MarkMethodAsync(56);
    }
    ~WithAsyncMethod_VRControllerRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerRenderingMode(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerRenderingModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerSetRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerSetRenderingMode() {
      ::grpc::Service::MarkMethodAsync(57);
    }
    ~WithAsyncMethod_VRControllerSetRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerSetRenderingMode(::grpc::ServerContext* context, ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerWLWW() {
      ::grpc::Service::MarkMethodAsync(58);
    }
    ~WithAsyncMethod_VRControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerWLWW(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::VRControllerWLWWResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerSetWLWW() {
      ::grpc::Service::MarkMethodAsync(59);
    }
    ~WithAsyncMethod_VRControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerSetWLWW(::grpc::ServerContext* context, ::osirixgrpc::VRControllerSetWLWWRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerHideROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerHideROIVolume() {
      ::grpc::Service::MarkMethodAsync(60);
    }
    ~WithAsyncMethod_VRControllerHideROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerHideROIVolume(::grpc::ServerContext* context, ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerDisplayROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerDisplayROIVolume() {
      ::grpc::Service::MarkMethodAsync(61);
    }
    ~WithAsyncMethod_VRControllerDisplayROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerDisplayROIVolume(::grpc::ServerContext* context, ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VRControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VRControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodAsync(62);
    }
    ~WithAsyncMethod_VRControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerNeedsDisplayUpdate(::grpc::ServerContext* context, ::osirixgrpc::VRController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerCloseViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerCloseViewer() {
      ::grpc::Service::MarkMethodAsync(63);
    }
    ~WithAsyncMethod_ViewerControllerCloseViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerCloseViewer(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerPixList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerPixList() {
      ::grpc::Service::MarkMethodAsync(64);
    }
    ~WithAsyncMethod_ViewerControllerPixList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerPixList(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerPixListRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerPixListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodAsync(65);
    }
    ~WithAsyncMethod_ViewerControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerROIList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerROIList() {
      ::grpc::Service::MarkMethodAsync(66);
    }
    ~WithAsyncMethod_ViewerControllerROIList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerROIList(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerROIListRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerROIListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerNewROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerNewROI() {
      ::grpc::Service::MarkMethodAsync(67);
    }
    ~WithAsyncMethod_ViewerControllerNewROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerNewROI(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerNewROIRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerNewROIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerCurDCM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerCurDCM() {
      ::grpc::Service::MarkMethodAsync(68);
    }
    ~WithAsyncMethod_ViewerControllerCurDCM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerCurDCM(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerCurDCMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerROIsWithName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerROIsWithName() {
      ::grpc::Service::MarkMethodAsync(69);
    }
    ~WithAsyncMethod_ViewerControllerROIsWithName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerROIsWithName(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerSelectedROIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerSelectedROIs() {
      ::grpc::Service::MarkMethodAsync(70);
    }
    ~WithAsyncMethod_ViewerControllerSelectedROIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSelectedROIs(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerIsDataVolumic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerIsDataVolumic() {
      ::grpc::Service::MarkMethodAsync(71);
    }
    ~WithAsyncMethod_ViewerControllerIsDataVolumic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerIsDataVolumic(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerCopyViewerWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerCopyViewerWindow() {
      ::grpc::Service::MarkMethodAsync(72);
    }
    ~WithAsyncMethod_ViewerControllerCopyViewerWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerCopyViewerWindow(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerResampleViewerController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerResampleViewerController() {
      ::grpc::Service::MarkMethodAsync(73);
    }
    ~WithAsyncMethod_ViewerControllerResampleViewerController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerResampleViewerController(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerBlendingController() {
      ::grpc::Service::MarkMethodAsync(74);
    }
    ~WithAsyncMethod_ViewerControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerBlendingController(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerVRControllers() {
      ::grpc::Service::MarkMethodAsync(75);
    }
    ~WithAsyncMethod_ViewerControllerVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerVRControllers(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerVRControllersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerTitle() {
      ::grpc::Service::MarkMethodAsync(76);
    }
    ~WithAsyncMethod_ViewerControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerTitle(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerTitleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerModality() {
      ::grpc::Service::MarkMethodAsync(77);
    }
    ~WithAsyncMethod_ViewerControllerModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerModality(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerModalityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerMovieIdx() {
      ::grpc::Service::MarkMethodAsync(78);
    }
    ~WithAsyncMethod_ViewerControllerMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerMovieIdx(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerMovieIdxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerSetMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerSetMovieIdx() {
      ::grpc::Service::MarkMethodAsync(79);
    }
    ~WithAsyncMethod_ViewerControllerSetMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSetMovieIdx(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerMaxMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerMaxMovieIdx() {
      ::grpc::Service::MarkMethodAsync(80);
    }
    ~WithAsyncMethod_ViewerControllerMaxMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerMaxMovieIdx(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerIdx() {
      ::grpc::Service::MarkMethodAsync(81);
    }
    ~WithAsyncMethod_ViewerControllerIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerIdx(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerIdxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerSetIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerSetIdx() {
      ::grpc::Service::MarkMethodAsync(82);
    }
    ~WithAsyncMethod_ViewerControllerSetIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSetIdx(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerWLWW() {
      ::grpc::Service::MarkMethodAsync(83);
    }
    ~WithAsyncMethod_ViewerControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerWLWW(::grpc::ServerContext* context, ::osirixgrpc::ViewerController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerWLWWResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(83, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerSetWLWW() {
      ::grpc::Service::MarkMethodAsync(84);
    }
    ~WithAsyncMethod_ViewerControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSetWLWW(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(84, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewerControllerOpenVRViewerForMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewerControllerOpenVRViewerForMode() {
      ::grpc::Service::MarkMethodAsync(85);
    }
    ~WithAsyncMethod_ViewerControllerOpenVRViewerForMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerOpenVRViewerForMode(::grpc::ServerContext* context, ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(85, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BrowserControllerDatabaseSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BrowserControllerDatabaseSelection() {
      ::grpc::Service::MarkMethodAsync(86);
    }
    ~WithAsyncMethod_BrowserControllerDatabaseSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBrowserControllerDatabaseSelection(::grpc::ServerContext* context, ::osirixgrpc::BrowserController* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(86, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BrowserControllerCopyFilesIfNeeded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BrowserControllerCopyFilesIfNeeded() {
      ::grpc::Service::MarkMethodAsync(87);
    }
    ~WithAsyncMethod_BrowserControllerCopyFilesIfNeeded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* context, ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(87, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageWidth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageWidth() {
      ::grpc::Service::MarkMethodAsync(88);
    }
    ~WithAsyncMethod_DicomImageWidth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageWidth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageWidth(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageWidthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(88, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageHeight() {
      ::grpc::Service::MarkMethodAsync(89);
    }
    ~WithAsyncMethod_DicomImageHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageHeight(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageHeight(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageHeightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(89, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageSOPInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageSOPInstanceUID() {
      ::grpc::Service::MarkMethodAsync(90);
    }
    ~WithAsyncMethod_DicomImageSOPInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageSOPInstanceUID(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(90, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageCompletePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageCompletePath() {
      ::grpc::Service::MarkMethodAsync(91);
    }
    ~WithAsyncMethod_DicomImageCompletePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageCompletePath(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageCompletePathResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(91, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageDate() {
      ::grpc::Service::MarkMethodAsync(92);
    }
    ~WithAsyncMethod_DicomImageDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageDate(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageDateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(92, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageNumberOfFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageNumberOfFrames() {
      ::grpc::Service::MarkMethodAsync(93);
    }
    ~WithAsyncMethod_DicomImageNumberOfFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageNumberOfFrames(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageNumberOfFramesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(93, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageModality() {
      ::grpc::Service::MarkMethodAsync(94);
    }
    ~WithAsyncMethod_DicomImageModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageModality(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageModalityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(94, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageSeries() {
      ::grpc::Service::MarkMethodAsync(95);
    }
    ~WithAsyncMethod_DicomImageSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageSeries(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageSeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(95, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageSliceLocation() {
      ::grpc::Service::MarkMethodAsync(96);
    }
    ~WithAsyncMethod_DicomImageSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageSliceLocation(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageSliceLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(96, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomImageInstanceNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomImageInstanceNumber() {
      ::grpc::Service::MarkMethodAsync(97);
    }
    ~WithAsyncMethod_DicomImageInstanceNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageInstanceNumber(::grpc::ServerContext* context, ::osirixgrpc::DicomImage* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomImageInstanceNumberResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(97, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesPaths() {
      ::grpc::Service::MarkMethodAsync(98);
    }
    ~WithAsyncMethod_DicomSeriesPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesPaths(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesPathsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(98, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesPreviousSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesPreviousSeries() {
      ::grpc::Service::MarkMethodAsync(99);
    }
    ~WithAsyncMethod_DicomSeriesPreviousSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesPreviousSeries(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(99, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesNextSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesNextSeries() {
      ::grpc::Service::MarkMethodAsync(100);
    }
    ~WithAsyncMethod_DicomSeriesNextSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesNextSeries(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesNextSeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(100, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesSortedImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesSortedImages() {
      ::grpc::Service::MarkMethodAsync(101);
    }
    ~WithAsyncMethod_DicomSeriesSortedImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSortedImages(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesSortedImagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(101, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesStudy() {
      ::grpc::Service::MarkMethodAsync(102);
    }
    ~WithAsyncMethod_DicomSeriesStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesStudy(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesStudyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(102, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesImages() {
      ::grpc::Service::MarkMethodAsync(103);
    }
    ~WithAsyncMethod_DicomSeriesImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesImages(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesImagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(103, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesSeriesInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesSeriesInstanceUID() {
      ::grpc::Service::MarkMethodAsync(104);
    }
    ~WithAsyncMethod_DicomSeriesSeriesInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSeriesInstanceUID(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(104, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesSeriesSOPClassUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesSeriesSOPClassUID() {
      ::grpc::Service::MarkMethodAsync(105);
    }
    ~WithAsyncMethod_DicomSeriesSeriesSOPClassUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSeriesSOPClassUID(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(105, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesSeriesDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesSeriesDescription() {
      ::grpc::Service::MarkMethodAsync(106);
    }
    ~WithAsyncMethod_DicomSeriesSeriesDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSeriesDescription(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(106, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesModality() {
      ::grpc::Service::MarkMethodAsync(107);
    }
    ~WithAsyncMethod_DicomSeriesModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesModality(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesModalityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(107, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesName() {
      ::grpc::Service::MarkMethodAsync(108);
    }
    ~WithAsyncMethod_DicomSeriesName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesName(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(108, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesDate() {
      ::grpc::Service::MarkMethodAsync(109);
    }
    ~WithAsyncMethod_DicomSeriesDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesDate(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesDateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(109, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomSeriesNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomSeriesNumberOfImages() {
      ::grpc::Service::MarkMethodAsync(110);
    }
    ~WithAsyncMethod_DicomSeriesNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesNumberOfImages(::grpc::ServerContext* context, ::osirixgrpc::DicomSeries* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(110, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyPaths() {
      ::grpc::Service::MarkMethodAsync(111);
    }
    ~WithAsyncMethod_DicomStudyPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPaths(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyPathsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(111, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyImages() {
      ::grpc::Service::MarkMethodAsync(112);
    }
    ~WithAsyncMethod_DicomStudyImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyImages(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyImagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(112, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyModalities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyModalities() {
      ::grpc::Service::MarkMethodAsync(113);
    }
    ~WithAsyncMethod_DicomStudyModalities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModalities(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyModalities(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyModalitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(113, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyNoFiles() {
      ::grpc::Service::MarkMethodAsync(114);
    }
    ~WithAsyncMethod_DicomStudyNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyNoFiles(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyNoFilesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(114, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyRawNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyRawNoFiles() {
      ::grpc::Service::MarkMethodAsync(115);
    }
    ~WithAsyncMethod_DicomStudyRawNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyRawNoFiles(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyRawNoFilesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(115, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyNoFilesExcludingMultiFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyNoFilesExcludingMultiFrames() {
      ::grpc::Service::MarkMethodAsync(116);
    }
    ~WithAsyncMethod_DicomStudyNoFilesExcludingMultiFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(116, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyNumberOfImages() {
      ::grpc::Service::MarkMethodAsync(117);
    }
    ~WithAsyncMethod_DicomStudyNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyNumberOfImages(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(117, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudySeries() {
      ::grpc::Service::MarkMethodAsync(118);
    }
    ~WithAsyncMethod_DicomStudySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudySeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudySeries(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudySeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(118, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyName() {
      ::grpc::Service::MarkMethodAsync(119);
    }
    ~WithAsyncMethod_DicomStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyName(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(119, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyDate() {
      ::grpc::Service::MarkMethodAsync(120);
    }
    ~WithAsyncMethod_DicomStudyDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyDate(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyDateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(120, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyDateAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyDateAdded() {
      ::grpc::Service::MarkMethodAsync(121);
    }
    ~WithAsyncMethod_DicomStudyDateAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyDateAdded(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyDateAddedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(121, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyDateOfBirth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyDateOfBirth() {
      ::grpc::Service::MarkMethodAsync(122);
    }
    ~WithAsyncMethod_DicomStudyDateOfBirth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyDateOfBirth(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyDateOfBirthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(122, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyInstitutionName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyInstitutionName() {
      ::grpc::Service::MarkMethodAsync(123);
    }
    ~WithAsyncMethod_DicomStudyInstitutionName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyInstitutionName(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyInstitutionNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(123, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyModality() {
      ::grpc::Service::MarkMethodAsync(124);
    }
    ~WithAsyncMethod_DicomStudyModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyModality(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyModalityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(124, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyPatientID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyPatientID() {
      ::grpc::Service::MarkMethodAsync(125);
    }
    ~WithAsyncMethod_DicomStudyPatientID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPatientID(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyPatientIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(125, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyPatientUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyPatientUID() {
      ::grpc::Service::MarkMethodAsync(126);
    }
    ~WithAsyncMethod_DicomStudyPatientUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPatientUID(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyPatientUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(126, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyPatientSex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyPatientSex() {
      ::grpc::Service::MarkMethodAsync(127);
    }
    ~WithAsyncMethod_DicomStudyPatientSex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPatientSex(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyPatientSexResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(127, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyPerformingPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyPerformingPhysician() {
      ::grpc::Service::MarkMethodAsync(128);
    }
    ~WithAsyncMethod_DicomStudyPerformingPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPerformingPhysician(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(128, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyReferringPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyReferringPhysician() {
      ::grpc::Service::MarkMethodAsync(129);
    }
    ~WithAsyncMethod_DicomStudyReferringPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyReferringPhysician(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(129, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyStudyInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyStudyInstanceUID() {
      ::grpc::Service::MarkMethodAsync(130);
    }
    ~WithAsyncMethod_DicomStudyStudyInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyStudyInstanceUID(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(130, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DicomStudyStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DicomStudyStudyName() {
      ::grpc::Service::MarkMethodAsync(131);
    }
    ~WithAsyncMethod_DicomStudyStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyStudyName(::grpc::ServerContext* context, ::osirixgrpc::DicomStudy* request, ::grpc::ServerAsyncResponseWriter< ::osirixgrpc::DicomStudyStudyNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(131, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OsirixCurrentBrowser<WithAsyncMethod_OsirixFrontmostViewer<WithAsyncMethod_OsirixDisplayed2DViewers<WithAsyncMethod_OsirixFrontmostVRController<WithAsyncMethod_OsirixDisplayedVRControllers<WithAsyncMethod_ROIFlipHorizontally<WithAsyncMethod_ROIFlipVertically<WithAsyncMethod_ROIArea<WithAsyncMethod_ROICentroid<WithAsyncMethod_ROIRotate<WithAsyncMethod_ROIMove<WithAsyncMethod_ROIPix<WithAsyncMethod_ROIName<WithAsyncMethod_ROIIType<WithAsyncMethod_ROISetName<WithAsyncMethod_ROIColor<WithAsyncMethod_ROISetColor<WithAsyncMethod_ROIOpacity<WithAsyncMethod_ROISetOpacity<WithAsyncMethod_ROIThickness<WithAsyncMethod_ROISetThickness<WithAsyncMethod_ROIPoints<WithAsyncMethod_ROISetPoints<WithAsyncMethod_ROIVolumeTexture<WithAsyncMethod_ROIVolumeSetTexture<WithAsyncMethod_ROIVolumeVolume<WithAsyncMethod_ROIVolumeColor<WithAsyncMethod_ROIVolumeSetColor<WithAsyncMethod_ROIVolumeOpacity<WithAsyncMethod_ROIVolumeSetOpacity<WithAsyncMethod_ROIVolumeFactor<WithAsyncMethod_ROIVolumeSetFactor<WithAsyncMethod_ROIVolumeName<WithAsyncMethod_ROIVolumeVisible<WithAsyncMethod_DCMPixConvertToRGB<WithAsyncMethod_DCMPixConvertToBW<WithAsyncMethod_DCMPixIsRGB<WithAsyncMethod_DCMPixComputeROI<WithAsyncMethod_DCMPixROIValues<WithAsyncMethod_DCMPixShape<WithAsyncMethod_DCMPixSpacing<WithAsyncMethod_DCMPixOrigin<WithAsyncMethod_DCMPixOrientation<WithAsyncMethod_DCMPixSliceLocation<WithAsyncMethod_DCMPixSourceFile<WithAsyncMethod_DCMPixImage<WithAsyncMethod_DCMPixSetImage<WithAsyncMethod_DCMPixGetMapFromROI<WithAsyncMethod_DCMPixDicomImage<WithAsyncMethod_DCMPixDicomSeries<WithAsyncMethod_DCMPixDicomStudy<WithAsyncMethod_VRControllerViewer2D<WithAsyncMethod_VRControllerBlendingController<WithAsyncMethod_VRControllerStyle<WithAsyncMethod_VRControllerTitle<WithAsyncMethod_VRControllerROIVolumes<WithAsyncMethod_VRControllerRenderingMode<WithAsyncMethod_VRControllerSetRenderingMode<WithAsyncMethod_VRControllerWLWW<WithAsyncMethod_VRControllerSetWLWW<WithAsyncMethod_VRControllerHideROIVolume<WithAsyncMethod_VRControllerDisplayROIVolume<WithAsyncMethod_VRControllerNeedsDisplayUpdate<WithAsyncMethod_ViewerControllerCloseViewer<WithAsyncMethod_ViewerControllerPixList<WithAsyncMethod_ViewerControllerNeedsDisplayUpdate<WithAsyncMethod_ViewerControllerROIList<WithAsyncMethod_ViewerControllerNewROI<WithAsyncMethod_ViewerControllerCurDCM<WithAsyncMethod_ViewerControllerROIsWithName<WithAsyncMethod_ViewerControllerSelectedROIs<WithAsyncMethod_ViewerControllerIsDataVolumic<WithAsyncMethod_ViewerControllerCopyViewerWindow<WithAsyncMethod_ViewerControllerResampleViewerController<WithAsyncMethod_ViewerControllerBlendingController<WithAsyncMethod_ViewerControllerVRControllers<WithAsyncMethod_ViewerControllerTitle<WithAsyncMethod_ViewerControllerModality<WithAsyncMethod_ViewerControllerMovieIdx<WithAsyncMethod_ViewerControllerSetMovieIdx<WithAsyncMethod_ViewerControllerMaxMovieIdx<WithAsyncMethod_ViewerControllerIdx<WithAsyncMethod_ViewerControllerSetIdx<WithAsyncMethod_ViewerControllerWLWW<WithAsyncMethod_ViewerControllerSetWLWW<WithAsyncMethod_ViewerControllerOpenVRViewerForMode<WithAsyncMethod_BrowserControllerDatabaseSelection<WithAsyncMethod_BrowserControllerCopyFilesIfNeeded<WithAsyncMethod_DicomImageWidth<WithAsyncMethod_DicomImageHeight<WithAsyncMethod_DicomImageSOPInstanceUID<WithAsyncMethod_DicomImageCompletePath<WithAsyncMethod_DicomImageDate<WithAsyncMethod_DicomImageNumberOfFrames<WithAsyncMethod_DicomImageModality<WithAsyncMethod_DicomImageSeries<WithAsyncMethod_DicomImageSliceLocation<WithAsyncMethod_DicomImageInstanceNumber<WithAsyncMethod_DicomSeriesPaths<WithAsyncMethod_DicomSeriesPreviousSeries<WithAsyncMethod_DicomSeriesNextSeries<WithAsyncMethod_DicomSeriesSortedImages<WithAsyncMethod_DicomSeriesStudy<WithAsyncMethod_DicomSeriesImages<WithAsyncMethod_DicomSeriesSeriesInstanceUID<WithAsyncMethod_DicomSeriesSeriesSOPClassUID<WithAsyncMethod_DicomSeriesSeriesDescription<WithAsyncMethod_DicomSeriesModality<WithAsyncMethod_DicomSeriesName<WithAsyncMethod_DicomSeriesDate<WithAsyncMethod_DicomSeriesNumberOfImages<WithAsyncMethod_DicomStudyPaths<WithAsyncMethod_DicomStudyImages<WithAsyncMethod_DicomStudyModalities<WithAsyncMethod_DicomStudyNoFiles<WithAsyncMethod_DicomStudyRawNoFiles<WithAsyncMethod_DicomStudyNoFilesExcludingMultiFrames<WithAsyncMethod_DicomStudyNumberOfImages<WithAsyncMethod_DicomStudySeries<WithAsyncMethod_DicomStudyName<WithAsyncMethod_DicomStudyDate<WithAsyncMethod_DicomStudyDateAdded<WithAsyncMethod_DicomStudyDateOfBirth<WithAsyncMethod_DicomStudyInstitutionName<WithAsyncMethod_DicomStudyModality<WithAsyncMethod_DicomStudyPatientID<WithAsyncMethod_DicomStudyPatientUID<WithAsyncMethod_DicomStudyPatientSex<WithAsyncMethod_DicomStudyPerformingPhysician<WithAsyncMethod_DicomStudyReferringPhysician<WithAsyncMethod_DicomStudyStudyInstanceUID<WithAsyncMethod_DicomStudyStudyName<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_OsirixCurrentBrowser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OsirixCurrentBrowser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response) { return this->OsirixCurrentBrowser(context, request, response); }));}
    void SetMessageAllocatorFor_OsirixCurrentBrowser(
        ::grpc::MessageAllocator< ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OsirixCurrentBrowser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixCurrentBrowser(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OsirixFrontmostViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OsirixFrontmostViewer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response) { return this->OsirixFrontmostViewer(context, request, response); }));}
    void SetMessageAllocatorFor_OsirixFrontmostViewer(
        ::grpc::MessageAllocator< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OsirixFrontmostViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixFrontmostViewer(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OsirixDisplayed2DViewers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OsirixDisplayed2DViewers() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response) { return this->OsirixDisplayed2DViewers(context, request, response); }));}
    void SetMessageAllocatorFor_OsirixDisplayed2DViewers(
        ::grpc::MessageAllocator< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OsirixDisplayed2DViewers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixDisplayed2DViewers(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OsirixFrontmostVRController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OsirixFrontmostVRController() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response) { return this->OsirixFrontmostVRController(context, request, response); }));}
    void SetMessageAllocatorFor_OsirixFrontmostVRController(
        ::grpc::MessageAllocator< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OsirixFrontmostVRController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixFrontmostVRController(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OsirixDisplayedVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OsirixDisplayedVRControllers() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response) { return this->OsirixDisplayedVRControllers(context, request, response); }));}
    void SetMessageAllocatorFor_OsirixDisplayedVRControllers(
        ::grpc::MessageAllocator< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OsirixDisplayedVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixDisplayedVRControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIFlipHorizontally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIFlipHorizontally() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response) { return this->ROIFlipHorizontally(context, request, response); }));}
    void SetMessageAllocatorFor_ROIFlipHorizontally(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIFlipHorizontally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIFlipHorizontally(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIFlipVertically : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIFlipVertically() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response) { return this->ROIFlipVertically(context, request, response); }));}
    void SetMessageAllocatorFor_ROIFlipVertically(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIFlipVertically() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipVertically(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIFlipVertically(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIArea() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response) { return this->ROIArea(context, request, response); }));}
    void SetMessageAllocatorFor_ROIArea(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIArea(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIArea(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROICentroid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROICentroid() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response) { return this->ROICentroid(context, request, response); }));}
    void SetMessageAllocatorFor_ROICentroid(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROICentroid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROICentroid(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROICentroid(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIRotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIRotate() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response) { return this->ROIRotate(context, request, response); }));}
    void SetMessageAllocatorFor_ROIRotate(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIRotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIRotate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIRotate(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIMove() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response) { return this->ROIMove(context, request, response); }));}
    void SetMessageAllocatorFor_ROIMove(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIMove(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIMove(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIPix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIPix() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response) { return this->ROIPix(context, request, response); }));}
    void SetMessageAllocatorFor_ROIPix(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIPix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPix(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIPix(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIName() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response) { return this->ROIName(context, request, response); }));}
    void SetMessageAllocatorFor_ROIName(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIIType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIIType() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response) { return this->ROIIType(context, request, response); }));}
    void SetMessageAllocatorFor_ROIIType(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIIType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIIType(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIIType(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROISetName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROISetName() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response) { return this->ROISetName(context, request, response); }));}
    void SetMessageAllocatorFor_ROISetName(
        ::grpc::MessageAllocator< ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROISetName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIColor() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response) { return this->ROIColor(context, request, response); }));}
    void SetMessageAllocatorFor_ROIColor(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIColor(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROISetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROISetColor() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response) { return this->ROISetColor(context, request, response); }));}
    void SetMessageAllocatorFor_ROISetColor(
        ::grpc::MessageAllocator< ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROISetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetColor(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIOpacity() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response) { return this->ROIOpacity(context, request, response); }));}
    void SetMessageAllocatorFor_ROIOpacity(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROISetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROISetOpacity() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response) { return this->ROISetOpacity(context, request, response); }));}
    void SetMessageAllocatorFor_ROISetOpacity(
        ::grpc::MessageAllocator< ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROISetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIThickness() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response) { return this->ROIThickness(context, request, response); }));}
    void SetMessageAllocatorFor_ROIThickness(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIThickness(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROISetThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROISetThickness() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response) { return this->ROISetThickness(context, request, response); }));}
    void SetMessageAllocatorFor_ROISetThickness(
        ::grpc::MessageAllocator< ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROISetThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetThickness(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIPoints() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response) { return this->ROIPoints(context, request, response); }));}
    void SetMessageAllocatorFor_ROIPoints(
        ::grpc::MessageAllocator< ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROISetPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROISetPoints() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response) { return this->ROISetPoints(context, request, response); }));}
    void SetMessageAllocatorFor_ROISetPoints(
        ::grpc::MessageAllocator< ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROISetPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeTexture() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response) { return this->ROIVolumeTexture(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeTexture(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeTexture(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeSetTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeSetTexture() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response) { return this->ROIVolumeSetTexture(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeSetTexture(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeSetTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetTexture(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeVolume() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response) { return this->ROIVolumeVolume(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeVolume(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeColor() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response) { return this->ROIVolumeColor(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeColor(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeColor(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeSetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeSetColor() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response) { return this->ROIVolumeSetColor(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeSetColor(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeSetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetColor(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeOpacity() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response) { return this->ROIVolumeOpacity(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeOpacity(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeSetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeSetOpacity() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response) { return this->ROIVolumeSetOpacity(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeSetOpacity(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeSetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeFactor() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response) { return this->ROIVolumeFactor(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeFactor(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeFactor(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeSetFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeSetFactor() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response) { return this->ROIVolumeSetFactor(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeSetFactor(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeSetFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetFactor(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeName() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response) { return this->ROIVolumeName(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeName(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ROIVolumeVisible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ROIVolumeVisible() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response) { return this->ROIVolumeVisible(context, request, response); }));}
    void SetMessageAllocatorFor_ROIVolumeVisible(
        ::grpc::MessageAllocator< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ROIVolumeVisible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeVisible(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixConvertToRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixConvertToRGB() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response) { return this->DCMPixConvertToRGB(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixConvertToRGB(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixConvertToRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixConvertToRGB(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixConvertToBW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixConvertToBW() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response) { return this->DCMPixConvertToBW(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixConvertToBW(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixConvertToBW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixConvertToBW(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixIsRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixIsRGB() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response) { return this->DCMPixIsRGB(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixIsRGB(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixIsRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixIsRGB(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixComputeROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixComputeROI() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response) { return this->DCMPixComputeROI(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixComputeROI(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixComputeROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixComputeROI(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixROIValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixROIValues() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response) { return this->DCMPixROIValues(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixROIValues(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixROIValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixROIValues(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixROIValues(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixShape() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response) { return this->DCMPixShape(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixShape(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixShape(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixShape(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixSpacing() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response) { return this->DCMPixSpacing(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixSpacing(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSpacing(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSpacing(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixOrigin() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response) { return this->DCMPixOrigin(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixOrigin(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrigin(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixOrigin(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixOrientation() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response) { return this->DCMPixOrientation(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixOrientation(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrientation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixOrientation(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixSliceLocation() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response) { return this->DCMPixSliceLocation(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixSliceLocation(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSliceLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixSourceFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixSourceFile() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response) { return this->DCMPixSourceFile(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixSourceFile(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixSourceFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSourceFile(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixImage() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response) { return this->DCMPixImage(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixImage(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixImage(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixSetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixSetImage() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response) { return this->DCMPixSetImage(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixSetImage(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixSetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSetImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixGetMapFromROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixGetMapFromROI() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response) { return this->DCMPixGetMapFromROI(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixGetMapFromROI(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixGetMapFromROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixGetMapFromROI(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixDicomImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixDicomImage() {
      ::grpc::Service::MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response) { return this->DCMPixDicomImage(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixDicomImage(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixDicomImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixDicomImage(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixDicomSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixDicomSeries() {
      ::grpc::Service::MarkMethodCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response) { return this->DCMPixDicomSeries(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixDicomSeries(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixDicomSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixDicomSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DCMPixDicomStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DCMPixDicomStudy() {
      ::grpc::Service::MarkMethodCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response) { return this->DCMPixDicomStudy(context, request, response); }));}
    void SetMessageAllocatorFor_DCMPixDicomStudy(
        ::grpc::MessageAllocator< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DCMPixDicomStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixDicomStudy(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerViewer2D : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerViewer2D() {
      ::grpc::Service::MarkMethodCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response) { return this->VRControllerViewer2D(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerViewer2D(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerViewer2D() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerViewer2D(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerBlendingController() {
      ::grpc::Service::MarkMethodCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response) { return this->VRControllerBlendingController(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerBlendingController(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(52);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerBlendingController(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerStyle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerStyle() {
      ::grpc::Service::MarkMethodCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response) { return this->VRControllerStyle(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerStyle(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(53);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerStyle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerStyle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerStyle(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerTitle() {
      ::grpc::Service::MarkMethodCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response) { return this->VRControllerTitle(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerTitle(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(54);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerTitle(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerROIVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerROIVolumes() {
      ::grpc::Service::MarkMethodCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response) { return this->VRControllerROIVolumes(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerROIVolumes(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(55);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerROIVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerROIVolumes(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerRenderingMode() {
      ::grpc::Service::MarkMethodCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response) { return this->VRControllerRenderingMode(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerRenderingMode(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(56);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerRenderingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerSetRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerSetRenderingMode() {
      ::grpc::Service::MarkMethodCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response) { return this->VRControllerSetRenderingMode(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerSetRenderingMode(
        ::grpc::MessageAllocator< ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(57);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerSetRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerSetRenderingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerWLWW() {
      ::grpc::Service::MarkMethodCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response) { return this->VRControllerWLWW(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerWLWW(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(58);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerSetWLWW() {
      ::grpc::Service::MarkMethodCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response) { return this->VRControllerSetWLWW(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerSetWLWW(
        ::grpc::MessageAllocator< ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(59);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerSetWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerHideROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerHideROIVolume() {
      ::grpc::Service::MarkMethodCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response) { return this->VRControllerHideROIVolume(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerHideROIVolume(
        ::grpc::MessageAllocator< ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(60);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerHideROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerHideROIVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerDisplayROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerDisplayROIVolume() {
      ::grpc::Service::MarkMethodCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response) { return this->VRControllerDisplayROIVolume(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerDisplayROIVolume(
        ::grpc::MessageAllocator< ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(61);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerDisplayROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerDisplayROIVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VRControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VRControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response) { return this->VRControllerNeedsDisplayUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_VRControllerNeedsDisplayUpdate(
        ::grpc::MessageAllocator< ::osirixgrpc::VRController, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(62);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::VRController, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VRControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerNeedsDisplayUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerCloseViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerCloseViewer() {
      ::grpc::Service::MarkMethodCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response) { return this->ViewerControllerCloseViewer(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerCloseViewer(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(63);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerCloseViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerCloseViewer(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerPixList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerPixList() {
      ::grpc::Service::MarkMethodCallback(64,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response) { return this->ViewerControllerPixList(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerPixList(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(64);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerPixList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerPixList(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodCallback(65,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response) { return this->ViewerControllerNeedsDisplayUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerNeedsDisplayUpdate(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(65);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerNeedsDisplayUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerROIList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerROIList() {
      ::grpc::Service::MarkMethodCallback(66,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response) { return this->ViewerControllerROIList(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerROIList(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(66);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerROIList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerROIList(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerNewROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerNewROI() {
      ::grpc::Service::MarkMethodCallback(67,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response) { return this->ViewerControllerNewROI(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerNewROI(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(67);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerNewROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerNewROI(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerCurDCM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerCurDCM() {
      ::grpc::Service::MarkMethodCallback(68,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response) { return this->ViewerControllerCurDCM(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerCurDCM(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(68);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerCurDCM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerCurDCM(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerROIsWithName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerROIsWithName() {
      ::grpc::Service::MarkMethodCallback(69,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response) { return this->ViewerControllerROIsWithName(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerROIsWithName(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(69);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerROIsWithName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerROIsWithName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerSelectedROIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerSelectedROIs() {
      ::grpc::Service::MarkMethodCallback(70,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response) { return this->ViewerControllerSelectedROIs(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerSelectedROIs(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(70);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerSelectedROIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSelectedROIs(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerIsDataVolumic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerIsDataVolumic() {
      ::grpc::Service::MarkMethodCallback(71,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response) { return this->ViewerControllerIsDataVolumic(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerIsDataVolumic(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(71);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerIsDataVolumic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerIsDataVolumic(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerCopyViewerWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerCopyViewerWindow() {
      ::grpc::Service::MarkMethodCallback(72,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response) { return this->ViewerControllerCopyViewerWindow(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerCopyViewerWindow(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(72);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerCopyViewerWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerCopyViewerWindow(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerResampleViewerController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerResampleViewerController() {
      ::grpc::Service::MarkMethodCallback(73,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response) { return this->ViewerControllerResampleViewerController(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerResampleViewerController(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(73);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerResampleViewerController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerResampleViewerController(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerBlendingController() {
      ::grpc::Service::MarkMethodCallback(74,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response) { return this->ViewerControllerBlendingController(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerBlendingController(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(74);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerBlendingController(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerVRControllers() {
      ::grpc::Service::MarkMethodCallback(75,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response) { return this->ViewerControllerVRControllers(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerVRControllers(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(75);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerVRControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerTitle() {
      ::grpc::Service::MarkMethodCallback(76,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response) { return this->ViewerControllerTitle(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerTitle(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(76);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerTitle(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerModality() {
      ::grpc::Service::MarkMethodCallback(77,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response) { return this->ViewerControllerModality(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerModality(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(77);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerModality(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerMovieIdx() {
      ::grpc::Service::MarkMethodCallback(78,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response) { return this->ViewerControllerMovieIdx(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerMovieIdx(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(78);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerMovieIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerSetMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerSetMovieIdx() {
      ::grpc::Service::MarkMethodCallback(79,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response) { return this->ViewerControllerSetMovieIdx(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerSetMovieIdx(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(79);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerSetMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSetMovieIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerMaxMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerMaxMovieIdx() {
      ::grpc::Service::MarkMethodCallback(80,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response) { return this->ViewerControllerMaxMovieIdx(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerMaxMovieIdx(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(80);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerMaxMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerMaxMovieIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerIdx() {
      ::grpc::Service::MarkMethodCallback(81,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response) { return this->ViewerControllerIdx(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerIdx(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(81);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerSetIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerSetIdx() {
      ::grpc::Service::MarkMethodCallback(82,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response) { return this->ViewerControllerSetIdx(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerSetIdx(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(82);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerSetIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSetIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerWLWW() {
      ::grpc::Service::MarkMethodCallback(83,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response) { return this->ViewerControllerWLWW(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerWLWW(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(83);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerSetWLWW() {
      ::grpc::Service::MarkMethodCallback(84,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response) { return this->ViewerControllerSetWLWW(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerSetWLWW(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(84);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSetWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewerControllerOpenVRViewerForMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewerControllerOpenVRViewerForMode() {
      ::grpc::Service::MarkMethodCallback(85,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response) { return this->ViewerControllerOpenVRViewerForMode(context, request, response); }));}
    void SetMessageAllocatorFor_ViewerControllerOpenVRViewerForMode(
        ::grpc::MessageAllocator< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(85);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewerControllerOpenVRViewerForMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerOpenVRViewerForMode(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BrowserControllerDatabaseSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BrowserControllerDatabaseSelection() {
      ::grpc::Service::MarkMethodCallback(86,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response) { return this->BrowserControllerDatabaseSelection(context, request, response); }));}
    void SetMessageAllocatorFor_BrowserControllerDatabaseSelection(
        ::grpc::MessageAllocator< ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(86);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BrowserControllerDatabaseSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BrowserControllerDatabaseSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BrowserControllerCopyFilesIfNeeded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BrowserControllerCopyFilesIfNeeded() {
      ::grpc::Service::MarkMethodCallback(87,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response) { return this->BrowserControllerCopyFilesIfNeeded(context, request, response); }));}
    void SetMessageAllocatorFor_BrowserControllerCopyFilesIfNeeded(
        ::grpc::MessageAllocator< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(87);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BrowserControllerCopyFilesIfNeeded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BrowserControllerCopyFilesIfNeeded(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageWidth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageWidth() {
      ::grpc::Service::MarkMethodCallback(88,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response) { return this->DicomImageWidth(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageWidth(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(88);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageWidth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageWidth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageWidth(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageHeight() {
      ::grpc::Service::MarkMethodCallback(89,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response) { return this->DicomImageHeight(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageHeight(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(89);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageHeight(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageHeight(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageSOPInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageSOPInstanceUID() {
      ::grpc::Service::MarkMethodCallback(90,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response) { return this->DicomImageSOPInstanceUID(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageSOPInstanceUID(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(90);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageSOPInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageSOPInstanceUID(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageCompletePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageCompletePath() {
      ::grpc::Service::MarkMethodCallback(91,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response) { return this->DicomImageCompletePath(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageCompletePath(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(91);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageCompletePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageCompletePath(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageDate() {
      ::grpc::Service::MarkMethodCallback(92,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response) { return this->DicomImageDate(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageDate(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(92);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageDate(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageNumberOfFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageNumberOfFrames() {
      ::grpc::Service::MarkMethodCallback(93,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response) { return this->DicomImageNumberOfFrames(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageNumberOfFrames(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(93);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageNumberOfFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageNumberOfFrames(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageModality() {
      ::grpc::Service::MarkMethodCallback(94,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response) { return this->DicomImageModality(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageModality(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(94);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageModality(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageSeries() {
      ::grpc::Service::MarkMethodCallback(95,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response) { return this->DicomImageSeries(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageSeries(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(95);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageSliceLocation() {
      ::grpc::Service::MarkMethodCallback(96,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response) { return this->DicomImageSliceLocation(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageSliceLocation(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(96);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageSliceLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomImageInstanceNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomImageInstanceNumber() {
      ::grpc::Service::MarkMethodCallback(97,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response) { return this->DicomImageInstanceNumber(context, request, response); }));}
    void SetMessageAllocatorFor_DicomImageInstanceNumber(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(97);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomImageInstanceNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageInstanceNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesPaths() {
      ::grpc::Service::MarkMethodCallback(98,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response) { return this->DicomSeriesPaths(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesPaths(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(98);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesPreviousSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesPreviousSeries() {
      ::grpc::Service::MarkMethodCallback(99,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response) { return this->DicomSeriesPreviousSeries(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesPreviousSeries(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(99);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesPreviousSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesPreviousSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesNextSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesNextSeries() {
      ::grpc::Service::MarkMethodCallback(100,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response) { return this->DicomSeriesNextSeries(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesNextSeries(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(100);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesNextSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesNextSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesSortedImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesSortedImages() {
      ::grpc::Service::MarkMethodCallback(101,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response) { return this->DicomSeriesSortedImages(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesSortedImages(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(101);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesSortedImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSortedImages(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesStudy() {
      ::grpc::Service::MarkMethodCallback(102,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response) { return this->DicomSeriesStudy(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesStudy(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(102);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesStudy(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesImages() {
      ::grpc::Service::MarkMethodCallback(103,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response) { return this->DicomSeriesImages(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesImages(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(103);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesImages(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesSeriesInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesSeriesInstanceUID() {
      ::grpc::Service::MarkMethodCallback(104,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response) { return this->DicomSeriesSeriesInstanceUID(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesSeriesInstanceUID(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(104);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesSeriesInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSeriesInstanceUID(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesSeriesSOPClassUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesSeriesSOPClassUID() {
      ::grpc::Service::MarkMethodCallback(105,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response) { return this->DicomSeriesSeriesSOPClassUID(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesSeriesSOPClassUID(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(105);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesSeriesSOPClassUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSeriesSOPClassUID(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesSeriesDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesSeriesDescription() {
      ::grpc::Service::MarkMethodCallback(106,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response) { return this->DicomSeriesSeriesDescription(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesSeriesDescription(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(106);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesSeriesDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSeriesDescription(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesModality() {
      ::grpc::Service::MarkMethodCallback(107,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response) { return this->DicomSeriesModality(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesModality(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(107);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesModality(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesName() {
      ::grpc::Service::MarkMethodCallback(108,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response) { return this->DicomSeriesName(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesName(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(108);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesDate() {
      ::grpc::Service::MarkMethodCallback(109,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response) { return this->DicomSeriesDate(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesDate(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(109);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesDate(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomSeriesNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomSeriesNumberOfImages() {
      ::grpc::Service::MarkMethodCallback(110,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response) { return this->DicomSeriesNumberOfImages(context, request, response); }));}
    void SetMessageAllocatorFor_DicomSeriesNumberOfImages(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(110);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomSeriesNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesNumberOfImages(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyPaths() {
      ::grpc::Service::MarkMethodCallback(111,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response) { return this->DicomStudyPaths(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyPaths(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(111);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyImages() {
      ::grpc::Service::MarkMethodCallback(112,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response) { return this->DicomStudyImages(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyImages(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(112);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyImages(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyModalities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyModalities() {
      ::grpc::Service::MarkMethodCallback(113,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response) { return this->DicomStudyModalities(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyModalities(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(113);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyModalities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModalities(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyModalities(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyNoFiles() {
      ::grpc::Service::MarkMethodCallback(114,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response) { return this->DicomStudyNoFiles(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyNoFiles(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(114);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyNoFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyRawNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyRawNoFiles() {
      ::grpc::Service::MarkMethodCallback(115,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response) { return this->DicomStudyRawNoFiles(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyRawNoFiles(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(115);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyRawNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyRawNoFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyNoFilesExcludingMultiFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyNoFilesExcludingMultiFrames() {
      ::grpc::Service::MarkMethodCallback(116,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response) { return this->DicomStudyNoFilesExcludingMultiFrames(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyNoFilesExcludingMultiFrames(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(116);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyNoFilesExcludingMultiFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyNoFilesExcludingMultiFrames(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyNumberOfImages() {
      ::grpc::Service::MarkMethodCallback(117,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response) { return this->DicomStudyNumberOfImages(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyNumberOfImages(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(117);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyNumberOfImages(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudySeries() {
      ::grpc::Service::MarkMethodCallback(118,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response) { return this->DicomStudySeries(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudySeries(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(118);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudySeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudySeries(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyName() {
      ::grpc::Service::MarkMethodCallback(119,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response) { return this->DicomStudyName(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyName(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(119);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyDate() {
      ::grpc::Service::MarkMethodCallback(120,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response) { return this->DicomStudyDate(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyDate(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(120);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyDate(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyDateAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyDateAdded() {
      ::grpc::Service::MarkMethodCallback(121,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response) { return this->DicomStudyDateAdded(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyDateAdded(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(121);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyDateAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyDateAdded(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyDateOfBirth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyDateOfBirth() {
      ::grpc::Service::MarkMethodCallback(122,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response) { return this->DicomStudyDateOfBirth(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyDateOfBirth(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(122);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyDateOfBirth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyDateOfBirth(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyInstitutionName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyInstitutionName() {
      ::grpc::Service::MarkMethodCallback(123,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response) { return this->DicomStudyInstitutionName(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyInstitutionName(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(123);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyInstitutionName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyInstitutionName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyModality() {
      ::grpc::Service::MarkMethodCallback(124,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response) { return this->DicomStudyModality(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyModality(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(124);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyModality(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyPatientID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyPatientID() {
      ::grpc::Service::MarkMethodCallback(125,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response) { return this->DicomStudyPatientID(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyPatientID(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(125);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyPatientID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPatientID(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyPatientUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyPatientUID() {
      ::grpc::Service::MarkMethodCallback(126,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response) { return this->DicomStudyPatientUID(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyPatientUID(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(126);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyPatientUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPatientUID(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyPatientSex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyPatientSex() {
      ::grpc::Service::MarkMethodCallback(127,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response) { return this->DicomStudyPatientSex(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyPatientSex(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(127);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyPatientSex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPatientSex(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyPerformingPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyPerformingPhysician() {
      ::grpc::Service::MarkMethodCallback(128,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response) { return this->DicomStudyPerformingPhysician(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyPerformingPhysician(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(128);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyPerformingPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPerformingPhysician(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyReferringPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyReferringPhysician() {
      ::grpc::Service::MarkMethodCallback(129,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response) { return this->DicomStudyReferringPhysician(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyReferringPhysician(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(129);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyReferringPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyReferringPhysician(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyStudyInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyStudyInstanceUID() {
      ::grpc::Service::MarkMethodCallback(130,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response) { return this->DicomStudyStudyInstanceUID(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyStudyInstanceUID(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(130);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyStudyInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyStudyInstanceUID(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DicomStudyStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DicomStudyStudyName() {
      ::grpc::Service::MarkMethodCallback(131,
          new ::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response) { return this->DicomStudyStudyName(context, request, response); }));}
    void SetMessageAllocatorFor_DicomStudyStudyName(
        ::grpc::MessageAllocator< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(131);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DicomStudyStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyStudyName(
      ::grpc::CallbackServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_OsirixCurrentBrowser<WithCallbackMethod_OsirixFrontmostViewer<WithCallbackMethod_OsirixDisplayed2DViewers<WithCallbackMethod_OsirixFrontmostVRController<WithCallbackMethod_OsirixDisplayedVRControllers<WithCallbackMethod_ROIFlipHorizontally<WithCallbackMethod_ROIFlipVertically<WithCallbackMethod_ROIArea<WithCallbackMethod_ROICentroid<WithCallbackMethod_ROIRotate<WithCallbackMethod_ROIMove<WithCallbackMethod_ROIPix<WithCallbackMethod_ROIName<WithCallbackMethod_ROIIType<WithCallbackMethod_ROISetName<WithCallbackMethod_ROIColor<WithCallbackMethod_ROISetColor<WithCallbackMethod_ROIOpacity<WithCallbackMethod_ROISetOpacity<WithCallbackMethod_ROIThickness<WithCallbackMethod_ROISetThickness<WithCallbackMethod_ROIPoints<WithCallbackMethod_ROISetPoints<WithCallbackMethod_ROIVolumeTexture<WithCallbackMethod_ROIVolumeSetTexture<WithCallbackMethod_ROIVolumeVolume<WithCallbackMethod_ROIVolumeColor<WithCallbackMethod_ROIVolumeSetColor<WithCallbackMethod_ROIVolumeOpacity<WithCallbackMethod_ROIVolumeSetOpacity<WithCallbackMethod_ROIVolumeFactor<WithCallbackMethod_ROIVolumeSetFactor<WithCallbackMethod_ROIVolumeName<WithCallbackMethod_ROIVolumeVisible<WithCallbackMethod_DCMPixConvertToRGB<WithCallbackMethod_DCMPixConvertToBW<WithCallbackMethod_DCMPixIsRGB<WithCallbackMethod_DCMPixComputeROI<WithCallbackMethod_DCMPixROIValues<WithCallbackMethod_DCMPixShape<WithCallbackMethod_DCMPixSpacing<WithCallbackMethod_DCMPixOrigin<WithCallbackMethod_DCMPixOrientation<WithCallbackMethod_DCMPixSliceLocation<WithCallbackMethod_DCMPixSourceFile<WithCallbackMethod_DCMPixImage<WithCallbackMethod_DCMPixSetImage<WithCallbackMethod_DCMPixGetMapFromROI<WithCallbackMethod_DCMPixDicomImage<WithCallbackMethod_DCMPixDicomSeries<WithCallbackMethod_DCMPixDicomStudy<WithCallbackMethod_VRControllerViewer2D<WithCallbackMethod_VRControllerBlendingController<WithCallbackMethod_VRControllerStyle<WithCallbackMethod_VRControllerTitle<WithCallbackMethod_VRControllerROIVolumes<WithCallbackMethod_VRControllerRenderingMode<WithCallbackMethod_VRControllerSetRenderingMode<WithCallbackMethod_VRControllerWLWW<WithCallbackMethod_VRControllerSetWLWW<WithCallbackMethod_VRControllerHideROIVolume<WithCallbackMethod_VRControllerDisplayROIVolume<WithCallbackMethod_VRControllerNeedsDisplayUpdate<WithCallbackMethod_ViewerControllerCloseViewer<WithCallbackMethod_ViewerControllerPixList<WithCallbackMethod_ViewerControllerNeedsDisplayUpdate<WithCallbackMethod_ViewerControllerROIList<WithCallbackMethod_ViewerControllerNewROI<WithCallbackMethod_ViewerControllerCurDCM<WithCallbackMethod_ViewerControllerROIsWithName<WithCallbackMethod_ViewerControllerSelectedROIs<WithCallbackMethod_ViewerControllerIsDataVolumic<WithCallbackMethod_ViewerControllerCopyViewerWindow<WithCallbackMethod_ViewerControllerResampleViewerController<WithCallbackMethod_ViewerControllerBlendingController<WithCallbackMethod_ViewerControllerVRControllers<WithCallbackMethod_ViewerControllerTitle<WithCallbackMethod_ViewerControllerModality<WithCallbackMethod_ViewerControllerMovieIdx<WithCallbackMethod_ViewerControllerSetMovieIdx<WithCallbackMethod_ViewerControllerMaxMovieIdx<WithCallbackMethod_ViewerControllerIdx<WithCallbackMethod_ViewerControllerSetIdx<WithCallbackMethod_ViewerControllerWLWW<WithCallbackMethod_ViewerControllerSetWLWW<WithCallbackMethod_ViewerControllerOpenVRViewerForMode<WithCallbackMethod_BrowserControllerDatabaseSelection<WithCallbackMethod_BrowserControllerCopyFilesIfNeeded<WithCallbackMethod_DicomImageWidth<WithCallbackMethod_DicomImageHeight<WithCallbackMethod_DicomImageSOPInstanceUID<WithCallbackMethod_DicomImageCompletePath<WithCallbackMethod_DicomImageDate<WithCallbackMethod_DicomImageNumberOfFrames<WithCallbackMethod_DicomImageModality<WithCallbackMethod_DicomImageSeries<WithCallbackMethod_DicomImageSliceLocation<WithCallbackMethod_DicomImageInstanceNumber<WithCallbackMethod_DicomSeriesPaths<WithCallbackMethod_DicomSeriesPreviousSeries<WithCallbackMethod_DicomSeriesNextSeries<WithCallbackMethod_DicomSeriesSortedImages<WithCallbackMethod_DicomSeriesStudy<WithCallbackMethod_DicomSeriesImages<WithCallbackMethod_DicomSeriesSeriesInstanceUID<WithCallbackMethod_DicomSeriesSeriesSOPClassUID<WithCallbackMethod_DicomSeriesSeriesDescription<WithCallbackMethod_DicomSeriesModality<WithCallbackMethod_DicomSeriesName<WithCallbackMethod_DicomSeriesDate<WithCallbackMethod_DicomSeriesNumberOfImages<WithCallbackMethod_DicomStudyPaths<WithCallbackMethod_DicomStudyImages<WithCallbackMethod_DicomStudyModalities<WithCallbackMethod_DicomStudyNoFiles<WithCallbackMethod_DicomStudyRawNoFiles<WithCallbackMethod_DicomStudyNoFilesExcludingMultiFrames<WithCallbackMethod_DicomStudyNumberOfImages<WithCallbackMethod_DicomStudySeries<WithCallbackMethod_DicomStudyName<WithCallbackMethod_DicomStudyDate<WithCallbackMethod_DicomStudyDateAdded<WithCallbackMethod_DicomStudyDateOfBirth<WithCallbackMethod_DicomStudyInstitutionName<WithCallbackMethod_DicomStudyModality<WithCallbackMethod_DicomStudyPatientID<WithCallbackMethod_DicomStudyPatientUID<WithCallbackMethod_DicomStudyPatientSex<WithCallbackMethod_DicomStudyPerformingPhysician<WithCallbackMethod_DicomStudyReferringPhysician<WithCallbackMethod_DicomStudyStudyInstanceUID<WithCallbackMethod_DicomStudyStudyName<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OsirixCurrentBrowser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OsirixCurrentBrowser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OsirixCurrentBrowser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OsirixFrontmostViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OsirixFrontmostViewer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OsirixFrontmostViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OsirixDisplayed2DViewers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OsirixDisplayed2DViewers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OsirixDisplayed2DViewers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OsirixFrontmostVRController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OsirixFrontmostVRController() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OsirixFrontmostVRController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OsirixDisplayedVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OsirixDisplayedVRControllers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OsirixDisplayedVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIFlipHorizontally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIFlipHorizontally() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ROIFlipHorizontally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIFlipVertically : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIFlipVertically() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ROIFlipVertically() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipVertically(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIArea() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ROIArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIArea(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROICentroid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROICentroid() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ROICentroid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROICentroid(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIRotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIRotate() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ROIRotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIRotate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIMove() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ROIMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIMove(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIPix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIPix() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ROIPix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPix(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIName() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ROIName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIIType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIIType() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ROIIType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIIType(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROISetName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROISetName() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ROISetName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIColor() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ROIColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROISetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROISetColor() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ROISetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIOpacity() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_ROIOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROISetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROISetOpacity() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_ROISetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIThickness() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_ROIThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROISetThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROISetThickness() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_ROISetThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIPoints() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_ROIPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROISetPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROISetPoints() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_ROISetPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeTexture() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_ROIVolumeTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeSetTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeSetTexture() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_ROIVolumeSetTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeVolume() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ROIVolumeVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeColor() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_ROIVolumeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeSetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeSetColor() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_ROIVolumeSetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeOpacity() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_ROIVolumeOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeSetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeSetOpacity() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_ROIVolumeSetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeFactor() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_ROIVolumeFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeSetFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeSetFactor() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_ROIVolumeSetFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeName() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_ROIVolumeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ROIVolumeVisible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ROIVolumeVisible() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_ROIVolumeVisible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixConvertToRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixConvertToRGB() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_DCMPixConvertToRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixConvertToBW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixConvertToBW() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_DCMPixConvertToBW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixIsRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixIsRGB() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_DCMPixIsRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixComputeROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixComputeROI() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_DCMPixComputeROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixROIValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixROIValues() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_DCMPixROIValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixROIValues(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixShape() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_DCMPixShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixShape(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixSpacing() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_DCMPixSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSpacing(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixOrigin() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_DCMPixOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrigin(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixOrientation() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_DCMPixOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrientation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixSliceLocation() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_DCMPixSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixSourceFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixSourceFile() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_DCMPixSourceFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixImage() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_DCMPixImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixSetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixSetImage() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_DCMPixSetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSetImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixGetMapFromROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixGetMapFromROI() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_DCMPixGetMapFromROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixDicomImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixDicomImage() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_DCMPixDicomImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixDicomSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixDicomSeries() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_DCMPixDicomSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DCMPixDicomStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DCMPixDicomStudy() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_DCMPixDicomStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerViewer2D : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerViewer2D() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_VRControllerViewer2D() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerBlendingController() {
      ::grpc::Service::MarkMethodGeneric(52);
    }
    ~WithGenericMethod_VRControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerStyle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerStyle() {
      ::grpc::Service::MarkMethodGeneric(53);
    }
    ~WithGenericMethod_VRControllerStyle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerStyle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerTitle() {
      ::grpc::Service::MarkMethodGeneric(54);
    }
    ~WithGenericMethod_VRControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerROIVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerROIVolumes() {
      ::grpc::Service::MarkMethodGeneric(55);
    }
    ~WithGenericMethod_VRControllerROIVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerRenderingMode() {
      ::grpc::Service::MarkMethodGeneric(56);
    }
    ~WithGenericMethod_VRControllerRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerSetRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerSetRenderingMode() {
      ::grpc::Service::MarkMethodGeneric(57);
    }
    ~WithGenericMethod_VRControllerSetRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerWLWW() {
      ::grpc::Service::MarkMethodGeneric(58);
    }
    ~WithGenericMethod_VRControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerSetWLWW() {
      ::grpc::Service::MarkMethodGeneric(59);
    }
    ~WithGenericMethod_VRControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerHideROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerHideROIVolume() {
      ::grpc::Service::MarkMethodGeneric(60);
    }
    ~WithGenericMethod_VRControllerHideROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerDisplayROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerDisplayROIVolume() {
      ::grpc::Service::MarkMethodGeneric(61);
    }
    ~WithGenericMethod_VRControllerDisplayROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VRControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VRControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodGeneric(62);
    }
    ~WithGenericMethod_VRControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerCloseViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerCloseViewer() {
      ::grpc::Service::MarkMethodGeneric(63);
    }
    ~WithGenericMethod_ViewerControllerCloseViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerPixList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerPixList() {
      ::grpc::Service::MarkMethodGeneric(64);
    }
    ~WithGenericMethod_ViewerControllerPixList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodGeneric(65);
    }
    ~WithGenericMethod_ViewerControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerROIList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerROIList() {
      ::grpc::Service::MarkMethodGeneric(66);
    }
    ~WithGenericMethod_ViewerControllerROIList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerNewROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerNewROI() {
      ::grpc::Service::MarkMethodGeneric(67);
    }
    ~WithGenericMethod_ViewerControllerNewROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerCurDCM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerCurDCM() {
      ::grpc::Service::MarkMethodGeneric(68);
    }
    ~WithGenericMethod_ViewerControllerCurDCM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerROIsWithName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerROIsWithName() {
      ::grpc::Service::MarkMethodGeneric(69);
    }
    ~WithGenericMethod_ViewerControllerROIsWithName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerSelectedROIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerSelectedROIs() {
      ::grpc::Service::MarkMethodGeneric(70);
    }
    ~WithGenericMethod_ViewerControllerSelectedROIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerIsDataVolumic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerIsDataVolumic() {
      ::grpc::Service::MarkMethodGeneric(71);
    }
    ~WithGenericMethod_ViewerControllerIsDataVolumic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerCopyViewerWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerCopyViewerWindow() {
      ::grpc::Service::MarkMethodGeneric(72);
    }
    ~WithGenericMethod_ViewerControllerCopyViewerWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerResampleViewerController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerResampleViewerController() {
      ::grpc::Service::MarkMethodGeneric(73);
    }
    ~WithGenericMethod_ViewerControllerResampleViewerController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerBlendingController() {
      ::grpc::Service::MarkMethodGeneric(74);
    }
    ~WithGenericMethod_ViewerControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerVRControllers() {
      ::grpc::Service::MarkMethodGeneric(75);
    }
    ~WithGenericMethod_ViewerControllerVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerTitle() {
      ::grpc::Service::MarkMethodGeneric(76);
    }
    ~WithGenericMethod_ViewerControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerModality() {
      ::grpc::Service::MarkMethodGeneric(77);
    }
    ~WithGenericMethod_ViewerControllerModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerMovieIdx() {
      ::grpc::Service::MarkMethodGeneric(78);
    }
    ~WithGenericMethod_ViewerControllerMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerSetMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerSetMovieIdx() {
      ::grpc::Service::MarkMethodGeneric(79);
    }
    ~WithGenericMethod_ViewerControllerSetMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerMaxMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerMaxMovieIdx() {
      ::grpc::Service::MarkMethodGeneric(80);
    }
    ~WithGenericMethod_ViewerControllerMaxMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerIdx() {
      ::grpc::Service::MarkMethodGeneric(81);
    }
    ~WithGenericMethod_ViewerControllerIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerSetIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerSetIdx() {
      ::grpc::Service::MarkMethodGeneric(82);
    }
    ~WithGenericMethod_ViewerControllerSetIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerWLWW() {
      ::grpc::Service::MarkMethodGeneric(83);
    }
    ~WithGenericMethod_ViewerControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerSetWLWW() {
      ::grpc::Service::MarkMethodGeneric(84);
    }
    ~WithGenericMethod_ViewerControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewerControllerOpenVRViewerForMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewerControllerOpenVRViewerForMode() {
      ::grpc::Service::MarkMethodGeneric(85);
    }
    ~WithGenericMethod_ViewerControllerOpenVRViewerForMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BrowserControllerDatabaseSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BrowserControllerDatabaseSelection() {
      ::grpc::Service::MarkMethodGeneric(86);
    }
    ~WithGenericMethod_BrowserControllerDatabaseSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BrowserControllerCopyFilesIfNeeded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BrowserControllerCopyFilesIfNeeded() {
      ::grpc::Service::MarkMethodGeneric(87);
    }
    ~WithGenericMethod_BrowserControllerCopyFilesIfNeeded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageWidth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageWidth() {
      ::grpc::Service::MarkMethodGeneric(88);
    }
    ~WithGenericMethod_DicomImageWidth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageWidth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageHeight() {
      ::grpc::Service::MarkMethodGeneric(89);
    }
    ~WithGenericMethod_DicomImageHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageHeight(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageSOPInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageSOPInstanceUID() {
      ::grpc::Service::MarkMethodGeneric(90);
    }
    ~WithGenericMethod_DicomImageSOPInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageCompletePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageCompletePath() {
      ::grpc::Service::MarkMethodGeneric(91);
    }
    ~WithGenericMethod_DicomImageCompletePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageDate() {
      ::grpc::Service::MarkMethodGeneric(92);
    }
    ~WithGenericMethod_DicomImageDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageNumberOfFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageNumberOfFrames() {
      ::grpc::Service::MarkMethodGeneric(93);
    }
    ~WithGenericMethod_DicomImageNumberOfFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageModality() {
      ::grpc::Service::MarkMethodGeneric(94);
    }
    ~WithGenericMethod_DicomImageModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageSeries() {
      ::grpc::Service::MarkMethodGeneric(95);
    }
    ~WithGenericMethod_DicomImageSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageSliceLocation() {
      ::grpc::Service::MarkMethodGeneric(96);
    }
    ~WithGenericMethod_DicomImageSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomImageInstanceNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomImageInstanceNumber() {
      ::grpc::Service::MarkMethodGeneric(97);
    }
    ~WithGenericMethod_DicomImageInstanceNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesPaths() {
      ::grpc::Service::MarkMethodGeneric(98);
    }
    ~WithGenericMethod_DicomSeriesPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesPreviousSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesPreviousSeries() {
      ::grpc::Service::MarkMethodGeneric(99);
    }
    ~WithGenericMethod_DicomSeriesPreviousSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesNextSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesNextSeries() {
      ::grpc::Service::MarkMethodGeneric(100);
    }
    ~WithGenericMethod_DicomSeriesNextSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesSortedImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesSortedImages() {
      ::grpc::Service::MarkMethodGeneric(101);
    }
    ~WithGenericMethod_DicomSeriesSortedImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesStudy() {
      ::grpc::Service::MarkMethodGeneric(102);
    }
    ~WithGenericMethod_DicomSeriesStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesImages() {
      ::grpc::Service::MarkMethodGeneric(103);
    }
    ~WithGenericMethod_DicomSeriesImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesSeriesInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesSeriesInstanceUID() {
      ::grpc::Service::MarkMethodGeneric(104);
    }
    ~WithGenericMethod_DicomSeriesSeriesInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesSeriesSOPClassUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesSeriesSOPClassUID() {
      ::grpc::Service::MarkMethodGeneric(105);
    }
    ~WithGenericMethod_DicomSeriesSeriesSOPClassUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesSeriesDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesSeriesDescription() {
      ::grpc::Service::MarkMethodGeneric(106);
    }
    ~WithGenericMethod_DicomSeriesSeriesDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesModality() {
      ::grpc::Service::MarkMethodGeneric(107);
    }
    ~WithGenericMethod_DicomSeriesModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesName() {
      ::grpc::Service::MarkMethodGeneric(108);
    }
    ~WithGenericMethod_DicomSeriesName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesDate() {
      ::grpc::Service::MarkMethodGeneric(109);
    }
    ~WithGenericMethod_DicomSeriesDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomSeriesNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomSeriesNumberOfImages() {
      ::grpc::Service::MarkMethodGeneric(110);
    }
    ~WithGenericMethod_DicomSeriesNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyPaths() {
      ::grpc::Service::MarkMethodGeneric(111);
    }
    ~WithGenericMethod_DicomStudyPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyImages() {
      ::grpc::Service::MarkMethodGeneric(112);
    }
    ~WithGenericMethod_DicomStudyImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyModalities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyModalities() {
      ::grpc::Service::MarkMethodGeneric(113);
    }
    ~WithGenericMethod_DicomStudyModalities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModalities(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyNoFiles() {
      ::grpc::Service::MarkMethodGeneric(114);
    }
    ~WithGenericMethod_DicomStudyNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyRawNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyRawNoFiles() {
      ::grpc::Service::MarkMethodGeneric(115);
    }
    ~WithGenericMethod_DicomStudyRawNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyNoFilesExcludingMultiFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyNoFilesExcludingMultiFrames() {
      ::grpc::Service::MarkMethodGeneric(116);
    }
    ~WithGenericMethod_DicomStudyNoFilesExcludingMultiFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyNumberOfImages() {
      ::grpc::Service::MarkMethodGeneric(117);
    }
    ~WithGenericMethod_DicomStudyNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudySeries() {
      ::grpc::Service::MarkMethodGeneric(118);
    }
    ~WithGenericMethod_DicomStudySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudySeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyName() {
      ::grpc::Service::MarkMethodGeneric(119);
    }
    ~WithGenericMethod_DicomStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyDate() {
      ::grpc::Service::MarkMethodGeneric(120);
    }
    ~WithGenericMethod_DicomStudyDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyDateAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyDateAdded() {
      ::grpc::Service::MarkMethodGeneric(121);
    }
    ~WithGenericMethod_DicomStudyDateAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyDateOfBirth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyDateOfBirth() {
      ::grpc::Service::MarkMethodGeneric(122);
    }
    ~WithGenericMethod_DicomStudyDateOfBirth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyInstitutionName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyInstitutionName() {
      ::grpc::Service::MarkMethodGeneric(123);
    }
    ~WithGenericMethod_DicomStudyInstitutionName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyModality() {
      ::grpc::Service::MarkMethodGeneric(124);
    }
    ~WithGenericMethod_DicomStudyModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyPatientID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyPatientID() {
      ::grpc::Service::MarkMethodGeneric(125);
    }
    ~WithGenericMethod_DicomStudyPatientID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyPatientUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyPatientUID() {
      ::grpc::Service::MarkMethodGeneric(126);
    }
    ~WithGenericMethod_DicomStudyPatientUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyPatientSex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyPatientSex() {
      ::grpc::Service::MarkMethodGeneric(127);
    }
    ~WithGenericMethod_DicomStudyPatientSex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyPerformingPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyPerformingPhysician() {
      ::grpc::Service::MarkMethodGeneric(128);
    }
    ~WithGenericMethod_DicomStudyPerformingPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyReferringPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyReferringPhysician() {
      ::grpc::Service::MarkMethodGeneric(129);
    }
    ~WithGenericMethod_DicomStudyReferringPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyStudyInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyStudyInstanceUID() {
      ::grpc::Service::MarkMethodGeneric(130);
    }
    ~WithGenericMethod_DicomStudyStudyInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DicomStudyStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DicomStudyStudyName() {
      ::grpc::Service::MarkMethodGeneric(131);
    }
    ~WithGenericMethod_DicomStudyStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OsirixCurrentBrowser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OsirixCurrentBrowser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OsirixCurrentBrowser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixCurrentBrowser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OsirixFrontmostViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OsirixFrontmostViewer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OsirixFrontmostViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixFrontmostViewer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OsirixDisplayed2DViewers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OsirixDisplayed2DViewers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OsirixDisplayed2DViewers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixDisplayed2DViewers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OsirixFrontmostVRController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OsirixFrontmostVRController() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OsirixFrontmostVRController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixFrontmostVRController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OsirixDisplayedVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OsirixDisplayedVRControllers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OsirixDisplayedVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOsirixDisplayedVRControllers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIFlipHorizontally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIFlipHorizontally() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ROIFlipHorizontally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIFlipHorizontally(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIFlipVertically : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIFlipVertically() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ROIFlipVertically() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipVertically(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIFlipVertically(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIArea() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ROIArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIArea(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROICentroid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROICentroid() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ROICentroid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROICentroid(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROICentroid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIRotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIRotate() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ROIRotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIRotate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIRotate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIMove() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ROIMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIMove(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIPix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIPix() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ROIPix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPix(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIPix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIName() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ROIName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIIType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIIType() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ROIIType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIIType(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIIType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROISetName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROISetName() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ROISetName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIColor() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ROIColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROISetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROISetColor() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ROISetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIOpacity() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_ROIOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIOpacity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROISetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROISetOpacity() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_ROISetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetOpacity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIThickness() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_ROIThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIThickness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROISetThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROISetThickness() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_ROISetThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetThickness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIPoints() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_ROIPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROISetPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROISetPoints() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_ROISetPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROISetPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeTexture() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_ROIVolumeTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeTexture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeSetTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeSetTexture() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_ROIVolumeSetTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetTexture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeVolume() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ROIVolumeVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeColor() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_ROIVolumeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeSetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeSetColor() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_ROIVolumeSetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeOpacity() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_ROIVolumeOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeOpacity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeSetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeSetOpacity() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_ROIVolumeSetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetOpacity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeFactor() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_ROIVolumeFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeFactor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeSetFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeSetFactor() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_ROIVolumeSetFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeSetFactor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeName() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_ROIVolumeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ROIVolumeVisible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ROIVolumeVisible() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_ROIVolumeVisible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestROIVolumeVisible(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixConvertToRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixConvertToRGB() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_DCMPixConvertToRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixConvertToRGB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixConvertToBW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixConvertToBW() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_DCMPixConvertToBW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixConvertToBW(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixIsRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixIsRGB() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_DCMPixIsRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixIsRGB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixComputeROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixComputeROI() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_DCMPixComputeROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixComputeROI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixROIValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixROIValues() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_DCMPixROIValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixROIValues(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixROIValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixShape() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_DCMPixShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixShape(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixShape(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixSpacing() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_DCMPixSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSpacing(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSpacing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixOrigin() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_DCMPixOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrigin(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixOrigin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixOrientation() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_DCMPixOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrientation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixOrientation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixSliceLocation() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_DCMPixSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSliceLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixSourceFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixSourceFile() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_DCMPixSourceFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSourceFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixImage() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_DCMPixImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixSetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixSetImage() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_DCMPixSetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSetImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixSetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixGetMapFromROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixGetMapFromROI() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_DCMPixGetMapFromROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixGetMapFromROI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixDicomImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixDicomImage() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_DCMPixDicomImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixDicomImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixDicomSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixDicomSeries() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_DCMPixDicomSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixDicomSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DCMPixDicomStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DCMPixDicomStudy() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_DCMPixDicomStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDCMPixDicomStudy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerViewer2D : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerViewer2D() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_VRControllerViewer2D() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerViewer2D(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerBlendingController() {
      ::grpc::Service::MarkMethodRaw(52);
    }
    ~WithRawMethod_VRControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerBlendingController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerStyle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerStyle() {
      ::grpc::Service::MarkMethodRaw(53);
    }
    ~WithRawMethod_VRControllerStyle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerStyle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerStyle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerTitle() {
      ::grpc::Service::MarkMethodRaw(54);
    }
    ~WithRawMethod_VRControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerTitle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerROIVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerROIVolumes() {
      ::grpc::Service::MarkMethodRaw(55);
    }
    ~WithRawMethod_VRControllerROIVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerROIVolumes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerRenderingMode() {
      ::grpc::Service::MarkMethodRaw(56);
    }
    ~WithRawMethod_VRControllerRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerRenderingMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerSetRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerSetRenderingMode() {
      ::grpc::Service::MarkMethodRaw(57);
    }
    ~WithRawMethod_VRControllerSetRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerSetRenderingMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerWLWW() {
      ::grpc::Service::MarkMethodRaw(58);
    }
    ~WithRawMethod_VRControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerWLWW(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerSetWLWW() {
      ::grpc::Service::MarkMethodRaw(59);
    }
    ~WithRawMethod_VRControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerSetWLWW(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerHideROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerHideROIVolume() {
      ::grpc::Service::MarkMethodRaw(60);
    }
    ~WithRawMethod_VRControllerHideROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerHideROIVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerDisplayROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerDisplayROIVolume() {
      ::grpc::Service::MarkMethodRaw(61);
    }
    ~WithRawMethod_VRControllerDisplayROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerDisplayROIVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VRControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VRControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodRaw(62);
    }
    ~WithRawMethod_VRControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVRControllerNeedsDisplayUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerCloseViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerCloseViewer() {
      ::grpc::Service::MarkMethodRaw(63);
    }
    ~WithRawMethod_ViewerControllerCloseViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerCloseViewer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerPixList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerPixList() {
      ::grpc::Service::MarkMethodRaw(64);
    }
    ~WithRawMethod_ViewerControllerPixList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerPixList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodRaw(65);
    }
    ~WithRawMethod_ViewerControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerROIList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerROIList() {
      ::grpc::Service::MarkMethodRaw(66);
    }
    ~WithRawMethod_ViewerControllerROIList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerROIList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerNewROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerNewROI() {
      ::grpc::Service::MarkMethodRaw(67);
    }
    ~WithRawMethod_ViewerControllerNewROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerNewROI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerCurDCM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerCurDCM() {
      ::grpc::Service::MarkMethodRaw(68);
    }
    ~WithRawMethod_ViewerControllerCurDCM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerCurDCM(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerROIsWithName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerROIsWithName() {
      ::grpc::Service::MarkMethodRaw(69);
    }
    ~WithRawMethod_ViewerControllerROIsWithName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerROIsWithName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerSelectedROIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerSelectedROIs() {
      ::grpc::Service::MarkMethodRaw(70);
    }
    ~WithRawMethod_ViewerControllerSelectedROIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSelectedROIs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerIsDataVolumic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerIsDataVolumic() {
      ::grpc::Service::MarkMethodRaw(71);
    }
    ~WithRawMethod_ViewerControllerIsDataVolumic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerIsDataVolumic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerCopyViewerWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerCopyViewerWindow() {
      ::grpc::Service::MarkMethodRaw(72);
    }
    ~WithRawMethod_ViewerControllerCopyViewerWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerCopyViewerWindow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerResampleViewerController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerResampleViewerController() {
      ::grpc::Service::MarkMethodRaw(73);
    }
    ~WithRawMethod_ViewerControllerResampleViewerController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerResampleViewerController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerBlendingController() {
      ::grpc::Service::MarkMethodRaw(74);
    }
    ~WithRawMethod_ViewerControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerBlendingController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerVRControllers() {
      ::grpc::Service::MarkMethodRaw(75);
    }
    ~WithRawMethod_ViewerControllerVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerVRControllers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerTitle() {
      ::grpc::Service::MarkMethodRaw(76);
    }
    ~WithRawMethod_ViewerControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerTitle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerModality() {
      ::grpc::Service::MarkMethodRaw(77);
    }
    ~WithRawMethod_ViewerControllerModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerModality(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerMovieIdx() {
      ::grpc::Service::MarkMethodRaw(78);
    }
    ~WithRawMethod_ViewerControllerMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerMovieIdx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerSetMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerSetMovieIdx() {
      ::grpc::Service::MarkMethodRaw(79);
    }
    ~WithRawMethod_ViewerControllerSetMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSetMovieIdx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerMaxMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerMaxMovieIdx() {
      ::grpc::Service::MarkMethodRaw(80);
    }
    ~WithRawMethod_ViewerControllerMaxMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerMaxMovieIdx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerIdx() {
      ::grpc::Service::MarkMethodRaw(81);
    }
    ~WithRawMethod_ViewerControllerIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerIdx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerSetIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerSetIdx() {
      ::grpc::Service::MarkMethodRaw(82);
    }
    ~WithRawMethod_ViewerControllerSetIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSetIdx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerWLWW() {
      ::grpc::Service::MarkMethodRaw(83);
    }
    ~WithRawMethod_ViewerControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerWLWW(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(83, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerSetWLWW() {
      ::grpc::Service::MarkMethodRaw(84);
    }
    ~WithRawMethod_ViewerControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerSetWLWW(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(84, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewerControllerOpenVRViewerForMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewerControllerOpenVRViewerForMode() {
      ::grpc::Service::MarkMethodRaw(85);
    }
    ~WithRawMethod_ViewerControllerOpenVRViewerForMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewerControllerOpenVRViewerForMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(85, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BrowserControllerDatabaseSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BrowserControllerDatabaseSelection() {
      ::grpc::Service::MarkMethodRaw(86);
    }
    ~WithRawMethod_BrowserControllerDatabaseSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBrowserControllerDatabaseSelection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(86, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BrowserControllerCopyFilesIfNeeded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BrowserControllerCopyFilesIfNeeded() {
      ::grpc::Service::MarkMethodRaw(87);
    }
    ~WithRawMethod_BrowserControllerCopyFilesIfNeeded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(87, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageWidth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageWidth() {
      ::grpc::Service::MarkMethodRaw(88);
    }
    ~WithRawMethod_DicomImageWidth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageWidth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageWidth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(88, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageHeight() {
      ::grpc::Service::MarkMethodRaw(89);
    }
    ~WithRawMethod_DicomImageHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageHeight(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageHeight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(89, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageSOPInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageSOPInstanceUID() {
      ::grpc::Service::MarkMethodRaw(90);
    }
    ~WithRawMethod_DicomImageSOPInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageSOPInstanceUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(90, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageCompletePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageCompletePath() {
      ::grpc::Service::MarkMethodRaw(91);
    }
    ~WithRawMethod_DicomImageCompletePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageCompletePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(91, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageDate() {
      ::grpc::Service::MarkMethodRaw(92);
    }
    ~WithRawMethod_DicomImageDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(92, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageNumberOfFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageNumberOfFrames() {
      ::grpc::Service::MarkMethodRaw(93);
    }
    ~WithRawMethod_DicomImageNumberOfFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageNumberOfFrames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(93, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageModality() {
      ::grpc::Service::MarkMethodRaw(94);
    }
    ~WithRawMethod_DicomImageModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageModality(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(94, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageSeries() {
      ::grpc::Service::MarkMethodRaw(95);
    }
    ~WithRawMethod_DicomImageSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(95, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageSliceLocation() {
      ::grpc::Service::MarkMethodRaw(96);
    }
    ~WithRawMethod_DicomImageSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageSliceLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(96, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomImageInstanceNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomImageInstanceNumber() {
      ::grpc::Service::MarkMethodRaw(97);
    }
    ~WithRawMethod_DicomImageInstanceNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomImageInstanceNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(97, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesPaths() {
      ::grpc::Service::MarkMethodRaw(98);
    }
    ~WithRawMethod_DicomSeriesPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesPaths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(98, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesPreviousSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesPreviousSeries() {
      ::grpc::Service::MarkMethodRaw(99);
    }
    ~WithRawMethod_DicomSeriesPreviousSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesPreviousSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(99, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesNextSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesNextSeries() {
      ::grpc::Service::MarkMethodRaw(100);
    }
    ~WithRawMethod_DicomSeriesNextSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesNextSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(100, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesSortedImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesSortedImages() {
      ::grpc::Service::MarkMethodRaw(101);
    }
    ~WithRawMethod_DicomSeriesSortedImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSortedImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(101, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesStudy() {
      ::grpc::Service::MarkMethodRaw(102);
    }
    ~WithRawMethod_DicomSeriesStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesStudy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(102, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesImages() {
      ::grpc::Service::MarkMethodRaw(103);
    }
    ~WithRawMethod_DicomSeriesImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(103, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesSeriesInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesSeriesInstanceUID() {
      ::grpc::Service::MarkMethodRaw(104);
    }
    ~WithRawMethod_DicomSeriesSeriesInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSeriesInstanceUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(104, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesSeriesSOPClassUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesSeriesSOPClassUID() {
      ::grpc::Service::MarkMethodRaw(105);
    }
    ~WithRawMethod_DicomSeriesSeriesSOPClassUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSeriesSOPClassUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(105, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesSeriesDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesSeriesDescription() {
      ::grpc::Service::MarkMethodRaw(106);
    }
    ~WithRawMethod_DicomSeriesSeriesDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesSeriesDescription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(106, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesModality() {
      ::grpc::Service::MarkMethodRaw(107);
    }
    ~WithRawMethod_DicomSeriesModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesModality(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(107, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesName() {
      ::grpc::Service::MarkMethodRaw(108);
    }
    ~WithRawMethod_DicomSeriesName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(108, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesDate() {
      ::grpc::Service::MarkMethodRaw(109);
    }
    ~WithRawMethod_DicomSeriesDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(109, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomSeriesNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomSeriesNumberOfImages() {
      ::grpc::Service::MarkMethodRaw(110);
    }
    ~WithRawMethod_DicomSeriesNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomSeriesNumberOfImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(110, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyPaths() {
      ::grpc::Service::MarkMethodRaw(111);
    }
    ~WithRawMethod_DicomStudyPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPaths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(111, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyImages() {
      ::grpc::Service::MarkMethodRaw(112);
    }
    ~WithRawMethod_DicomStudyImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(112, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyModalities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyModalities() {
      ::grpc::Service::MarkMethodRaw(113);
    }
    ~WithRawMethod_DicomStudyModalities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModalities(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyModalities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(113, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyNoFiles() {
      ::grpc::Service::MarkMethodRaw(114);
    }
    ~WithRawMethod_DicomStudyNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyNoFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(114, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyRawNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyRawNoFiles() {
      ::grpc::Service::MarkMethodRaw(115);
    }
    ~WithRawMethod_DicomStudyRawNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyRawNoFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(115, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyNoFilesExcludingMultiFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyNoFilesExcludingMultiFrames() {
      ::grpc::Service::MarkMethodRaw(116);
    }
    ~WithRawMethod_DicomStudyNoFilesExcludingMultiFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(116, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyNumberOfImages() {
      ::grpc::Service::MarkMethodRaw(117);
    }
    ~WithRawMethod_DicomStudyNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyNumberOfImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(117, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudySeries() {
      ::grpc::Service::MarkMethodRaw(118);
    }
    ~WithRawMethod_DicomStudySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudySeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudySeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(118, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyName() {
      ::grpc::Service::MarkMethodRaw(119);
    }
    ~WithRawMethod_DicomStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(119, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyDate() {
      ::grpc::Service::MarkMethodRaw(120);
    }
    ~WithRawMethod_DicomStudyDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(120, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyDateAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyDateAdded() {
      ::grpc::Service::MarkMethodRaw(121);
    }
    ~WithRawMethod_DicomStudyDateAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyDateAdded(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(121, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyDateOfBirth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyDateOfBirth() {
      ::grpc::Service::MarkMethodRaw(122);
    }
    ~WithRawMethod_DicomStudyDateOfBirth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyDateOfBirth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(122, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyInstitutionName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyInstitutionName() {
      ::grpc::Service::MarkMethodRaw(123);
    }
    ~WithRawMethod_DicomStudyInstitutionName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyInstitutionName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(123, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyModality() {
      ::grpc::Service::MarkMethodRaw(124);
    }
    ~WithRawMethod_DicomStudyModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyModality(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(124, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyPatientID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyPatientID() {
      ::grpc::Service::MarkMethodRaw(125);
    }
    ~WithRawMethod_DicomStudyPatientID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPatientID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(125, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyPatientUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyPatientUID() {
      ::grpc::Service::MarkMethodRaw(126);
    }
    ~WithRawMethod_DicomStudyPatientUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPatientUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(126, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyPatientSex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyPatientSex() {
      ::grpc::Service::MarkMethodRaw(127);
    }
    ~WithRawMethod_DicomStudyPatientSex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPatientSex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(127, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyPerformingPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyPerformingPhysician() {
      ::grpc::Service::MarkMethodRaw(128);
    }
    ~WithRawMethod_DicomStudyPerformingPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyPerformingPhysician(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(128, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyReferringPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyReferringPhysician() {
      ::grpc::Service::MarkMethodRaw(129);
    }
    ~WithRawMethod_DicomStudyReferringPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyReferringPhysician(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(129, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyStudyInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyStudyInstanceUID() {
      ::grpc::Service::MarkMethodRaw(130);
    }
    ~WithRawMethod_DicomStudyStudyInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyStudyInstanceUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(130, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DicomStudyStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DicomStudyStudyName() {
      ::grpc::Service::MarkMethodRaw(131);
    }
    ~WithRawMethod_DicomStudyStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDicomStudyStudyName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(131, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OsirixCurrentBrowser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OsirixCurrentBrowser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OsirixCurrentBrowser(context, request, response); }));
    }
    ~WithRawCallbackMethod_OsirixCurrentBrowser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixCurrentBrowser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OsirixFrontmostViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OsirixFrontmostViewer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OsirixFrontmostViewer(context, request, response); }));
    }
    ~WithRawCallbackMethod_OsirixFrontmostViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixFrontmostViewer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OsirixDisplayed2DViewers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OsirixDisplayed2DViewers() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OsirixDisplayed2DViewers(context, request, response); }));
    }
    ~WithRawCallbackMethod_OsirixDisplayed2DViewers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixDisplayed2DViewers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OsirixFrontmostVRController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OsirixFrontmostVRController() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OsirixFrontmostVRController(context, request, response); }));
    }
    ~WithRawCallbackMethod_OsirixFrontmostVRController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixFrontmostVRController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OsirixDisplayedVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OsirixDisplayedVRControllers() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OsirixDisplayedVRControllers(context, request, response); }));
    }
    ~WithRawCallbackMethod_OsirixDisplayedVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OsirixDisplayedVRControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIFlipHorizontally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIFlipHorizontally() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIFlipHorizontally(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIFlipHorizontally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIFlipHorizontally(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIFlipVertically : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIFlipVertically() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIFlipVertically(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIFlipVertically() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIFlipVertically(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIFlipVertically(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIArea() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIArea(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIArea(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROICentroid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROICentroid() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROICentroid(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROICentroid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROICentroid(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROICentroid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIRotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIRotate() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIRotate(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIRotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIRotate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIRotate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIMove() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIMove(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIMove(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIMove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIPix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIPix() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIPix(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIPix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPix(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIPix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIName() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIName(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIIType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIIType() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIIType(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIIType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIIType(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIIType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROISetName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROISetName() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROISetName(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROISetName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIColor() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROISetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROISetColor() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROISetColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROISetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIOpacity() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIOpacity(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROISetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROISetOpacity() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROISetOpacity(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROISetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIThickness() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIThickness(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIThickness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROISetThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROISetThickness() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROISetThickness(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROISetThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetThickness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIPoints() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIPoints(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROISetPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROISetPoints() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROISetPoints(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROISetPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROISetPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROISetPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeTexture() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeTexture(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeTexture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeSetTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeSetTexture() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeSetTexture(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeSetTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetTexture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeVolume() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeColor() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeSetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeSetColor() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeSetColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeSetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeOpacity() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeOpacity(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeSetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeSetOpacity() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeSetOpacity(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeSetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetOpacity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeFactor() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeFactor(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeFactor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeSetFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeSetFactor() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeSetFactor(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeSetFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeSetFactor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeName() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ROIVolumeVisible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ROIVolumeVisible() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ROIVolumeVisible(context, request, response); }));
    }
    ~WithRawCallbackMethod_ROIVolumeVisible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ROIVolumeVisible(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixConvertToRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixConvertToRGB() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixConvertToRGB(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixConvertToRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixConvertToRGB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixConvertToBW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixConvertToBW() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixConvertToBW(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixConvertToBW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixConvertToBW(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixIsRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixIsRGB() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixIsRGB(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixIsRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixIsRGB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixComputeROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixComputeROI() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixComputeROI(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixComputeROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixComputeROI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixROIValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixROIValues() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixROIValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixROIValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixROIValues(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixROIValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixShape() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixShape(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixShape(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixShape(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixSpacing() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixSpacing(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSpacing(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSpacing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixOrigin() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixOrigin(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrigin(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixOrigin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixOrientation() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixOrientation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixOrientation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixOrientation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixSliceLocation() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixSliceLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSliceLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixSourceFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixSourceFile() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixSourceFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixSourceFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSourceFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixImage() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixSetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixSetImage() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixSetImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixSetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixSetImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixSetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixGetMapFromROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixGetMapFromROI() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixGetMapFromROI(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixGetMapFromROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixGetMapFromROI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixDicomImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixDicomImage() {
      ::grpc::Service::MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixDicomImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixDicomImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixDicomImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixDicomSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixDicomSeries() {
      ::grpc::Service::MarkMethodRawCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixDicomSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixDicomSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixDicomSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DCMPixDicomStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DCMPixDicomStudy() {
      ::grpc::Service::MarkMethodRawCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DCMPixDicomStudy(context, request, response); }));
    }
    ~WithRawCallbackMethod_DCMPixDicomStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DCMPixDicomStudy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerViewer2D : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerViewer2D() {
      ::grpc::Service::MarkMethodRawCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerViewer2D(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerViewer2D() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerViewer2D(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerBlendingController() {
      ::grpc::Service::MarkMethodRawCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerBlendingController(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerBlendingController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerStyle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerStyle() {
      ::grpc::Service::MarkMethodRawCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerStyle(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerStyle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerStyle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerStyle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerTitle() {
      ::grpc::Service::MarkMethodRawCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerTitle(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerTitle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerROIVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerROIVolumes() {
      ::grpc::Service::MarkMethodRawCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerROIVolumes(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerROIVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerROIVolumes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerRenderingMode() {
      ::grpc::Service::MarkMethodRawCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerRenderingMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerRenderingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerSetRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerSetRenderingMode() {
      ::grpc::Service::MarkMethodRawCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerSetRenderingMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerSetRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerSetRenderingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerWLWW() {
      ::grpc::Service::MarkMethodRawCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerWLWW(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerSetWLWW() {
      ::grpc::Service::MarkMethodRawCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerSetWLWW(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerSetWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerHideROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerHideROIVolume() {
      ::grpc::Service::MarkMethodRawCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerHideROIVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerHideROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerHideROIVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerDisplayROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerDisplayROIVolume() {
      ::grpc::Service::MarkMethodRawCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerDisplayROIVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerDisplayROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerDisplayROIVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VRControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VRControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodRawCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VRControllerNeedsDisplayUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_VRControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VRControllerNeedsDisplayUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerCloseViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerCloseViewer() {
      ::grpc::Service::MarkMethodRawCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerCloseViewer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerCloseViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerCloseViewer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerPixList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerPixList() {
      ::grpc::Service::MarkMethodRawCallback(64,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerPixList(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerPixList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerPixList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodRawCallback(65,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerNeedsDisplayUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerNeedsDisplayUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerROIList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerROIList() {
      ::grpc::Service::MarkMethodRawCallback(66,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerROIList(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerROIList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerROIList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerNewROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerNewROI() {
      ::grpc::Service::MarkMethodRawCallback(67,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerNewROI(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerNewROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerNewROI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerCurDCM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerCurDCM() {
      ::grpc::Service::MarkMethodRawCallback(68,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerCurDCM(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerCurDCM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerCurDCM(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerROIsWithName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerROIsWithName() {
      ::grpc::Service::MarkMethodRawCallback(69,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerROIsWithName(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerROIsWithName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerROIsWithName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerSelectedROIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerSelectedROIs() {
      ::grpc::Service::MarkMethodRawCallback(70,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerSelectedROIs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerSelectedROIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSelectedROIs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerIsDataVolumic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerIsDataVolumic() {
      ::grpc::Service::MarkMethodRawCallback(71,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerIsDataVolumic(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerIsDataVolumic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerIsDataVolumic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerCopyViewerWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerCopyViewerWindow() {
      ::grpc::Service::MarkMethodRawCallback(72,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerCopyViewerWindow(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerCopyViewerWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerCopyViewerWindow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerResampleViewerController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerResampleViewerController() {
      ::grpc::Service::MarkMethodRawCallback(73,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerResampleViewerController(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerResampleViewerController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerResampleViewerController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerBlendingController() {
      ::grpc::Service::MarkMethodRawCallback(74,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerBlendingController(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerBlendingController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerVRControllers() {
      ::grpc::Service::MarkMethodRawCallback(75,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerVRControllers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerVRControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerTitle() {
      ::grpc::Service::MarkMethodRawCallback(76,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerTitle(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerTitle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerModality() {
      ::grpc::Service::MarkMethodRawCallback(77,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerModality(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerModality(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerMovieIdx() {
      ::grpc::Service::MarkMethodRawCallback(78,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerMovieIdx(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerMovieIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerSetMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerSetMovieIdx() {
      ::grpc::Service::MarkMethodRawCallback(79,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerSetMovieIdx(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerSetMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSetMovieIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerMaxMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerMaxMovieIdx() {
      ::grpc::Service::MarkMethodRawCallback(80,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerMaxMovieIdx(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerMaxMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerMaxMovieIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerIdx() {
      ::grpc::Service::MarkMethodRawCallback(81,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerIdx(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerSetIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerSetIdx() {
      ::grpc::Service::MarkMethodRawCallback(82,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerSetIdx(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerSetIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSetIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerWLWW() {
      ::grpc::Service::MarkMethodRawCallback(83,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerWLWW(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerSetWLWW() {
      ::grpc::Service::MarkMethodRawCallback(84,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerSetWLWW(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerSetWLWW(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewerControllerOpenVRViewerForMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewerControllerOpenVRViewerForMode() {
      ::grpc::Service::MarkMethodRawCallback(85,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewerControllerOpenVRViewerForMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewerControllerOpenVRViewerForMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewerControllerOpenVRViewerForMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BrowserControllerDatabaseSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BrowserControllerDatabaseSelection() {
      ::grpc::Service::MarkMethodRawCallback(86,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BrowserControllerDatabaseSelection(context, request, response); }));
    }
    ~WithRawCallbackMethod_BrowserControllerDatabaseSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BrowserControllerDatabaseSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BrowserControllerCopyFilesIfNeeded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BrowserControllerCopyFilesIfNeeded() {
      ::grpc::Service::MarkMethodRawCallback(87,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BrowserControllerCopyFilesIfNeeded(context, request, response); }));
    }
    ~WithRawCallbackMethod_BrowserControllerCopyFilesIfNeeded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BrowserControllerCopyFilesIfNeeded(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageWidth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageWidth() {
      ::grpc::Service::MarkMethodRawCallback(88,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageWidth(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageWidth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageWidth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageWidth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageHeight() {
      ::grpc::Service::MarkMethodRawCallback(89,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageHeight(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageHeight(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageHeight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageSOPInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageSOPInstanceUID() {
      ::grpc::Service::MarkMethodRawCallback(90,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageSOPInstanceUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageSOPInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageSOPInstanceUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageCompletePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageCompletePath() {
      ::grpc::Service::MarkMethodRawCallback(91,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageCompletePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageCompletePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageCompletePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageDate() {
      ::grpc::Service::MarkMethodRawCallback(92,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageDate(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageNumberOfFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageNumberOfFrames() {
      ::grpc::Service::MarkMethodRawCallback(93,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageNumberOfFrames(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageNumberOfFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageNumberOfFrames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageModality() {
      ::grpc::Service::MarkMethodRawCallback(94,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageModality(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageModality(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageSeries() {
      ::grpc::Service::MarkMethodRawCallback(95,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageSliceLocation() {
      ::grpc::Service::MarkMethodRawCallback(96,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageSliceLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageSliceLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomImageInstanceNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomImageInstanceNumber() {
      ::grpc::Service::MarkMethodRawCallback(97,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomImageInstanceNumber(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomImageInstanceNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomImageInstanceNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesPaths() {
      ::grpc::Service::MarkMethodRawCallback(98,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesPaths(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesPreviousSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesPreviousSeries() {
      ::grpc::Service::MarkMethodRawCallback(99,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesPreviousSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesPreviousSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesPreviousSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesNextSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesNextSeries() {
      ::grpc::Service::MarkMethodRawCallback(100,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesNextSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesNextSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesNextSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesSortedImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesSortedImages() {
      ::grpc::Service::MarkMethodRawCallback(101,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesSortedImages(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesSortedImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSortedImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesStudy() {
      ::grpc::Service::MarkMethodRawCallback(102,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesStudy(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesStudy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesImages() {
      ::grpc::Service::MarkMethodRawCallback(103,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesImages(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesSeriesInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesSeriesInstanceUID() {
      ::grpc::Service::MarkMethodRawCallback(104,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesSeriesInstanceUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesSeriesInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSeriesInstanceUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesSeriesSOPClassUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesSeriesSOPClassUID() {
      ::grpc::Service::MarkMethodRawCallback(105,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesSeriesSOPClassUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesSeriesSOPClassUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSeriesSOPClassUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesSeriesDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesSeriesDescription() {
      ::grpc::Service::MarkMethodRawCallback(106,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesSeriesDescription(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesSeriesDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesSeriesDescription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesModality() {
      ::grpc::Service::MarkMethodRawCallback(107,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesModality(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesModality(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesName() {
      ::grpc::Service::MarkMethodRawCallback(108,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesName(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesDate() {
      ::grpc::Service::MarkMethodRawCallback(109,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesDate(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomSeriesNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomSeriesNumberOfImages() {
      ::grpc::Service::MarkMethodRawCallback(110,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomSeriesNumberOfImages(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomSeriesNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomSeriesNumberOfImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyPaths() {
      ::grpc::Service::MarkMethodRawCallback(111,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyPaths(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyImages() {
      ::grpc::Service::MarkMethodRawCallback(112,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyImages(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyModalities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyModalities() {
      ::grpc::Service::MarkMethodRawCallback(113,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyModalities(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyModalities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModalities(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyModalities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyNoFiles() {
      ::grpc::Service::MarkMethodRawCallback(114,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyNoFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyNoFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyRawNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyRawNoFiles() {
      ::grpc::Service::MarkMethodRawCallback(115,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyRawNoFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyRawNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyRawNoFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyNoFilesExcludingMultiFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyNoFilesExcludingMultiFrames() {
      ::grpc::Service::MarkMethodRawCallback(116,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyNoFilesExcludingMultiFrames(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyNoFilesExcludingMultiFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyNoFilesExcludingMultiFrames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyNumberOfImages() {
      ::grpc::Service::MarkMethodRawCallback(117,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyNumberOfImages(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyNumberOfImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudySeries() {
      ::grpc::Service::MarkMethodRawCallback(118,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudySeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudySeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudySeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyName() {
      ::grpc::Service::MarkMethodRawCallback(119,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyName(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyDate() {
      ::grpc::Service::MarkMethodRawCallback(120,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyDate(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyDateAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyDateAdded() {
      ::grpc::Service::MarkMethodRawCallback(121,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyDateAdded(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyDateAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyDateAdded(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyDateOfBirth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyDateOfBirth() {
      ::grpc::Service::MarkMethodRawCallback(122,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyDateOfBirth(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyDateOfBirth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyDateOfBirth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyInstitutionName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyInstitutionName() {
      ::grpc::Service::MarkMethodRawCallback(123,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyInstitutionName(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyInstitutionName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyInstitutionName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyModality() {
      ::grpc::Service::MarkMethodRawCallback(124,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyModality(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyModality(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyPatientID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyPatientID() {
      ::grpc::Service::MarkMethodRawCallback(125,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyPatientID(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyPatientID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPatientID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyPatientUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyPatientUID() {
      ::grpc::Service::MarkMethodRawCallback(126,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyPatientUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyPatientUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPatientUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyPatientSex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyPatientSex() {
      ::grpc::Service::MarkMethodRawCallback(127,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyPatientSex(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyPatientSex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPatientSex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyPerformingPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyPerformingPhysician() {
      ::grpc::Service::MarkMethodRawCallback(128,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyPerformingPhysician(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyPerformingPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyPerformingPhysician(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyReferringPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyReferringPhysician() {
      ::grpc::Service::MarkMethodRawCallback(129,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyReferringPhysician(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyReferringPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyReferringPhysician(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyStudyInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyStudyInstanceUID() {
      ::grpc::Service::MarkMethodRawCallback(130,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyStudyInstanceUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyStudyInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyStudyInstanceUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DicomStudyStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DicomStudyStudyName() {
      ::grpc::Service::MarkMethodRawCallback(131,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DicomStudyStudyName(context, request, response); }));
    }
    ~WithRawCallbackMethod_DicomStudyStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DicomStudyStudyName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OsirixCurrentBrowser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OsirixCurrentBrowser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse>* streamer) {
                       return this->StreamedOsirixCurrentBrowser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OsirixCurrentBrowser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OsirixCurrentBrowser(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixCurrentBrowserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOsirixCurrentBrowser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::Empty,::osirixgrpc::OsirixCurrentBrowserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OsirixFrontmostViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OsirixFrontmostViewer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse>* streamer) {
                       return this->StreamedOsirixFrontmostViewer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OsirixFrontmostViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OsirixFrontmostViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostViewerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOsirixFrontmostViewer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::Empty,::osirixgrpc::OsirixFrontmostViewerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OsirixDisplayed2DViewers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OsirixDisplayed2DViewers() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse>* streamer) {
                       return this->StreamedOsirixDisplayed2DViewers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OsirixDisplayed2DViewers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OsirixDisplayed2DViewers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayed2DViewersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOsirixDisplayed2DViewers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::Empty,::osirixgrpc::OsirixDisplayed2DViewersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OsirixFrontmostVRController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OsirixFrontmostVRController() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse>* streamer) {
                       return this->StreamedOsirixFrontmostVRController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OsirixFrontmostVRController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OsirixFrontmostVRController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixFrontmostVRControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOsirixFrontmostVRController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::Empty,::osirixgrpc::OsirixFrontmostVRControllerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OsirixDisplayedVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OsirixDisplayedVRControllers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse>* streamer) {
                       return this->StreamedOsirixDisplayedVRControllers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OsirixDisplayedVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OsirixDisplayedVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::Empty* /*request*/, ::osirixgrpc::OsirixDisplayedVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOsirixDisplayedVRControllers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::Empty,::osirixgrpc::OsirixDisplayedVRControllersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIFlipHorizontally : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIFlipHorizontally() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIFlipHorizontally(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIFlipHorizontally() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIFlipHorizontally(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIFlipHorizontally(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIFlipVertically : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIFlipVertically() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIFlipVertically(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIFlipVertically() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIFlipVertically(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIFlipVertically(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIArea() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse>* streamer) {
                       return this->StreamedROIArea(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIArea(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIAreaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROICentroid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROICentroid() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse>* streamer) {
                       return this->StreamedROICentroid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROICentroid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROICentroid(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROICentroidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROICentroid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROICentroidResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIRotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIRotate() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIRotate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIRotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIRotate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIRotateRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIRotate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIRotateRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIMove() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIMove(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIMoveRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIMoveRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIPix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIPix() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse>* streamer) {
                       return this->StreamedROIPix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIPix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIPix(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIPix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIPixResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIName() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse>* streamer) {
                       return this->StreamedROIName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROINameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROINameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIIType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIIType() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse>* streamer) {
                       return this->StreamedROIIType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIIType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIIType(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIITypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIIType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIITypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROISetName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROISetName() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROISetName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROISetName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROISetName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetNameRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROISetName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROISetNameRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIColor() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse>* streamer) {
                       return this->StreamedROIColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIColorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROISetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROISetColor() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROISetColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROISetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROISetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROISetColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROISetColorRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIOpacity() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse>* streamer) {
                       return this->StreamedROIOpacity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIOpacity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIOpacityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROISetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROISetOpacity() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROISetOpacity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROISetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROISetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROISetOpacity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROISetOpacityRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIThickness() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse>* streamer) {
                       return this->StreamedROIThickness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIThicknessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIThickness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIThicknessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROISetThickness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROISetThickness() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROISetThickness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROISetThickness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROISetThickness(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetThicknessRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROISetThickness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROISetThicknessRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIPoints() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse>* streamer) {
                       return this->StreamedROIPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROI* /*request*/, ::osirixgrpc::ROIPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROI,::osirixgrpc::ROIPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROISetPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROISetPoints() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROISetPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROISetPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROISetPoints(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROISetPointsRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROISetPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROISetPointsRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeTexture() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse>* streamer) {
                       return this->StreamedROIVolumeTexture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeTextureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeTexture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeTextureResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeSetTexture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeSetTexture() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIVolumeSetTexture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeSetTexture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeSetTexture(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetTextureRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeSetTexture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolumeSetTextureRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeVolume() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse>* streamer) {
                       return this->StreamedROIVolumeVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeVolumeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeColor() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse>* streamer) {
                       return this->StreamedROIVolumeColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeColorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeSetColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeSetColor() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIVolumeSetColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeSetColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeSetColor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetColorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeSetColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolumeSetColorRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeOpacity() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse>* streamer) {
                       return this->StreamedROIVolumeOpacity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeOpacityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeOpacity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeOpacityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeSetOpacity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeSetOpacity() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIVolumeSetOpacity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeSetOpacity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeSetOpacity(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetOpacityRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeSetOpacity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolumeSetOpacityRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeFactor() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse>* streamer) {
                       return this->StreamedROIVolumeFactor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeFactorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeFactor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeFactorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeSetFactor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeSetFactor() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedROIVolumeSetFactor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeSetFactor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeSetFactor(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolumeSetFactorRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeSetFactor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolumeSetFactorRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeName() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse>* streamer) {
                       return this->StreamedROIVolumeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ROIVolumeVisible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ROIVolumeVisible() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse>* streamer) {
                       return this->StreamedROIVolumeVisible(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ROIVolumeVisible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ROIVolumeVisible(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ROIVolume* /*request*/, ::osirixgrpc::ROIVolumeVisibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedROIVolumeVisible(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ROIVolume,::osirixgrpc::ROIVolumeVisibleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixConvertToRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixConvertToRGB() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedDCMPixConvertToRGB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixConvertToRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixConvertToRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToRGBRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixConvertToRGB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPixConvertToRGBRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixConvertToBW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixConvertToBW() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedDCMPixConvertToBW(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixConvertToBW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixConvertToBW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixConvertToBWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixConvertToBW(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPixConvertToBWRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixIsRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixIsRGB() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse>* streamer) {
                       return this->StreamedDCMPixIsRGB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixIsRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixIsRGB(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixIsRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixIsRGB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixIsRGBResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixComputeROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixComputeROI() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse>* streamer) {
                       return this->StreamedDCMPixComputeROI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixComputeROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixComputeROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixComputeROIRequest* /*request*/, ::osirixgrpc::DCMPixComputeROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixComputeROI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPixComputeROIRequest,::osirixgrpc::DCMPixComputeROIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixROIValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixROIValues() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse>* streamer) {
                       return this->StreamedDCMPixROIValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixROIValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixROIValues(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixROIValuesRequest* /*request*/, ::osirixgrpc::DCMPixROIValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixROIValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPixROIValuesRequest,::osirixgrpc::DCMPixROIValuesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixShape() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse>* streamer) {
                       return this->StreamedDCMPixShape(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixShape(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixShapeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixShape(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixShapeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixSpacing() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse>* streamer) {
                       return this->StreamedDCMPixSpacing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixSpacing(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSpacingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixSpacing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixSpacingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixOrigin() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse>* streamer) {
                       return this->StreamedDCMPixOrigin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixOrigin(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOriginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixOrigin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixOriginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixOrientation() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse>* streamer) {
                       return this->StreamedDCMPixOrientation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixOrientation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixOrientation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixOrientationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixSliceLocation() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse>* streamer) {
                       return this->StreamedDCMPixSliceLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixSliceLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixSliceLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixSourceFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixSourceFile() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse>* streamer) {
                       return this->StreamedDCMPixSourceFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixSourceFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixSourceFile(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixSourceFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixSourceFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixSourceFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixImage() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse>* streamer) {
                       return this->StreamedDCMPixImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixSetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixSetImage() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedDCMPixSetImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixSetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixSetImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixSetImageRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixSetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPixSetImageRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixGetMapFromROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixGetMapFromROI() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse>* streamer) {
                       return this->StreamedDCMPixGetMapFromROI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixGetMapFromROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixGetMapFromROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPixGetMapFromROIRequest* /*request*/, ::osirixgrpc::DCMPixGetMapFromROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixGetMapFromROI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPixGetMapFromROIRequest,::osirixgrpc::DCMPixGetMapFromROIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixDicomImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixDicomImage() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse>* streamer) {
                       return this->StreamedDCMPixDicomImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixDicomImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixDicomImage(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixDicomImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixDicomImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixDicomSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixDicomSeries() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse>* streamer) {
                       return this->StreamedDCMPixDicomSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixDicomSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixDicomSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixDicomSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixDicomSeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DCMPixDicomStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DCMPixDicomStudy() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse>* streamer) {
                       return this->StreamedDCMPixDicomStudy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DCMPixDicomStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DCMPixDicomStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DCMPix* /*request*/, ::osirixgrpc::DCMPixDicomStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDCMPixDicomStudy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DCMPix,::osirixgrpc::DCMPixDicomStudyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerViewer2D : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerViewer2D() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse>* streamer) {
                       return this->StreamedVRControllerViewer2D(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerViewer2D() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerViewer2D(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerViewer2DResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerViewer2D(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerViewer2DResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerBlendingController() {
      ::grpc::Service::MarkMethodStreamed(52,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse>* streamer) {
                       return this->StreamedVRControllerBlendingController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerBlendingController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerBlendingControllerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerStyle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerStyle() {
      ::grpc::Service::MarkMethodStreamed(53,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse>* streamer) {
                       return this->StreamedVRControllerStyle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerStyle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerStyle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerStyleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerStyle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerStyleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerTitle() {
      ::grpc::Service::MarkMethodStreamed(54,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse>* streamer) {
                       return this->StreamedVRControllerTitle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerTitle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerTitleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerROIVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerROIVolumes() {
      ::grpc::Service::MarkMethodStreamed(55,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse>* streamer) {
                       return this->StreamedVRControllerROIVolumes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerROIVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerROIVolumes(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerROIVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerROIVolumes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerROIVolumesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerRenderingMode() {
      ::grpc::Service::MarkMethodStreamed(56,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse>* streamer) {
                       return this->StreamedVRControllerRenderingMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerRenderingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerRenderingMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerRenderingModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerSetRenderingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerSetRenderingMode() {
      ::grpc::Service::MarkMethodStreamed(57,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedVRControllerSetRenderingMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerSetRenderingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerSetRenderingMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetRenderingModeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerSetRenderingMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRControllerSetRenderingModeRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerWLWW() {
      ::grpc::Service::MarkMethodStreamed(58,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse>* streamer) {
                       return this->StreamedVRControllerWLWW(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::VRControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerWLWW(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::VRControllerWLWWResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerSetWLWW() {
      ::grpc::Service::MarkMethodStreamed(59,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedVRControllerSetWLWW(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerSetWLWW(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRControllerSetWLWWRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerHideROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerHideROIVolume() {
      ::grpc::Service::MarkMethodStreamed(60,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedVRControllerHideROIVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerHideROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerHideROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerHideROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerHideROIVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRControllerHideROIVolumeRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerDisplayROIVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerDisplayROIVolume() {
      ::grpc::Service::MarkMethodStreamed(61,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedVRControllerDisplayROIVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerDisplayROIVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerDisplayROIVolume(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerDisplayROIVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRControllerDisplayROIVolumeRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VRControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VRControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodStreamed(62,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::VRController, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::VRController, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedVRControllerNeedsDisplayUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VRControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VRControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::VRController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVRControllerNeedsDisplayUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::VRController,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerCloseViewer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerCloseViewer() {
      ::grpc::Service::MarkMethodStreamed(63,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerCloseViewer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerCloseViewer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerCloseViewer(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerCloseViewer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerPixList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerPixList() {
      ::grpc::Service::MarkMethodStreamed(64,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse>* streamer) {
                       return this->StreamedViewerControllerPixList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerPixList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerPixList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerPixListRequest* /*request*/, ::osirixgrpc::ViewerControllerPixListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerPixList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerPixListRequest,::osirixgrpc::ViewerControllerPixListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerNeedsDisplayUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerNeedsDisplayUpdate() {
      ::grpc::Service::MarkMethodStreamed(65,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerNeedsDisplayUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerNeedsDisplayUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerROIList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerROIList() {
      ::grpc::Service::MarkMethodStreamed(66,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse>* streamer) {
                       return this->StreamedViewerControllerROIList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerROIList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerROIList(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIListRequest* /*request*/, ::osirixgrpc::ViewerControllerROIListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerROIList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerROIListRequest,::osirixgrpc::ViewerControllerROIListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerNewROI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerNewROI() {
      ::grpc::Service::MarkMethodStreamed(67,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse>* streamer) {
                       return this->StreamedViewerControllerNewROI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerNewROI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerNewROI(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerNewROIRequest* /*request*/, ::osirixgrpc::ViewerControllerNewROIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerNewROI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerNewROIRequest,::osirixgrpc::ViewerControllerNewROIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerCurDCM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerCurDCM() {
      ::grpc::Service::MarkMethodStreamed(68,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse>* streamer) {
                       return this->StreamedViewerControllerCurDCM(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerCurDCM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerCurDCM(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerCurDCMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerCurDCM(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerCurDCMResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerROIsWithName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerROIsWithName() {
      ::grpc::Service::MarkMethodStreamed(69,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse>* streamer) {
                       return this->StreamedViewerControllerROIsWithName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerROIsWithName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerROIsWithName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* /*request*/, ::osirixgrpc::ViewerControllerROIsWithNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerROIsWithName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerROIsWithNameRequest,::osirixgrpc::ViewerControllerROIsWithNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerSelectedROIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerSelectedROIs() {
      ::grpc::Service::MarkMethodStreamed(70,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse>* streamer) {
                       return this->StreamedViewerControllerSelectedROIs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerSelectedROIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerSelectedROIs(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerSelectedROIsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerSelectedROIs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerSelectedROIsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerIsDataVolumic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerIsDataVolumic() {
      ::grpc::Service::MarkMethodStreamed(71,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* streamer) {
                       return this->StreamedViewerControllerIsDataVolumic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerIsDataVolumic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerIsDataVolumic(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* /*request*/, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerIsDataVolumic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerIsDataVolumicRequest,::osirixgrpc::ViewerControllerIsDataVolumicResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerCopyViewerWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerCopyViewerWindow() {
      ::grpc::Service::MarkMethodStreamed(72,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerCopyViewerWindow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerCopyViewerWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerCopyViewerWindow(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerCopyViewerWindow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerResampleViewerController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerResampleViewerController() {
      ::grpc::Service::MarkMethodStreamed(73,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerResampleViewerController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerResampleViewerController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerResampleViewerController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerResampleViewerController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerBlendingController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerBlendingController() {
      ::grpc::Service::MarkMethodStreamed(74,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse>* streamer) {
                       return this->StreamedViewerControllerBlendingController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerBlendingController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerBlendingController(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerBlendingControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerBlendingController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerBlendingControllerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerVRControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerVRControllers() {
      ::grpc::Service::MarkMethodStreamed(75,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse>* streamer) {
                       return this->StreamedViewerControllerVRControllers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerVRControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerVRControllers(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerVRControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerVRControllers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerVRControllersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerTitle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerTitle() {
      ::grpc::Service::MarkMethodStreamed(76,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse>* streamer) {
                       return this->StreamedViewerControllerTitle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerTitle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerTitle(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerTitleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerTitle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerTitleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerModality() {
      ::grpc::Service::MarkMethodStreamed(77,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse>* streamer) {
                       return this->StreamedViewerControllerModality(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerModality(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerModalityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerMovieIdx() {
      ::grpc::Service::MarkMethodStreamed(78,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse>* streamer) {
                       return this->StreamedViewerControllerMovieIdx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerMovieIdx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerMovieIdxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerSetMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerSetMovieIdx() {
      ::grpc::Service::MarkMethodStreamed(79,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerSetMovieIdx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerSetMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerSetMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerSetMovieIdx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerSetMovieIdxRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerMaxMovieIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerMaxMovieIdx() {
      ::grpc::Service::MarkMethodStreamed(80,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* streamer) {
                       return this->StreamedViewerControllerMaxMovieIdx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerMaxMovieIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerMaxMovieIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerMaxMovieIdx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerIdx() {
      ::grpc::Service::MarkMethodStreamed(81,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse>* streamer) {
                       return this->StreamedViewerControllerIdx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerIdx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerIdxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerSetIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerSetIdx() {
      ::grpc::Service::MarkMethodStreamed(82,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerSetIdx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerSetIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerSetIdx(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetIdxRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerSetIdx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerSetIdxRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerWLWW() {
      ::grpc::Service::MarkMethodStreamed(83,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse>* streamer) {
                       return this->StreamedViewerControllerWLWW(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerController* /*request*/, ::osirixgrpc::ViewerControllerWLWWResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerWLWW(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerController,::osirixgrpc::ViewerControllerWLWWResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerSetWLWW : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerSetWLWW() {
      ::grpc::Service::MarkMethodStreamed(84,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedViewerControllerSetWLWW(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerSetWLWW() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerSetWLWW(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerSetWLWWRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerSetWLWW(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerSetWLWWRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewerControllerOpenVRViewerForMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewerControllerOpenVRViewerForMode() {
      ::grpc::Service::MarkMethodStreamed(85,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* streamer) {
                       return this->StreamedViewerControllerOpenVRViewerForMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewerControllerOpenVRViewerForMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* /*context*/, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* /*request*/, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewerControllerOpenVRViewerForMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest,::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BrowserControllerDatabaseSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BrowserControllerDatabaseSelection() {
      ::grpc::Service::MarkMethodStreamed(86,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* streamer) {
                       return this->StreamedBrowserControllerDatabaseSelection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BrowserControllerDatabaseSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BrowserControllerDatabaseSelection(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserController* /*request*/, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBrowserControllerDatabaseSelection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::BrowserController,::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BrowserControllerCopyFilesIfNeeded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BrowserControllerCopyFilesIfNeeded() {
      ::grpc::Service::MarkMethodStreamed(87,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response>* streamer) {
                       return this->StreamedBrowserControllerCopyFilesIfNeeded(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BrowserControllerCopyFilesIfNeeded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* /*request*/, ::osirixgrpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest,::osirixgrpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageWidth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageWidth() {
      ::grpc::Service::MarkMethodStreamed(88,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse>* streamer) {
                       return this->StreamedDicomImageWidth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageWidth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageWidth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageWidthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageWidth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageWidthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageHeight() {
      ::grpc::Service::MarkMethodStreamed(89,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse>* streamer) {
                       return this->StreamedDicomImageHeight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageHeight(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageHeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageHeightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageSOPInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageSOPInstanceUID() {
      ::grpc::Service::MarkMethodStreamed(90,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* streamer) {
                       return this->StreamedDicomImageSOPInstanceUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageSOPInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageSOPInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageSOPInstanceUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageSOPInstanceUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageCompletePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageCompletePath() {
      ::grpc::Service::MarkMethodStreamed(91,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse>* streamer) {
                       return this->StreamedDicomImageCompletePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageCompletePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageCompletePath(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageCompletePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageCompletePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageCompletePathResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageDate() {
      ::grpc::Service::MarkMethodStreamed(92,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse>* streamer) {
                       return this->StreamedDicomImageDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageDateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageNumberOfFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageNumberOfFrames() {
      ::grpc::Service::MarkMethodStreamed(93,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse>* streamer) {
                       return this->StreamedDicomImageNumberOfFrames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageNumberOfFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageNumberOfFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageNumberOfFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageNumberOfFrames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageNumberOfFramesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageModality() {
      ::grpc::Service::MarkMethodStreamed(94,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse>* streamer) {
                       return this->StreamedDicomImageModality(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageModality(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageModalityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageSeries() {
      ::grpc::Service::MarkMethodStreamed(95,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse>* streamer) {
                       return this->StreamedDicomImageSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageSeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageSliceLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageSliceLocation() {
      ::grpc::Service::MarkMethodStreamed(96,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse>* streamer) {
                       return this->StreamedDicomImageSliceLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageSliceLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageSliceLocation(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageSliceLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageSliceLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageSliceLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomImageInstanceNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomImageInstanceNumber() {
      ::grpc::Service::MarkMethodStreamed(97,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse>* streamer) {
                       return this->StreamedDicomImageInstanceNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomImageInstanceNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomImageInstanceNumber(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomImage* /*request*/, ::osirixgrpc::DicomImageInstanceNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomImageInstanceNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomImage,::osirixgrpc::DicomImageInstanceNumberResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesPaths() {
      ::grpc::Service::MarkMethodStreamed(98,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse>* streamer) {
                       return this->StreamedDicomSeriesPaths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesPaths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesPathsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesPreviousSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesPreviousSeries() {
      ::grpc::Service::MarkMethodStreamed(99,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* streamer) {
                       return this->StreamedDicomSeriesPreviousSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesPreviousSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesPreviousSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesPreviousSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesPreviousSeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesNextSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesNextSeries() {
      ::grpc::Service::MarkMethodStreamed(100,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse>* streamer) {
                       return this->StreamedDicomSeriesNextSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesNextSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesNextSeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNextSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesNextSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesNextSeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesSortedImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesSortedImages() {
      ::grpc::Service::MarkMethodStreamed(101,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse>* streamer) {
                       return this->StreamedDicomSeriesSortedImages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesSortedImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesSortedImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSortedImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesSortedImages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesSortedImagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesStudy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesStudy() {
      ::grpc::Service::MarkMethodStreamed(102,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse>* streamer) {
                       return this->StreamedDicomSeriesStudy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesStudy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesStudy(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesStudyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesStudy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesStudyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesImages() {
      ::grpc::Service::MarkMethodStreamed(103,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse>* streamer) {
                       return this->StreamedDicomSeriesImages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesImages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesImagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesSeriesInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesSeriesInstanceUID() {
      ::grpc::Service::MarkMethodStreamed(104,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* streamer) {
                       return this->StreamedDicomSeriesSeriesInstanceUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesSeriesInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesSeriesInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesSeriesInstanceUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesSeriesSOPClassUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesSeriesSOPClassUID() {
      ::grpc::Service::MarkMethodStreamed(105,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* streamer) {
                       return this->StreamedDicomSeriesSeriesSOPClassUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesSeriesSOPClassUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesSeriesSOPClassUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesSeriesDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesSeriesDescription() {
      ::grpc::Service::MarkMethodStreamed(106,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* streamer) {
                       return this->StreamedDicomSeriesSeriesDescription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesSeriesDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesSeriesDescription(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesSeriesDescription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesModality() {
      ::grpc::Service::MarkMethodStreamed(107,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse>* streamer) {
                       return this->StreamedDicomSeriesModality(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesModality(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesModalityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesName() {
      ::grpc::Service::MarkMethodStreamed(108,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse>* streamer) {
                       return this->StreamedDicomSeriesName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesDate() {
      ::grpc::Service::MarkMethodStreamed(109,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse>* streamer) {
                       return this->StreamedDicomSeriesDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesDateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomSeriesNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomSeriesNumberOfImages() {
      ::grpc::Service::MarkMethodStreamed(110,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* streamer) {
                       return this->StreamedDicomSeriesNumberOfImages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomSeriesNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomSeriesNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomSeries* /*request*/, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomSeriesNumberOfImages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomSeries,::osirixgrpc::DicomSeriesNumberOfImagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyPaths() {
      ::grpc::Service::MarkMethodStreamed(111,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse>* streamer) {
                       return this->StreamedDicomStudyPaths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyPaths(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyPaths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyPathsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyImages() {
      ::grpc::Service::MarkMethodStreamed(112,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse>* streamer) {
                       return this->StreamedDicomStudyImages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyImages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyImagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyModalities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyModalities() {
      ::grpc::Service::MarkMethodStreamed(113,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse>* streamer) {
                       return this->StreamedDicomStudyModalities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyModalities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyModalities(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyModalities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyModalitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyNoFiles() {
      ::grpc::Service::MarkMethodStreamed(114,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse>* streamer) {
                       return this->StreamedDicomStudyNoFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyNoFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyNoFilesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyRawNoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyRawNoFiles() {
      ::grpc::Service::MarkMethodStreamed(115,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse>* streamer) {
                       return this->StreamedDicomStudyRawNoFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyRawNoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyRawNoFiles(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyRawNoFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyRawNoFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyRawNoFilesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyNoFilesExcludingMultiFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyNoFilesExcludingMultiFrames() {
      ::grpc::Service::MarkMethodStreamed(116,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* streamer) {
                       return this->StreamedDicomStudyNoFilesExcludingMultiFrames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyNoFilesExcludingMultiFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyNumberOfImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyNumberOfImages() {
      ::grpc::Service::MarkMethodStreamed(117,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse>* streamer) {
                       return this->StreamedDicomStudyNumberOfImages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyNumberOfImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyNumberOfImages(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNumberOfImagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyNumberOfImages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyNumberOfImagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudySeries() {
      ::grpc::Service::MarkMethodStreamed(118,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse>* streamer) {
                       return this->StreamedDicomStudySeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudySeries(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudySeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudySeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyName() {
      ::grpc::Service::MarkMethodStreamed(119,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse>* streamer) {
                       return this->StreamedDicomStudyName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyDate() {
      ::grpc::Service::MarkMethodStreamed(120,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse>* streamer) {
                       return this->StreamedDicomStudyDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyDate(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyDateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyDateAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyDateAdded() {
      ::grpc::Service::MarkMethodStreamed(121,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse>* streamer) {
                       return this->StreamedDicomStudyDateAdded(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyDateAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyDateAdded(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateAddedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyDateAdded(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyDateAddedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyDateOfBirth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyDateOfBirth() {
      ::grpc::Service::MarkMethodStreamed(122,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse>* streamer) {
                       return this->StreamedDicomStudyDateOfBirth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyDateOfBirth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyDateOfBirth(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyDateOfBirthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyDateOfBirth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyDateOfBirthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyInstitutionName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyInstitutionName() {
      ::grpc::Service::MarkMethodStreamed(123,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse>* streamer) {
                       return this->StreamedDicomStudyInstitutionName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyInstitutionName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyInstitutionName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyInstitutionNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyInstitutionName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyInstitutionNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyModality : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyModality() {
      ::grpc::Service::MarkMethodStreamed(124,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse>* streamer) {
                       return this->StreamedDicomStudyModality(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyModality() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyModality(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyModalityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyModality(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyModalityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyPatientID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyPatientID() {
      ::grpc::Service::MarkMethodStreamed(125,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse>* streamer) {
                       return this->StreamedDicomStudyPatientID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyPatientID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyPatientID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyPatientID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyPatientIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyPatientUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyPatientUID() {
      ::grpc::Service::MarkMethodStreamed(126,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse>* streamer) {
                       return this->StreamedDicomStudyPatientUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyPatientUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyPatientUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyPatientUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyPatientUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyPatientSex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyPatientSex() {
      ::grpc::Service::MarkMethodStreamed(127,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse>* streamer) {
                       return this->StreamedDicomStudyPatientSex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyPatientSex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyPatientSex(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPatientSexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyPatientSex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyPatientSexResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyPerformingPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyPerformingPhysician() {
      ::grpc::Service::MarkMethodStreamed(128,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* streamer) {
                       return this->StreamedDicomStudyPerformingPhysician(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyPerformingPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyPerformingPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyPerformingPhysician(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyPerformingPhysicianResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyReferringPhysician : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyReferringPhysician() {
      ::grpc::Service::MarkMethodStreamed(129,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse>* streamer) {
                       return this->StreamedDicomStudyReferringPhysician(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyReferringPhysician() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyReferringPhysician(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyReferringPhysicianResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyReferringPhysician(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyReferringPhysicianResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyStudyInstanceUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyStudyInstanceUID() {
      ::grpc::Service::MarkMethodStreamed(130,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* streamer) {
                       return this->StreamedDicomStudyStudyInstanceUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyStudyInstanceUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyStudyInstanceUID(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyStudyInstanceUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DicomStudyStudyName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DicomStudyStudyName() {
      ::grpc::Service::MarkMethodStreamed(131,
        new ::grpc::internal::StreamedUnaryHandler<
          ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse>* streamer) {
                       return this->StreamedDicomStudyStudyName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DicomStudyStudyName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DicomStudyStudyName(::grpc::ServerContext* /*context*/, const ::osirixgrpc::DicomStudy* /*request*/, ::osirixgrpc::DicomStudyStudyNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDicomStudyStudyName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::osirixgrpc::DicomStudy,::osirixgrpc::DicomStudyStudyNameResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OsirixCurrentBrowser<WithStreamedUnaryMethod_OsirixFrontmostViewer<WithStreamedUnaryMethod_OsirixDisplayed2DViewers<WithStreamedUnaryMethod_OsirixFrontmostVRController<WithStreamedUnaryMethod_OsirixDisplayedVRControllers<WithStreamedUnaryMethod_ROIFlipHorizontally<WithStreamedUnaryMethod_ROIFlipVertically<WithStreamedUnaryMethod_ROIArea<WithStreamedUnaryMethod_ROICentroid<WithStreamedUnaryMethod_ROIRotate<WithStreamedUnaryMethod_ROIMove<WithStreamedUnaryMethod_ROIPix<WithStreamedUnaryMethod_ROIName<WithStreamedUnaryMethod_ROIIType<WithStreamedUnaryMethod_ROISetName<WithStreamedUnaryMethod_ROIColor<WithStreamedUnaryMethod_ROISetColor<WithStreamedUnaryMethod_ROIOpacity<WithStreamedUnaryMethod_ROISetOpacity<WithStreamedUnaryMethod_ROIThickness<WithStreamedUnaryMethod_ROISetThickness<WithStreamedUnaryMethod_ROIPoints<WithStreamedUnaryMethod_ROISetPoints<WithStreamedUnaryMethod_ROIVolumeTexture<WithStreamedUnaryMethod_ROIVolumeSetTexture<WithStreamedUnaryMethod_ROIVolumeVolume<WithStreamedUnaryMethod_ROIVolumeColor<WithStreamedUnaryMethod_ROIVolumeSetColor<WithStreamedUnaryMethod_ROIVolumeOpacity<WithStreamedUnaryMethod_ROIVolumeSetOpacity<WithStreamedUnaryMethod_ROIVolumeFactor<WithStreamedUnaryMethod_ROIVolumeSetFactor<WithStreamedUnaryMethod_ROIVolumeName<WithStreamedUnaryMethod_ROIVolumeVisible<WithStreamedUnaryMethod_DCMPixConvertToRGB<WithStreamedUnaryMethod_DCMPixConvertToBW<WithStreamedUnaryMethod_DCMPixIsRGB<WithStreamedUnaryMethod_DCMPixComputeROI<WithStreamedUnaryMethod_DCMPixROIValues<WithStreamedUnaryMethod_DCMPixShape<WithStreamedUnaryMethod_DCMPixSpacing<WithStreamedUnaryMethod_DCMPixOrigin<WithStreamedUnaryMethod_DCMPixOrientation<WithStreamedUnaryMethod_DCMPixSliceLocation<WithStreamedUnaryMethod_DCMPixSourceFile<WithStreamedUnaryMethod_DCMPixImage<WithStreamedUnaryMethod_DCMPixSetImage<WithStreamedUnaryMethod_DCMPixGetMapFromROI<WithStreamedUnaryMethod_DCMPixDicomImage<WithStreamedUnaryMethod_DCMPixDicomSeries<WithStreamedUnaryMethod_DCMPixDicomStudy<WithStreamedUnaryMethod_VRControllerViewer2D<WithStreamedUnaryMethod_VRControllerBlendingController<WithStreamedUnaryMethod_VRControllerStyle<WithStreamedUnaryMethod_VRControllerTitle<WithStreamedUnaryMethod_VRControllerROIVolumes<WithStreamedUnaryMethod_VRControllerRenderingMode<WithStreamedUnaryMethod_VRControllerSetRenderingMode<WithStreamedUnaryMethod_VRControllerWLWW<WithStreamedUnaryMethod_VRControllerSetWLWW<WithStreamedUnaryMethod_VRControllerHideROIVolume<WithStreamedUnaryMethod_VRControllerDisplayROIVolume<WithStreamedUnaryMethod_VRControllerNeedsDisplayUpdate<WithStreamedUnaryMethod_ViewerControllerCloseViewer<WithStreamedUnaryMethod_ViewerControllerPixList<WithStreamedUnaryMethod_ViewerControllerNeedsDisplayUpdate<WithStreamedUnaryMethod_ViewerControllerROIList<WithStreamedUnaryMethod_ViewerControllerNewROI<WithStreamedUnaryMethod_ViewerControllerCurDCM<WithStreamedUnaryMethod_ViewerControllerROIsWithName<WithStreamedUnaryMethod_ViewerControllerSelectedROIs<WithStreamedUnaryMethod_ViewerControllerIsDataVolumic<WithStreamedUnaryMethod_ViewerControllerCopyViewerWindow<WithStreamedUnaryMethod_ViewerControllerResampleViewerController<WithStreamedUnaryMethod_ViewerControllerBlendingController<WithStreamedUnaryMethod_ViewerControllerVRControllers<WithStreamedUnaryMethod_ViewerControllerTitle<WithStreamedUnaryMethod_ViewerControllerModality<WithStreamedUnaryMethod_ViewerControllerMovieIdx<WithStreamedUnaryMethod_ViewerControllerSetMovieIdx<WithStreamedUnaryMethod_ViewerControllerMaxMovieIdx<WithStreamedUnaryMethod_ViewerControllerIdx<WithStreamedUnaryMethod_ViewerControllerSetIdx<WithStreamedUnaryMethod_ViewerControllerWLWW<WithStreamedUnaryMethod_ViewerControllerSetWLWW<WithStreamedUnaryMethod_ViewerControllerOpenVRViewerForMode<WithStreamedUnaryMethod_BrowserControllerDatabaseSelection<WithStreamedUnaryMethod_BrowserControllerCopyFilesIfNeeded<WithStreamedUnaryMethod_DicomImageWidth<WithStreamedUnaryMethod_DicomImageHeight<WithStreamedUnaryMethod_DicomImageSOPInstanceUID<WithStreamedUnaryMethod_DicomImageCompletePath<WithStreamedUnaryMethod_DicomImageDate<WithStreamedUnaryMethod_DicomImageNumberOfFrames<WithStreamedUnaryMethod_DicomImageModality<WithStreamedUnaryMethod_DicomImageSeries<WithStreamedUnaryMethod_DicomImageSliceLocation<WithStreamedUnaryMethod_DicomImageInstanceNumber<WithStreamedUnaryMethod_DicomSeriesPaths<WithStreamedUnaryMethod_DicomSeriesPreviousSeries<WithStreamedUnaryMethod_DicomSeriesNextSeries<WithStreamedUnaryMethod_DicomSeriesSortedImages<WithStreamedUnaryMethod_DicomSeriesStudy<WithStreamedUnaryMethod_DicomSeriesImages<WithStreamedUnaryMethod_DicomSeriesSeriesInstanceUID<WithStreamedUnaryMethod_DicomSeriesSeriesSOPClassUID<WithStreamedUnaryMethod_DicomSeriesSeriesDescription<WithStreamedUnaryMethod_DicomSeriesModality<WithStreamedUnaryMethod_DicomSeriesName<WithStreamedUnaryMethod_DicomSeriesDate<WithStreamedUnaryMethod_DicomSeriesNumberOfImages<WithStreamedUnaryMethod_DicomStudyPaths<WithStreamedUnaryMethod_DicomStudyImages<WithStreamedUnaryMethod_DicomStudyModalities<WithStreamedUnaryMethod_DicomStudyNoFiles<WithStreamedUnaryMethod_DicomStudyRawNoFiles<WithStreamedUnaryMethod_DicomStudyNoFilesExcludingMultiFrames<WithStreamedUnaryMethod_DicomStudyNumberOfImages<WithStreamedUnaryMethod_DicomStudySeries<WithStreamedUnaryMethod_DicomStudyName<WithStreamedUnaryMethod_DicomStudyDate<WithStreamedUnaryMethod_DicomStudyDateAdded<WithStreamedUnaryMethod_DicomStudyDateOfBirth<WithStreamedUnaryMethod_DicomStudyInstitutionName<WithStreamedUnaryMethod_DicomStudyModality<WithStreamedUnaryMethod_DicomStudyPatientID<WithStreamedUnaryMethod_DicomStudyPatientUID<WithStreamedUnaryMethod_DicomStudyPatientSex<WithStreamedUnaryMethod_DicomStudyPerformingPhysician<WithStreamedUnaryMethod_DicomStudyReferringPhysician<WithStreamedUnaryMethod_DicomStudyStudyInstanceUID<WithStreamedUnaryMethod_DicomStudyStudyName<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OsirixCurrentBrowser<WithStreamedUnaryMethod_OsirixFrontmostViewer<WithStreamedUnaryMethod_OsirixDisplayed2DViewers<WithStreamedUnaryMethod_OsirixFrontmostVRController<WithStreamedUnaryMethod_OsirixDisplayedVRControllers<WithStreamedUnaryMethod_ROIFlipHorizontally<WithStreamedUnaryMethod_ROIFlipVertically<WithStreamedUnaryMethod_ROIArea<WithStreamedUnaryMethod_ROICentroid<WithStreamedUnaryMethod_ROIRotate<WithStreamedUnaryMethod_ROIMove<WithStreamedUnaryMethod_ROIPix<WithStreamedUnaryMethod_ROIName<WithStreamedUnaryMethod_ROIIType<WithStreamedUnaryMethod_ROISetName<WithStreamedUnaryMethod_ROIColor<WithStreamedUnaryMethod_ROISetColor<WithStreamedUnaryMethod_ROIOpacity<WithStreamedUnaryMethod_ROISetOpacity<WithStreamedUnaryMethod_ROIThickness<WithStreamedUnaryMethod_ROISetThickness<WithStreamedUnaryMethod_ROIPoints<WithStreamedUnaryMethod_ROISetPoints<WithStreamedUnaryMethod_ROIVolumeTexture<WithStreamedUnaryMethod_ROIVolumeSetTexture<WithStreamedUnaryMethod_ROIVolumeVolume<WithStreamedUnaryMethod_ROIVolumeColor<WithStreamedUnaryMethod_ROIVolumeSetColor<WithStreamedUnaryMethod_ROIVolumeOpacity<WithStreamedUnaryMethod_ROIVolumeSetOpacity<WithStreamedUnaryMethod_ROIVolumeFactor<WithStreamedUnaryMethod_ROIVolumeSetFactor<WithStreamedUnaryMethod_ROIVolumeName<WithStreamedUnaryMethod_ROIVolumeVisible<WithStreamedUnaryMethod_DCMPixConvertToRGB<WithStreamedUnaryMethod_DCMPixConvertToBW<WithStreamedUnaryMethod_DCMPixIsRGB<WithStreamedUnaryMethod_DCMPixComputeROI<WithStreamedUnaryMethod_DCMPixROIValues<WithStreamedUnaryMethod_DCMPixShape<WithStreamedUnaryMethod_DCMPixSpacing<WithStreamedUnaryMethod_DCMPixOrigin<WithStreamedUnaryMethod_DCMPixOrientation<WithStreamedUnaryMethod_DCMPixSliceLocation<WithStreamedUnaryMethod_DCMPixSourceFile<WithStreamedUnaryMethod_DCMPixImage<WithStreamedUnaryMethod_DCMPixSetImage<WithStreamedUnaryMethod_DCMPixGetMapFromROI<WithStreamedUnaryMethod_DCMPixDicomImage<WithStreamedUnaryMethod_DCMPixDicomSeries<WithStreamedUnaryMethod_DCMPixDicomStudy<WithStreamedUnaryMethod_VRControllerViewer2D<WithStreamedUnaryMethod_VRControllerBlendingController<WithStreamedUnaryMethod_VRControllerStyle<WithStreamedUnaryMethod_VRControllerTitle<WithStreamedUnaryMethod_VRControllerROIVolumes<WithStreamedUnaryMethod_VRControllerRenderingMode<WithStreamedUnaryMethod_VRControllerSetRenderingMode<WithStreamedUnaryMethod_VRControllerWLWW<WithStreamedUnaryMethod_VRControllerSetWLWW<WithStreamedUnaryMethod_VRControllerHideROIVolume<WithStreamedUnaryMethod_VRControllerDisplayROIVolume<WithStreamedUnaryMethod_VRControllerNeedsDisplayUpdate<WithStreamedUnaryMethod_ViewerControllerCloseViewer<WithStreamedUnaryMethod_ViewerControllerPixList<WithStreamedUnaryMethod_ViewerControllerNeedsDisplayUpdate<WithStreamedUnaryMethod_ViewerControllerROIList<WithStreamedUnaryMethod_ViewerControllerNewROI<WithStreamedUnaryMethod_ViewerControllerCurDCM<WithStreamedUnaryMethod_ViewerControllerROIsWithName<WithStreamedUnaryMethod_ViewerControllerSelectedROIs<WithStreamedUnaryMethod_ViewerControllerIsDataVolumic<WithStreamedUnaryMethod_ViewerControllerCopyViewerWindow<WithStreamedUnaryMethod_ViewerControllerResampleViewerController<WithStreamedUnaryMethod_ViewerControllerBlendingController<WithStreamedUnaryMethod_ViewerControllerVRControllers<WithStreamedUnaryMethod_ViewerControllerTitle<WithStreamedUnaryMethod_ViewerControllerModality<WithStreamedUnaryMethod_ViewerControllerMovieIdx<WithStreamedUnaryMethod_ViewerControllerSetMovieIdx<WithStreamedUnaryMethod_ViewerControllerMaxMovieIdx<WithStreamedUnaryMethod_ViewerControllerIdx<WithStreamedUnaryMethod_ViewerControllerSetIdx<WithStreamedUnaryMethod_ViewerControllerWLWW<WithStreamedUnaryMethod_ViewerControllerSetWLWW<WithStreamedUnaryMethod_ViewerControllerOpenVRViewerForMode<WithStreamedUnaryMethod_BrowserControllerDatabaseSelection<WithStreamedUnaryMethod_BrowserControllerCopyFilesIfNeeded<WithStreamedUnaryMethod_DicomImageWidth<WithStreamedUnaryMethod_DicomImageHeight<WithStreamedUnaryMethod_DicomImageSOPInstanceUID<WithStreamedUnaryMethod_DicomImageCompletePath<WithStreamedUnaryMethod_DicomImageDate<WithStreamedUnaryMethod_DicomImageNumberOfFrames<WithStreamedUnaryMethod_DicomImageModality<WithStreamedUnaryMethod_DicomImageSeries<WithStreamedUnaryMethod_DicomImageSliceLocation<WithStreamedUnaryMethod_DicomImageInstanceNumber<WithStreamedUnaryMethod_DicomSeriesPaths<WithStreamedUnaryMethod_DicomSeriesPreviousSeries<WithStreamedUnaryMethod_DicomSeriesNextSeries<WithStreamedUnaryMethod_DicomSeriesSortedImages<WithStreamedUnaryMethod_DicomSeriesStudy<WithStreamedUnaryMethod_DicomSeriesImages<WithStreamedUnaryMethod_DicomSeriesSeriesInstanceUID<WithStreamedUnaryMethod_DicomSeriesSeriesSOPClassUID<WithStreamedUnaryMethod_DicomSeriesSeriesDescription<WithStreamedUnaryMethod_DicomSeriesModality<WithStreamedUnaryMethod_DicomSeriesName<WithStreamedUnaryMethod_DicomSeriesDate<WithStreamedUnaryMethod_DicomSeriesNumberOfImages<WithStreamedUnaryMethod_DicomStudyPaths<WithStreamedUnaryMethod_DicomStudyImages<WithStreamedUnaryMethod_DicomStudyModalities<WithStreamedUnaryMethod_DicomStudyNoFiles<WithStreamedUnaryMethod_DicomStudyRawNoFiles<WithStreamedUnaryMethod_DicomStudyNoFilesExcludingMultiFrames<WithStreamedUnaryMethod_DicomStudyNumberOfImages<WithStreamedUnaryMethod_DicomStudySeries<WithStreamedUnaryMethod_DicomStudyName<WithStreamedUnaryMethod_DicomStudyDate<WithStreamedUnaryMethod_DicomStudyDateAdded<WithStreamedUnaryMethod_DicomStudyDateOfBirth<WithStreamedUnaryMethod_DicomStudyInstitutionName<WithStreamedUnaryMethod_DicomStudyModality<WithStreamedUnaryMethod_DicomStudyPatientID<WithStreamedUnaryMethod_DicomStudyPatientUID<WithStreamedUnaryMethod_DicomStudyPatientSex<WithStreamedUnaryMethod_DicomStudyPerformingPhysician<WithStreamedUnaryMethod_DicomStudyReferringPhysician<WithStreamedUnaryMethod_DicomStudyStudyInstanceUID<WithStreamedUnaryMethod_DicomStudyStudyName<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace osirixgrpc


#endif  // GRPC_osirix_2eproto__INCLUDED
