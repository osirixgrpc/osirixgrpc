// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmpix.proto

#include "dcmpix.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace osirixgrpc {
template <typename>
PROTOBUF_CONSTEXPR DCMPixIsRGBResponse::DCMPixIsRGBResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.is_rgb_)*/ false
} {}
struct DCMPixIsRGBResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixIsRGBResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixIsRGBResponseDefaultTypeInternal() {}
  union {
    DCMPixIsRGBResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixIsRGBResponseDefaultTypeInternal _DCMPixIsRGBResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixComputeROIResponse::DCMPixComputeROIResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.mean_)*/ 0

  , /*decltype(_impl_.total_)*/ 0

  , /*decltype(_impl_.std_dev_)*/ 0

  , /*decltype(_impl_.min_)*/ 0

  , /*decltype(_impl_.max_)*/ 0

  , /*decltype(_impl_.skewness_)*/ 0

  , /*decltype(_impl_.kurtosis_)*/ 0
} {}
struct DCMPixComputeROIResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixComputeROIResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixComputeROIResponseDefaultTypeInternal() {}
  union {
    DCMPixComputeROIResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixComputeROIResponseDefaultTypeInternal _DCMPixComputeROIResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixROIValuesResponse::DCMPixROIValuesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.values_)*/ {}

  , /*decltype(_impl_.row_indices_)*/ {}
  ,/* _impl_._row_indices_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.column_indices_)*/ {}
  ,/* _impl_._column_indices_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.status_)*/nullptr} {}
struct DCMPixROIValuesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixROIValuesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixROIValuesResponseDefaultTypeInternal() {}
  union {
    DCMPixROIValuesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixROIValuesResponseDefaultTypeInternal _DCMPixROIValuesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixDicomImageResponse::DCMPixDicomImageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dicom_image_)*/nullptr} {}
struct DCMPixDicomImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixDicomImageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixDicomImageResponseDefaultTypeInternal() {}
  union {
    DCMPixDicomImageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixDicomImageResponseDefaultTypeInternal _DCMPixDicomImageResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixDicomSeriesResponse::DCMPixDicomSeriesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dicom_series_)*/nullptr} {}
struct DCMPixDicomSeriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixDicomSeriesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixDicomSeriesResponseDefaultTypeInternal() {}
  union {
    DCMPixDicomSeriesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixDicomSeriesResponseDefaultTypeInternal _DCMPixDicomSeriesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixDicomStudyResponse::DCMPixDicomStudyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dicom_study_)*/nullptr} {}
struct DCMPixDicomStudyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixDicomStudyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixDicomStudyResponseDefaultTypeInternal() {}
  union {
    DCMPixDicomStudyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixDicomStudyResponseDefaultTypeInternal _DCMPixDicomStudyResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixImageResponse::DCMPixImageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_data_float_)*/ {}

  , /*decltype(_impl_.image_data_argb_)*/ {}
  ,/* _impl_._image_data_argb_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.rows_)*/ 0

  , /*decltype(_impl_.columns_)*/ 0

  , /*decltype(_impl_.is_argb_)*/ false
} {}
struct DCMPixImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixImageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixImageResponseDefaultTypeInternal() {}
  union {
    DCMPixImageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixImageResponseDefaultTypeInternal _DCMPixImageResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixGetMapFromROIResponse::DCMPixGetMapFromROIResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_)*/ {}

  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.rows_)*/ 0

  , /*decltype(_impl_.columns_)*/ 0
} {}
struct DCMPixGetMapFromROIResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixGetMapFromROIResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixGetMapFromROIResponseDefaultTypeInternal() {}
  union {
    DCMPixGetMapFromROIResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixGetMapFromROIResponseDefaultTypeInternal _DCMPixGetMapFromROIResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixShapeResponse::DCMPixShapeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.rows_)*/ 0

  , /*decltype(_impl_.columns_)*/ 0
} {}
struct DCMPixShapeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixShapeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixShapeResponseDefaultTypeInternal() {}
  union {
    DCMPixShapeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixShapeResponseDefaultTypeInternal _DCMPixShapeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixSpacingResponse::DCMPixSpacingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.spacing_rows_)*/ 0

  , /*decltype(_impl_.spacing_columns_)*/ 0
} {}
struct DCMPixSpacingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixSpacingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixSpacingResponseDefaultTypeInternal() {}
  union {
    DCMPixSpacingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixSpacingResponseDefaultTypeInternal _DCMPixSpacingResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixOriginResponse::DCMPixOriginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.origin_rows_)*/ 0

  , /*decltype(_impl_.origin_columns_)*/ 0

  , /*decltype(_impl_.origin_slices_)*/ 0
} {}
struct DCMPixOriginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixOriginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixOriginResponseDefaultTypeInternal() {}
  union {
    DCMPixOriginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixOriginResponseDefaultTypeInternal _DCMPixOriginResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixOrientationResponse::DCMPixOrientationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orientation_)*/ {}

  , /*decltype(_impl_.status_)*/nullptr} {}
struct DCMPixOrientationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixOrientationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixOrientationResponseDefaultTypeInternal() {}
  union {
    DCMPixOrientationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixOrientationResponseDefaultTypeInternal _DCMPixOrientationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixSliceLocationResponse::DCMPixSliceLocationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.slice_location_)*/ 0
} {}
struct DCMPixSliceLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixSliceLocationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixSliceLocationResponseDefaultTypeInternal() {}
  union {
    DCMPixSliceLocationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixSliceLocationResponseDefaultTypeInternal _DCMPixSliceLocationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixSourceFileResponse::DCMPixSourceFileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_file_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/nullptr} {}
struct DCMPixSourceFileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixSourceFileResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixSourceFileResponseDefaultTypeInternal() {}
  union {
    DCMPixSourceFileResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixSourceFileResponseDefaultTypeInternal _DCMPixSourceFileResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixConvertToRGBRequest::DCMPixConvertToRGBRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pix_)*/nullptr
  , /*decltype(_impl_.rgb_channel_)*/ 0
} {}
struct DCMPixConvertToRGBRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixConvertToRGBRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixConvertToRGBRequestDefaultTypeInternal() {}
  union {
    DCMPixConvertToRGBRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixConvertToRGBRequestDefaultTypeInternal _DCMPixConvertToRGBRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixConvertToBWRequest::DCMPixConvertToBWRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pix_)*/nullptr
  , /*decltype(_impl_.bw_channel_)*/ 0
} {}
struct DCMPixConvertToBWRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixConvertToBWRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixConvertToBWRequestDefaultTypeInternal() {}
  union {
    DCMPixConvertToBWRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixConvertToBWRequestDefaultTypeInternal _DCMPixConvertToBWRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixComputeROIRequest::DCMPixComputeROIRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pix_)*/nullptr
  , /*decltype(_impl_.roi_)*/nullptr} {}
struct DCMPixComputeROIRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixComputeROIRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixComputeROIRequestDefaultTypeInternal() {}
  union {
    DCMPixComputeROIRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixComputeROIRequestDefaultTypeInternal _DCMPixComputeROIRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixROIValuesRequest::DCMPixROIValuesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pix_)*/nullptr
  , /*decltype(_impl_.roi_)*/nullptr} {}
struct DCMPixROIValuesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixROIValuesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixROIValuesRequestDefaultTypeInternal() {}
  union {
    DCMPixROIValuesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixROIValuesRequestDefaultTypeInternal _DCMPixROIValuesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixSetImageRequest::DCMPixSetImageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_data_float_)*/ {}

  , /*decltype(_impl_.image_data_argb_)*/ {}
  ,/* _impl_._image_data_argb_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.pix_)*/nullptr} {}
struct DCMPixSetImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixSetImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixSetImageRequestDefaultTypeInternal() {}
  union {
    DCMPixSetImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixSetImageRequestDefaultTypeInternal _DCMPixSetImageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DCMPixGetMapFromROIRequest::DCMPixGetMapFromROIRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pix_)*/nullptr
  , /*decltype(_impl_.roi_)*/nullptr} {}
struct DCMPixGetMapFromROIRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DCMPixGetMapFromROIRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DCMPixGetMapFromROIRequestDefaultTypeInternal() {}
  union {
    DCMPixGetMapFromROIRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DCMPixGetMapFromROIRequestDefaultTypeInternal _DCMPixGetMapFromROIRequest_default_instance_;
}  // namespace osirixgrpc
static ::_pb::Metadata file_level_metadata_dcmpix_2eproto[20];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dcmpix_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dcmpix_2eproto = nullptr;
const ::uint32_t TableStruct_dcmpix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, _impl_.is_rgb_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.mean_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.std_dev_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.min_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.max_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.skewness_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _impl_.kurtosis_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _impl_.values_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _impl_.row_indices_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _impl_.column_indices_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, _impl_.dicom_image_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, _impl_.dicom_series_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, _impl_.dicom_study_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_.columns_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_.is_argb_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_.image_data_float_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _impl_.image_data_argb_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _impl_.columns_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _impl_.map_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, _impl_.columns_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, _impl_.spacing_rows_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, _impl_.spacing_columns_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _impl_.origin_rows_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _impl_.origin_columns_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _impl_.origin_slices_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, _impl_.orientation_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, _impl_.slice_location_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, _impl_.source_file_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, _impl_.pix_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, _impl_.rgb_channel_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, _impl_.pix_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, _impl_.bw_channel_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, _impl_.pix_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, _impl_.roi_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, _impl_.pix_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, _impl_.roi_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, _impl_.pix_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, _impl_.image_data_float_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, _impl_.image_data_argb_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, _impl_.pix_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, _impl_.roi_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::osirixgrpc::DCMPixIsRGBResponse)},
        { 12, 28, -1, sizeof(::osirixgrpc::DCMPixComputeROIResponse)},
        { 36, 48, -1, sizeof(::osirixgrpc::DCMPixROIValuesResponse)},
        { 52, 62, -1, sizeof(::osirixgrpc::DCMPixDicomImageResponse)},
        { 64, 74, -1, sizeof(::osirixgrpc::DCMPixDicomSeriesResponse)},
        { 76, 86, -1, sizeof(::osirixgrpc::DCMPixDicomStudyResponse)},
        { 88, 102, -1, sizeof(::osirixgrpc::DCMPixImageResponse)},
        { 108, 120, -1, sizeof(::osirixgrpc::DCMPixGetMapFromROIResponse)},
        { 124, 135, -1, sizeof(::osirixgrpc::DCMPixShapeResponse)},
        { 138, 149, -1, sizeof(::osirixgrpc::DCMPixSpacingResponse)},
        { 152, 164, -1, sizeof(::osirixgrpc::DCMPixOriginResponse)},
        { 168, 178, -1, sizeof(::osirixgrpc::DCMPixOrientationResponse)},
        { 180, 190, -1, sizeof(::osirixgrpc::DCMPixSliceLocationResponse)},
        { 192, 202, -1, sizeof(::osirixgrpc::DCMPixSourceFileResponse)},
        { 204, 214, -1, sizeof(::osirixgrpc::DCMPixConvertToRGBRequest)},
        { 216, 226, -1, sizeof(::osirixgrpc::DCMPixConvertToBWRequest)},
        { 228, 238, -1, sizeof(::osirixgrpc::DCMPixComputeROIRequest)},
        { 240, 250, -1, sizeof(::osirixgrpc::DCMPixROIValuesRequest)},
        { 252, 263, -1, sizeof(::osirixgrpc::DCMPixSetImageRequest)},
        { 266, 276, -1, sizeof(::osirixgrpc::DCMPixGetMapFromROIRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::osirixgrpc::_DCMPixIsRGBResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixComputeROIResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixROIValuesResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixDicomImageResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixDicomSeriesResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixDicomStudyResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixImageResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixGetMapFromROIResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixShapeResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixSpacingResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixOriginResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixOrientationResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixSliceLocationResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixSourceFileResponse_default_instance_._instance,
    &::osirixgrpc::_DCMPixConvertToRGBRequest_default_instance_._instance,
    &::osirixgrpc::_DCMPixConvertToBWRequest_default_instance_._instance,
    &::osirixgrpc::_DCMPixComputeROIRequest_default_instance_._instance,
    &::osirixgrpc::_DCMPixROIValuesRequest_default_instance_._instance,
    &::osirixgrpc::_DCMPixSetImageRequest_default_instance_._instance,
    &::osirixgrpc::_DCMPixGetMapFromROIRequest_default_instance_._instance,
};
const char descriptor_table_protodef_dcmpix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014dcmpix.proto\022\nosirixgrpc\032\017utilities.pr"
    "oto\032\013types.proto\"I\n\023DCMPixIsRGBResponse\022"
    "\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\016\n\006i"
    "s_rgb\030\002 \001(\010\"\252\001\n\030DCMPixComputeROIResponse"
    "\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\014\n\004"
    "mean\030\002 \001(\002\022\r\n\005total\030\003 \001(\002\022\017\n\007std_dev\030\004 \001"
    "(\002\022\013\n\003min\030\005 \001(\002\022\013\n\003max\030\006 \001(\002\022\020\n\010skewness"
    "\030\007 \001(\002\022\020\n\010kurtosis\030\010 \001(\002\"z\n\027DCMPixROIVal"
    "uesResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc"
    ".Status\022\016\n\006values\030\002 \003(\002\022\023\n\013row_indices\030\003"
    " \003(\005\022\026\n\016column_indices\030\004 \003(\005\"k\n\030DCMPixDi"
    "comImageResponse\022\"\n\006status\030\001 \001(\0132\022.osiri"
    "xgrpc.Status\022+\n\013dicom_image\030\002 \001(\0132\026.osir"
    "ixgrpc.DicomImage\"n\n\031DCMPixDicomSeriesRe"
    "sponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Stat"
    "us\022-\n\014dicom_series\030\002 \001(\0132\027.osirixgrpc.Di"
    "comSeries\"k\n\030DCMPixDicomStudyResponse\022\"\n"
    "\006status\030\001 \001(\0132\022.osirixgrpc.Status\022+\n\013dic"
    "om_study\030\002 \001(\0132\026.osirixgrpc.DicomStudy\"\234"
    "\001\n\023DCMPixImageResponse\022\"\n\006status\030\001 \001(\0132\022"
    ".osirixgrpc.Status\022\014\n\004rows\030\002 \001(\005\022\017\n\007colu"
    "mns\030\003 \001(\005\022\017\n\007is_argb\030\004 \001(\010\022\030\n\020image_data"
    "_float\030\005 \003(\002\022\027\n\017image_data_argb\030\006 \003(\005\"m\n"
    "\033DCMPixGetMapFromROIResponse\022\"\n\006status\030\001"
    " \001(\0132\022.osirixgrpc.Status\022\014\n\004rows\030\002 \001(\005\022\017"
    "\n\007columns\030\003 \001(\005\022\013\n\003map\030\004 \003(\010\"X\n\023DCMPixSh"
    "apeResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc"
    ".Status\022\014\n\004rows\030\002 \001(\005\022\017\n\007columns\030\003 \001(\005\"j"
    "\n\025DCMPixSpacingResponse\022\"\n\006status\030\001 \001(\0132"
    "\022.osirixgrpc.Status\022\024\n\014spacing_rows\030\002 \001("
    "\002\022\027\n\017spacing_columns\030\003 \001(\002\"~\n\024DCMPixOrig"
    "inResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc."
    "Status\022\023\n\013origin_rows\030\002 \001(\002\022\026\n\016origin_co"
    "lumns\030\003 \001(\002\022\025\n\rorigin_slices\030\004 \001(\002\"T\n\031DC"
    "MPixOrientationResponse\022\"\n\006status\030\001 \001(\0132"
    "\022.osirixgrpc.Status\022\023\n\013orientation\030\002 \003(\002"
    "\"Y\n\033DCMPixSliceLocationResponse\022\"\n\006statu"
    "s\030\001 \001(\0132\022.osirixgrpc.Status\022\026\n\016slice_loc"
    "ation\030\002 \001(\002\"S\n\030DCMPixSourceFileResponse\022"
    "\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\023\n\013s"
    "ource_file\030\002 \001(\t\"Q\n\031DCMPixConvertToRGBRe"
    "quest\022\037\n\003pix\030\001 \001(\0132\022.osirixgrpc.DCMPix\022\023"
    "\n\013rgb_channel\030\002 \001(\005\"O\n\030DCMPixConvertToBW"
    "Request\022\037\n\003pix\030\001 \001(\0132\022.osirixgrpc.DCMPix"
    "\022\022\n\nbw_channel\030\002 \001(\005\"X\n\027DCMPixComputeROI"
    "Request\022\037\n\003pix\030\001 \001(\0132\022.osirixgrpc.DCMPix"
    "\022\034\n\003roi\030\002 \001(\0132\017.osirixgrpc.ROI\"W\n\026DCMPix"
    "ROIValuesRequest\022\037\n\003pix\030\001 \001(\0132\022.osirixgr"
    "pc.DCMPix\022\034\n\003roi\030\002 \001(\0132\017.osirixgrpc.ROI\""
    "k\n\025DCMPixSetImageRequest\022\037\n\003pix\030\001 \001(\0132\022."
    "osirixgrpc.DCMPix\022\030\n\020image_data_float\030\002 "
    "\003(\002\022\027\n\017image_data_argb\030\003 \003(\005\"[\n\032DCMPixGe"
    "tMapFromROIRequest\022\037\n\003pix\030\001 \001(\0132\022.osirix"
    "grpc.DCMPix\022\034\n\003roi\030\002 \001(\0132\017.osirixgrpc.RO"
    "Ib\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dcmpix_2eproto_deps[2] =
    {
        &::descriptor_table_types_2eproto,
        &::descriptor_table_utilities_2eproto,
};
static ::absl::once_flag descriptor_table_dcmpix_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dcmpix_2eproto = {
    false,
    false,
    2169,
    descriptor_table_protodef_dcmpix_2eproto,
    "dcmpix.proto",
    &descriptor_table_dcmpix_2eproto_once,
    descriptor_table_dcmpix_2eproto_deps,
    2,
    20,
    schemas,
    file_default_instances,
    TableStruct_dcmpix_2eproto::offsets,
    file_level_metadata_dcmpix_2eproto,
    file_level_enum_descriptors_dcmpix_2eproto,
    file_level_service_descriptors_dcmpix_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dcmpix_2eproto_getter() {
  return &descriptor_table_dcmpix_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dcmpix_2eproto(&descriptor_table_dcmpix_2eproto);
namespace osirixgrpc {
// ===================================================================

class DCMPixIsRGBResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixIsRGBResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixIsRGBResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixIsRGBResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixIsRGBResponse::_Internal::status(const DCMPixIsRGBResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixIsRGBResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixIsRGBResponse::DCMPixIsRGBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixIsRGBResponse)
}
DCMPixIsRGBResponse::DCMPixIsRGBResponse(const DCMPixIsRGBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixIsRGBResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.is_rgb_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  _this->_impl_.is_rgb_ = from._impl_.is_rgb_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixIsRGBResponse)
}

inline void DCMPixIsRGBResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.is_rgb_) { false }

  };
}

DCMPixIsRGBResponse::~DCMPixIsRGBResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixIsRGBResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixIsRGBResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixIsRGBResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixIsRGBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixIsRGBResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.is_rgb_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixIsRGBResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_rgb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixIsRGBResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixIsRGBResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool is_rgb = 2;
  if (this->_internal_is_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_rgb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixIsRGBResponse)
  return target;
}

::size_t DCMPixIsRGBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixIsRGBResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool is_rgb = 2;
  if (this->_internal_is_rgb() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixIsRGBResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixIsRGBResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixIsRGBResponse::GetClassData() const { return &_class_data_; }


void DCMPixIsRGBResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixIsRGBResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixIsRGBResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixIsRGBResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_is_rgb() != 0) {
    _this->_internal_set_is_rgb(from._internal_is_rgb());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixIsRGBResponse::CopyFrom(const DCMPixIsRGBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixIsRGBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixIsRGBResponse::IsInitialized() const {
  return true;
}

void DCMPixIsRGBResponse::InternalSwap(DCMPixIsRGBResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixIsRGBResponse, _impl_.is_rgb_)
      + sizeof(DCMPixIsRGBResponse::_impl_.is_rgb_)
      - PROTOBUF_FIELD_OFFSET(DCMPixIsRGBResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixIsRGBResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[0]);
}
// ===================================================================

class DCMPixComputeROIResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixComputeROIResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixComputeROIResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixComputeROIResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixComputeROIResponse::_Internal::status(const DCMPixComputeROIResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixComputeROIResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixComputeROIResponse::DCMPixComputeROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixComputeROIResponse)
}
DCMPixComputeROIResponse::DCMPixComputeROIResponse(const DCMPixComputeROIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixComputeROIResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.mean_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.std_dev_) {}

    , decltype(_impl_.min_) {}

    , decltype(_impl_.max_) {}

    , decltype(_impl_.skewness_) {}

    , decltype(_impl_.kurtosis_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.mean_, &from._impl_.mean_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.kurtosis_) -
    reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.kurtosis_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixComputeROIResponse)
}

inline void DCMPixComputeROIResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.mean_) { 0 }

    , decltype(_impl_.total_) { 0 }

    , decltype(_impl_.std_dev_) { 0 }

    , decltype(_impl_.min_) { 0 }

    , decltype(_impl_.max_) { 0 }

    , decltype(_impl_.skewness_) { 0 }

    , decltype(_impl_.kurtosis_) { 0 }

  };
}

DCMPixComputeROIResponse::~DCMPixComputeROIResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixComputeROIResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixComputeROIResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixComputeROIResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixComputeROIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixComputeROIResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.mean_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.kurtosis_) -
      reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.kurtosis_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixComputeROIResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float std_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float skewness = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.skewness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float kurtosis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 69)) {
          _impl_.kurtosis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixComputeROIResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixComputeROIResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // float mean = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_mean = this->_internal_mean();
  ::uint32_t raw_mean;
  memcpy(&raw_mean, &tmp_mean, sizeof(tmp_mean));
  if (raw_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_mean(), target);
  }

  // float total = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = this->_internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_total(), target);
  }

  // float std_dev = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_std_dev = this->_internal_std_dev();
  ::uint32_t raw_std_dev;
  memcpy(&raw_std_dev, &tmp_std_dev, sizeof(tmp_std_dev));
  if (raw_std_dev != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_std_dev(), target);
  }

  // float min = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  ::uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_min(), target);
  }

  // float max = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  ::uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_max(), target);
  }

  // float skewness = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_skewness = this->_internal_skewness();
  ::uint32_t raw_skewness;
  memcpy(&raw_skewness, &tmp_skewness, sizeof(tmp_skewness));
  if (raw_skewness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_skewness(), target);
  }

  // float kurtosis = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_kurtosis = this->_internal_kurtosis();
  ::uint32_t raw_kurtosis;
  memcpy(&raw_kurtosis, &tmp_kurtosis, sizeof(tmp_kurtosis));
  if (raw_kurtosis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_kurtosis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixComputeROIResponse)
  return target;
}

::size_t DCMPixComputeROIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixComputeROIResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // float mean = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_mean = this->_internal_mean();
  ::uint32_t raw_mean;
  memcpy(&raw_mean, &tmp_mean, sizeof(tmp_mean));
  if (raw_mean != 0) {
    total_size += 5;
  }

  // float total = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = this->_internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    total_size += 5;
  }

  // float std_dev = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_std_dev = this->_internal_std_dev();
  ::uint32_t raw_std_dev;
  memcpy(&raw_std_dev, &tmp_std_dev, sizeof(tmp_std_dev));
  if (raw_std_dev != 0) {
    total_size += 5;
  }

  // float min = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_min = this->_internal_min();
  ::uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 5;
  }

  // float max = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_max = this->_internal_max();
  ::uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 5;
  }

  // float skewness = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_skewness = this->_internal_skewness();
  ::uint32_t raw_skewness;
  memcpy(&raw_skewness, &tmp_skewness, sizeof(tmp_skewness));
  if (raw_skewness != 0) {
    total_size += 5;
  }

  // float kurtosis = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_kurtosis = this->_internal_kurtosis();
  ::uint32_t raw_kurtosis;
  memcpy(&raw_kurtosis, &tmp_kurtosis, sizeof(tmp_kurtosis));
  if (raw_kurtosis != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixComputeROIResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixComputeROIResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixComputeROIResponse::GetClassData() const { return &_class_data_; }


void DCMPixComputeROIResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixComputeROIResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixComputeROIResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixComputeROIResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_mean = from._internal_mean();
  ::uint32_t raw_mean;
  memcpy(&raw_mean, &tmp_mean, sizeof(tmp_mean));
  if (raw_mean != 0) {
    _this->_internal_set_mean(from._internal_mean());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = from._internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_std_dev = from._internal_std_dev();
  ::uint32_t raw_std_dev;
  memcpy(&raw_std_dev, &tmp_std_dev, sizeof(tmp_std_dev));
  if (raw_std_dev != 0) {
    _this->_internal_set_std_dev(from._internal_std_dev());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_min = from._internal_min();
  ::uint32_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_max = from._internal_max();
  ::uint32_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_skewness = from._internal_skewness();
  ::uint32_t raw_skewness;
  memcpy(&raw_skewness, &tmp_skewness, sizeof(tmp_skewness));
  if (raw_skewness != 0) {
    _this->_internal_set_skewness(from._internal_skewness());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_kurtosis = from._internal_kurtosis();
  ::uint32_t raw_kurtosis;
  memcpy(&raw_kurtosis, &tmp_kurtosis, sizeof(tmp_kurtosis));
  if (raw_kurtosis != 0) {
    _this->_internal_set_kurtosis(from._internal_kurtosis());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixComputeROIResponse::CopyFrom(const DCMPixComputeROIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixComputeROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixComputeROIResponse::IsInitialized() const {
  return true;
}

void DCMPixComputeROIResponse::InternalSwap(DCMPixComputeROIResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixComputeROIResponse, _impl_.kurtosis_)
      + sizeof(DCMPixComputeROIResponse::_impl_.kurtosis_)
      - PROTOBUF_FIELD_OFFSET(DCMPixComputeROIResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixComputeROIResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[1]);
}
// ===================================================================

class DCMPixROIValuesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixROIValuesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixROIValuesResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixROIValuesResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixROIValuesResponse::_Internal::status(const DCMPixROIValuesResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixROIValuesResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixROIValuesResponse::DCMPixROIValuesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixROIValuesResponse)
}
DCMPixROIValuesResponse::DCMPixROIValuesResponse(const DCMPixROIValuesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixROIValuesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_) { from._impl_.values_ }

    , decltype(_impl_.row_indices_) { from._impl_.row_indices_ }
    ,/* _impl_._row_indices_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.column_indices_) { from._impl_.column_indices_ }
    ,/* _impl_._column_indices_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixROIValuesResponse)
}

inline void DCMPixROIValuesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_) { arena }

    , decltype(_impl_.row_indices_) { arena }
    ,/* _impl_._row_indices_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.column_indices_) { arena }
    ,/* _impl_._column_indices_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.status_){nullptr}
  };
}

DCMPixROIValuesResponse::~DCMPixROIValuesResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixROIValuesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixROIValuesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  _impl_.row_indices_.~RepeatedField();
  _impl_.column_indices_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixROIValuesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixROIValuesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixROIValuesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_values()->Clear();
  _internal_mutable_row_indices()->Clear();
  _internal_mutable_column_indices()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixROIValuesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 row_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_row_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 column_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_column_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_column_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixROIValuesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixROIValuesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  // repeated int32 row_indices = 3;
  {
    int byte_size = _impl_._row_indices_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_row_indices(),
                                                 byte_size, target);
    }
  }

  // repeated int32 column_indices = 4;
  {
    int byte_size = _impl_._column_indices_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(4, _internal_column_indices(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixROIValuesResponse)
  return target;
}

::size_t DCMPixROIValuesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixROIValuesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 row_indices = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_row_indices())
    ;
    _impl_._row_indices_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 column_indices = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_column_indices())
    ;
    _impl_._column_indices_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixROIValuesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixROIValuesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixROIValuesResponse::GetClassData() const { return &_class_data_; }


void DCMPixROIValuesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixROIValuesResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixROIValuesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixROIValuesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_impl_.row_indices_.MergeFrom(from._impl_.row_indices_);
  _this->_impl_.column_indices_.MergeFrom(from._impl_.column_indices_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixROIValuesResponse::CopyFrom(const DCMPixROIValuesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixROIValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixROIValuesResponse::IsInitialized() const {
  return true;
}

void DCMPixROIValuesResponse::InternalSwap(DCMPixROIValuesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.row_indices_.InternalSwap(&other->_impl_.row_indices_);
  _impl_.column_indices_.InternalSwap(&other->_impl_.column_indices_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixROIValuesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[2]);
}
// ===================================================================

class DCMPixDicomImageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixDicomImageResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixDicomImageResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixDicomImageResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::DicomImage& dicom_image(const DCMPixDicomImageResponse* msg);
  static void set_has_dicom_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
DCMPixDicomImageResponse::_Internal::status(const DCMPixDicomImageResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::DicomImage&
DCMPixDicomImageResponse::_Internal::dicom_image(const DCMPixDicomImageResponse* msg) {
  return *msg->_impl_.dicom_image_;
}
void DCMPixDicomImageResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DCMPixDicomImageResponse::clear_dicom_image() {
  if (_impl_.dicom_image_ != nullptr) _impl_.dicom_image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DCMPixDicomImageResponse::DCMPixDicomImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixDicomImageResponse)
}
DCMPixDicomImageResponse::DCMPixDicomImageResponse(const DCMPixDicomImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixDicomImageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dicom_image_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dicom_image_ = new ::osirixgrpc::DicomImage(*from._impl_.dicom_image_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixDicomImageResponse)
}

inline void DCMPixDicomImageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dicom_image_){nullptr}
  };
}

DCMPixDicomImageResponse::~DCMPixDicomImageResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixDicomImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixDicomImageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dicom_image_;
}

void DCMPixDicomImageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixDicomImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixDicomImageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dicom_image_ != nullptr);
      _impl_.dicom_image_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixDicomImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.DicomImage dicom_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicom_image(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixDicomImageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixDicomImageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.DicomImage dicom_image = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dicom_image(this),
        _Internal::dicom_image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixDicomImageResponse)
  return target;
}

::size_t DCMPixDicomImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixDicomImageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.DicomImage dicom_image = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dicom_image_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixDicomImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixDicomImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixDicomImageResponse::GetClassData() const { return &_class_data_; }


void DCMPixDicomImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixDicomImageResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixDicomImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixDicomImageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dicom_image()->::osirixgrpc::DicomImage::MergeFrom(
          from._internal_dicom_image());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixDicomImageResponse::CopyFrom(const DCMPixDicomImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixDicomImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixDicomImageResponse::IsInitialized() const {
  return true;
}

void DCMPixDicomImageResponse::InternalSwap(DCMPixDicomImageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixDicomImageResponse, _impl_.dicom_image_)
      + sizeof(DCMPixDicomImageResponse::_impl_.dicom_image_)
      - PROTOBUF_FIELD_OFFSET(DCMPixDicomImageResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixDicomImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[3]);
}
// ===================================================================

class DCMPixDicomSeriesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixDicomSeriesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixDicomSeriesResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixDicomSeriesResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::DicomSeries& dicom_series(const DCMPixDicomSeriesResponse* msg);
  static void set_has_dicom_series(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
DCMPixDicomSeriesResponse::_Internal::status(const DCMPixDicomSeriesResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::DicomSeries&
DCMPixDicomSeriesResponse::_Internal::dicom_series(const DCMPixDicomSeriesResponse* msg) {
  return *msg->_impl_.dicom_series_;
}
void DCMPixDicomSeriesResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DCMPixDicomSeriesResponse::clear_dicom_series() {
  if (_impl_.dicom_series_ != nullptr) _impl_.dicom_series_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DCMPixDicomSeriesResponse::DCMPixDicomSeriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixDicomSeriesResponse)
}
DCMPixDicomSeriesResponse::DCMPixDicomSeriesResponse(const DCMPixDicomSeriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixDicomSeriesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dicom_series_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dicom_series_ = new ::osirixgrpc::DicomSeries(*from._impl_.dicom_series_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixDicomSeriesResponse)
}

inline void DCMPixDicomSeriesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dicom_series_){nullptr}
  };
}

DCMPixDicomSeriesResponse::~DCMPixDicomSeriesResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixDicomSeriesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixDicomSeriesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dicom_series_;
}

void DCMPixDicomSeriesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixDicomSeriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixDicomSeriesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dicom_series_ != nullptr);
      _impl_.dicom_series_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixDicomSeriesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.DicomSeries dicom_series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicom_series(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixDicomSeriesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixDicomSeriesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.DicomSeries dicom_series = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dicom_series(this),
        _Internal::dicom_series(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixDicomSeriesResponse)
  return target;
}

::size_t DCMPixDicomSeriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixDicomSeriesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.DicomSeries dicom_series = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dicom_series_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixDicomSeriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixDicomSeriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixDicomSeriesResponse::GetClassData() const { return &_class_data_; }


void DCMPixDicomSeriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixDicomSeriesResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixDicomSeriesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixDicomSeriesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dicom_series()->::osirixgrpc::DicomSeries::MergeFrom(
          from._internal_dicom_series());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixDicomSeriesResponse::CopyFrom(const DCMPixDicomSeriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixDicomSeriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixDicomSeriesResponse::IsInitialized() const {
  return true;
}

void DCMPixDicomSeriesResponse::InternalSwap(DCMPixDicomSeriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixDicomSeriesResponse, _impl_.dicom_series_)
      + sizeof(DCMPixDicomSeriesResponse::_impl_.dicom_series_)
      - PROTOBUF_FIELD_OFFSET(DCMPixDicomSeriesResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixDicomSeriesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[4]);
}
// ===================================================================

class DCMPixDicomStudyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixDicomStudyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixDicomStudyResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixDicomStudyResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::DicomStudy& dicom_study(const DCMPixDicomStudyResponse* msg);
  static void set_has_dicom_study(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
DCMPixDicomStudyResponse::_Internal::status(const DCMPixDicomStudyResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::DicomStudy&
DCMPixDicomStudyResponse::_Internal::dicom_study(const DCMPixDicomStudyResponse* msg) {
  return *msg->_impl_.dicom_study_;
}
void DCMPixDicomStudyResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DCMPixDicomStudyResponse::clear_dicom_study() {
  if (_impl_.dicom_study_ != nullptr) _impl_.dicom_study_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DCMPixDicomStudyResponse::DCMPixDicomStudyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixDicomStudyResponse)
}
DCMPixDicomStudyResponse::DCMPixDicomStudyResponse(const DCMPixDicomStudyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixDicomStudyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dicom_study_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dicom_study_ = new ::osirixgrpc::DicomStudy(*from._impl_.dicom_study_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixDicomStudyResponse)
}

inline void DCMPixDicomStudyResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dicom_study_){nullptr}
  };
}

DCMPixDicomStudyResponse::~DCMPixDicomStudyResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixDicomStudyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixDicomStudyResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dicom_study_;
}

void DCMPixDicomStudyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixDicomStudyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixDicomStudyResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dicom_study_ != nullptr);
      _impl_.dicom_study_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixDicomStudyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.DicomStudy dicom_study = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicom_study(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixDicomStudyResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixDicomStudyResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.DicomStudy dicom_study = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dicom_study(this),
        _Internal::dicom_study(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixDicomStudyResponse)
  return target;
}

::size_t DCMPixDicomStudyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixDicomStudyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.DicomStudy dicom_study = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dicom_study_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixDicomStudyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixDicomStudyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixDicomStudyResponse::GetClassData() const { return &_class_data_; }


void DCMPixDicomStudyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixDicomStudyResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixDicomStudyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixDicomStudyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dicom_study()->::osirixgrpc::DicomStudy::MergeFrom(
          from._internal_dicom_study());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixDicomStudyResponse::CopyFrom(const DCMPixDicomStudyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixDicomStudyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixDicomStudyResponse::IsInitialized() const {
  return true;
}

void DCMPixDicomStudyResponse::InternalSwap(DCMPixDicomStudyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixDicomStudyResponse, _impl_.dicom_study_)
      + sizeof(DCMPixDicomStudyResponse::_impl_.dicom_study_)
      - PROTOBUF_FIELD_OFFSET(DCMPixDicomStudyResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixDicomStudyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[5]);
}
// ===================================================================

class DCMPixImageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixImageResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixImageResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixImageResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixImageResponse::_Internal::status(const DCMPixImageResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixImageResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixImageResponse::DCMPixImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixImageResponse)
}
DCMPixImageResponse::DCMPixImageResponse(const DCMPixImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixImageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_float_) { from._impl_.image_data_float_ }

    , decltype(_impl_.image_data_argb_) { from._impl_.image_data_argb_ }
    ,/* _impl_._image_data_argb_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.rows_) {}

    , decltype(_impl_.columns_) {}

    , decltype(_impl_.is_argb_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_argb_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.is_argb_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixImageResponse)
}

inline void DCMPixImageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_float_) { arena }

    , decltype(_impl_.image_data_argb_) { arena }
    ,/* _impl_._image_data_argb_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.rows_) { 0 }

    , decltype(_impl_.columns_) { 0 }

    , decltype(_impl_.is_argb_) { false }

  };
}

DCMPixImageResponse::~DCMPixImageResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixImageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_data_float_.~RepeatedField();
  _impl_.image_data_argb_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixImageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixImageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_image_data_float()->Clear();
  _internal_mutable_image_data_argb()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_argb_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.is_argb_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_argb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.is_argb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float image_data_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_image_data_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 45) {
          _internal_add_image_data_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 image_data_argb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_image_data_argb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 48) {
          _internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixImageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixImageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_columns(), target);
  }

  // bool is_argb = 4;
  if (this->_internal_is_argb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_argb(), target);
  }

  // repeated float image_data_float = 5;
  if (this->_internal_image_data_float_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_image_data_float(), target);
  }

  // repeated int32 image_data_argb = 6;
  {
    int byte_size = _impl_._image_data_argb_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(6, _internal_image_data_argb(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixImageResponse)
  return target;
}

::size_t DCMPixImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixImageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float image_data_float = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_image_data_float_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 image_data_argb = 6;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_image_data_argb())
    ;
    _impl_._image_data_argb_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_columns());
  }

  // bool is_argb = 4;
  if (this->_internal_is_argb() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixImageResponse::GetClassData() const { return &_class_data_; }


void DCMPixImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixImageResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixImageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_data_float_.MergeFrom(from._impl_.image_data_float_);
  _this->_impl_.image_data_argb_.MergeFrom(from._impl_.image_data_argb_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_columns() != 0) {
    _this->_internal_set_columns(from._internal_columns());
  }
  if (from._internal_is_argb() != 0) {
    _this->_internal_set_is_argb(from._internal_is_argb());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixImageResponse::CopyFrom(const DCMPixImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixImageResponse::IsInitialized() const {
  return true;
}

void DCMPixImageResponse::InternalSwap(DCMPixImageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_data_float_.InternalSwap(&other->_impl_.image_data_float_);
  _impl_.image_data_argb_.InternalSwap(&other->_impl_.image_data_argb_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixImageResponse, _impl_.is_argb_)
      + sizeof(DCMPixImageResponse::_impl_.is_argb_)
      - PROTOBUF_FIELD_OFFSET(DCMPixImageResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[6]);
}
// ===================================================================

class DCMPixGetMapFromROIResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixGetMapFromROIResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixGetMapFromROIResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixGetMapFromROIResponse::_Internal::status(const DCMPixGetMapFromROIResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixGetMapFromROIResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixGetMapFromROIResponse::DCMPixGetMapFromROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixGetMapFromROIResponse)
}
DCMPixGetMapFromROIResponse::DCMPixGetMapFromROIResponse(const DCMPixGetMapFromROIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixGetMapFromROIResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_) { from._impl_.map_ }

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.rows_) {}

    , decltype(_impl_.columns_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.columns_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixGetMapFromROIResponse)
}

inline void DCMPixGetMapFromROIResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_) { arena }

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.rows_) { 0 }

    , decltype(_impl_.columns_) { 0 }

  };
}

DCMPixGetMapFromROIResponse::~DCMPixGetMapFromROIResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixGetMapFromROIResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixGetMapFromROIResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixGetMapFromROIResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixGetMapFromROIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.columns_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.columns_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixGetMapFromROIResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bool map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixGetMapFromROIResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_columns(), target);
  }

  // repeated bool map = 4;
  if (this->_internal_map_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixGetMapFromROIResponse)
  return target;
}

::size_t DCMPixGetMapFromROIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool map = 4;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_map_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_columns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixGetMapFromROIResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixGetMapFromROIResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixGetMapFromROIResponse::GetClassData() const { return &_class_data_; }


void DCMPixGetMapFromROIResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixGetMapFromROIResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixGetMapFromROIResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_columns() != 0) {
    _this->_internal_set_columns(from._internal_columns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixGetMapFromROIResponse::CopyFrom(const DCMPixGetMapFromROIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixGetMapFromROIResponse::IsInitialized() const {
  return true;
}

void DCMPixGetMapFromROIResponse::InternalSwap(DCMPixGetMapFromROIResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIResponse, _impl_.columns_)
      + sizeof(DCMPixGetMapFromROIResponse::_impl_.columns_)
      - PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixGetMapFromROIResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[7]);
}
// ===================================================================

class DCMPixShapeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixShapeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixShapeResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixShapeResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixShapeResponse::_Internal::status(const DCMPixShapeResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixShapeResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixShapeResponse::DCMPixShapeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixShapeResponse)
}
DCMPixShapeResponse::DCMPixShapeResponse(const DCMPixShapeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixShapeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.rows_) {}

    , decltype(_impl_.columns_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.columns_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixShapeResponse)
}

inline void DCMPixShapeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.rows_) { 0 }

    , decltype(_impl_.columns_) { 0 }

  };
}

DCMPixShapeResponse::~DCMPixShapeResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixShapeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixShapeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixShapeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixShapeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixShapeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.columns_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.columns_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixShapeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixShapeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixShapeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixShapeResponse)
  return target;
}

::size_t DCMPixShapeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixShapeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_columns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixShapeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixShapeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixShapeResponse::GetClassData() const { return &_class_data_; }


void DCMPixShapeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixShapeResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixShapeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixShapeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_columns() != 0) {
    _this->_internal_set_columns(from._internal_columns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixShapeResponse::CopyFrom(const DCMPixShapeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixShapeResponse::IsInitialized() const {
  return true;
}

void DCMPixShapeResponse::InternalSwap(DCMPixShapeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixShapeResponse, _impl_.columns_)
      + sizeof(DCMPixShapeResponse::_impl_.columns_)
      - PROTOBUF_FIELD_OFFSET(DCMPixShapeResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixShapeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[8]);
}
// ===================================================================

class DCMPixSpacingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixSpacingResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixSpacingResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixSpacingResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixSpacingResponse::_Internal::status(const DCMPixSpacingResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixSpacingResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixSpacingResponse::DCMPixSpacingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSpacingResponse)
}
DCMPixSpacingResponse::DCMPixSpacingResponse(const DCMPixSpacingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixSpacingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.spacing_rows_) {}

    , decltype(_impl_.spacing_columns_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.spacing_rows_, &from._impl_.spacing_rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.spacing_columns_) -
    reinterpret_cast<char*>(&_impl_.spacing_rows_)) + sizeof(_impl_.spacing_columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSpacingResponse)
}

inline void DCMPixSpacingResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.spacing_rows_) { 0 }

    , decltype(_impl_.spacing_columns_) { 0 }

  };
}

DCMPixSpacingResponse::~DCMPixSpacingResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSpacingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixSpacingResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixSpacingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixSpacingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSpacingResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.spacing_rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.spacing_columns_) -
      reinterpret_cast<char*>(&_impl_.spacing_rows_)) + sizeof(_impl_.spacing_columns_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSpacingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float spacing_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.spacing_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float spacing_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.spacing_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixSpacingResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSpacingResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // float spacing_rows = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_spacing_rows = this->_internal_spacing_rows();
  ::uint32_t raw_spacing_rows;
  memcpy(&raw_spacing_rows, &tmp_spacing_rows, sizeof(tmp_spacing_rows));
  if (raw_spacing_rows != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_spacing_rows(), target);
  }

  // float spacing_columns = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_spacing_columns = this->_internal_spacing_columns();
  ::uint32_t raw_spacing_columns;
  memcpy(&raw_spacing_columns, &tmp_spacing_columns, sizeof(tmp_spacing_columns));
  if (raw_spacing_columns != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_spacing_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSpacingResponse)
  return target;
}

::size_t DCMPixSpacingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSpacingResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // float spacing_rows = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_spacing_rows = this->_internal_spacing_rows();
  ::uint32_t raw_spacing_rows;
  memcpy(&raw_spacing_rows, &tmp_spacing_rows, sizeof(tmp_spacing_rows));
  if (raw_spacing_rows != 0) {
    total_size += 5;
  }

  // float spacing_columns = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_spacing_columns = this->_internal_spacing_columns();
  ::uint32_t raw_spacing_columns;
  memcpy(&raw_spacing_columns, &tmp_spacing_columns, sizeof(tmp_spacing_columns));
  if (raw_spacing_columns != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixSpacingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixSpacingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixSpacingResponse::GetClassData() const { return &_class_data_; }


void DCMPixSpacingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixSpacingResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixSpacingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSpacingResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_spacing_rows = from._internal_spacing_rows();
  ::uint32_t raw_spacing_rows;
  memcpy(&raw_spacing_rows, &tmp_spacing_rows, sizeof(tmp_spacing_rows));
  if (raw_spacing_rows != 0) {
    _this->_internal_set_spacing_rows(from._internal_spacing_rows());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_spacing_columns = from._internal_spacing_columns();
  ::uint32_t raw_spacing_columns;
  memcpy(&raw_spacing_columns, &tmp_spacing_columns, sizeof(tmp_spacing_columns));
  if (raw_spacing_columns != 0) {
    _this->_internal_set_spacing_columns(from._internal_spacing_columns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixSpacingResponse::CopyFrom(const DCMPixSpacingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSpacingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSpacingResponse::IsInitialized() const {
  return true;
}

void DCMPixSpacingResponse::InternalSwap(DCMPixSpacingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixSpacingResponse, _impl_.spacing_columns_)
      + sizeof(DCMPixSpacingResponse::_impl_.spacing_columns_)
      - PROTOBUF_FIELD_OFFSET(DCMPixSpacingResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSpacingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[9]);
}
// ===================================================================

class DCMPixOriginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixOriginResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixOriginResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixOriginResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixOriginResponse::_Internal::status(const DCMPixOriginResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixOriginResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixOriginResponse::DCMPixOriginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixOriginResponse)
}
DCMPixOriginResponse::DCMPixOriginResponse(const DCMPixOriginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixOriginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.origin_rows_) {}

    , decltype(_impl_.origin_columns_) {}

    , decltype(_impl_.origin_slices_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.origin_rows_, &from._impl_.origin_rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.origin_slices_) -
    reinterpret_cast<char*>(&_impl_.origin_rows_)) + sizeof(_impl_.origin_slices_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixOriginResponse)
}

inline void DCMPixOriginResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.origin_rows_) { 0 }

    , decltype(_impl_.origin_columns_) { 0 }

    , decltype(_impl_.origin_slices_) { 0 }

  };
}

DCMPixOriginResponse::~DCMPixOriginResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixOriginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixOriginResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixOriginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixOriginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixOriginResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.origin_rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.origin_slices_) -
      reinterpret_cast<char*>(&_impl_.origin_rows_)) + sizeof(_impl_.origin_slices_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixOriginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float origin_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.origin_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float origin_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.origin_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float origin_slices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.origin_slices_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixOriginResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixOriginResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // float origin_rows = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_rows = this->_internal_origin_rows();
  ::uint32_t raw_origin_rows;
  memcpy(&raw_origin_rows, &tmp_origin_rows, sizeof(tmp_origin_rows));
  if (raw_origin_rows != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_origin_rows(), target);
  }

  // float origin_columns = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_columns = this->_internal_origin_columns();
  ::uint32_t raw_origin_columns;
  memcpy(&raw_origin_columns, &tmp_origin_columns, sizeof(tmp_origin_columns));
  if (raw_origin_columns != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_origin_columns(), target);
  }

  // float origin_slices = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_slices = this->_internal_origin_slices();
  ::uint32_t raw_origin_slices;
  memcpy(&raw_origin_slices, &tmp_origin_slices, sizeof(tmp_origin_slices));
  if (raw_origin_slices != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_origin_slices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixOriginResponse)
  return target;
}

::size_t DCMPixOriginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixOriginResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // float origin_rows = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_rows = this->_internal_origin_rows();
  ::uint32_t raw_origin_rows;
  memcpy(&raw_origin_rows, &tmp_origin_rows, sizeof(tmp_origin_rows));
  if (raw_origin_rows != 0) {
    total_size += 5;
  }

  // float origin_columns = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_columns = this->_internal_origin_columns();
  ::uint32_t raw_origin_columns;
  memcpy(&raw_origin_columns, &tmp_origin_columns, sizeof(tmp_origin_columns));
  if (raw_origin_columns != 0) {
    total_size += 5;
  }

  // float origin_slices = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_slices = this->_internal_origin_slices();
  ::uint32_t raw_origin_slices;
  memcpy(&raw_origin_slices, &tmp_origin_slices, sizeof(tmp_origin_slices));
  if (raw_origin_slices != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixOriginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixOriginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixOriginResponse::GetClassData() const { return &_class_data_; }


void DCMPixOriginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixOriginResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixOriginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixOriginResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_rows = from._internal_origin_rows();
  ::uint32_t raw_origin_rows;
  memcpy(&raw_origin_rows, &tmp_origin_rows, sizeof(tmp_origin_rows));
  if (raw_origin_rows != 0) {
    _this->_internal_set_origin_rows(from._internal_origin_rows());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_columns = from._internal_origin_columns();
  ::uint32_t raw_origin_columns;
  memcpy(&raw_origin_columns, &tmp_origin_columns, sizeof(tmp_origin_columns));
  if (raw_origin_columns != 0) {
    _this->_internal_set_origin_columns(from._internal_origin_columns());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_slices = from._internal_origin_slices();
  ::uint32_t raw_origin_slices;
  memcpy(&raw_origin_slices, &tmp_origin_slices, sizeof(tmp_origin_slices));
  if (raw_origin_slices != 0) {
    _this->_internal_set_origin_slices(from._internal_origin_slices());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixOriginResponse::CopyFrom(const DCMPixOriginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixOriginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixOriginResponse::IsInitialized() const {
  return true;
}

void DCMPixOriginResponse::InternalSwap(DCMPixOriginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixOriginResponse, _impl_.origin_slices_)
      + sizeof(DCMPixOriginResponse::_impl_.origin_slices_)
      - PROTOBUF_FIELD_OFFSET(DCMPixOriginResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixOriginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[10]);
}
// ===================================================================

class DCMPixOrientationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixOrientationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixOrientationResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixOrientationResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixOrientationResponse::_Internal::status(const DCMPixOrientationResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixOrientationResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixOrientationResponse::DCMPixOrientationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixOrientationResponse)
}
DCMPixOrientationResponse::DCMPixOrientationResponse(const DCMPixOrientationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixOrientationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orientation_) { from._impl_.orientation_ }

    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixOrientationResponse)
}

inline void DCMPixOrientationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orientation_) { arena }

    , decltype(_impl_.status_){nullptr}
  };
}

DCMPixOrientationResponse::~DCMPixOrientationResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixOrientationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixOrientationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orientation_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixOrientationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixOrientationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixOrientationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orientation()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixOrientationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_orientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 21) {
          _internal_add_orientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixOrientationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixOrientationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated float orientation = 2;
  if (this->_internal_orientation_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixOrientationResponse)
  return target;
}

::size_t DCMPixOrientationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixOrientationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float orientation = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_orientation_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixOrientationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixOrientationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixOrientationResponse::GetClassData() const { return &_class_data_; }


void DCMPixOrientationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixOrientationResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixOrientationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixOrientationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orientation_.MergeFrom(from._impl_.orientation_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixOrientationResponse::CopyFrom(const DCMPixOrientationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixOrientationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixOrientationResponse::IsInitialized() const {
  return true;
}

void DCMPixOrientationResponse::InternalSwap(DCMPixOrientationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.orientation_.InternalSwap(&other->_impl_.orientation_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixOrientationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[11]);
}
// ===================================================================

class DCMPixSliceLocationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixSliceLocationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixSliceLocationResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixSliceLocationResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixSliceLocationResponse::_Internal::status(const DCMPixSliceLocationResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixSliceLocationResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixSliceLocationResponse::DCMPixSliceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSliceLocationResponse)
}
DCMPixSliceLocationResponse::DCMPixSliceLocationResponse(const DCMPixSliceLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixSliceLocationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.slice_location_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  _this->_impl_.slice_location_ = from._impl_.slice_location_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSliceLocationResponse)
}

inline void DCMPixSliceLocationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.slice_location_) { 0 }

  };
}

DCMPixSliceLocationResponse::~DCMPixSliceLocationResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSliceLocationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixSliceLocationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixSliceLocationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixSliceLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSliceLocationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.slice_location_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSliceLocationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float slice_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.slice_location_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixSliceLocationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSliceLocationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // float slice_location = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_slice_location = this->_internal_slice_location();
  ::uint32_t raw_slice_location;
  memcpy(&raw_slice_location, &tmp_slice_location, sizeof(tmp_slice_location));
  if (raw_slice_location != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_slice_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSliceLocationResponse)
  return target;
}

::size_t DCMPixSliceLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSliceLocationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // float slice_location = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_slice_location = this->_internal_slice_location();
  ::uint32_t raw_slice_location;
  memcpy(&raw_slice_location, &tmp_slice_location, sizeof(tmp_slice_location));
  if (raw_slice_location != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixSliceLocationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixSliceLocationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixSliceLocationResponse::GetClassData() const { return &_class_data_; }


void DCMPixSliceLocationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixSliceLocationResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixSliceLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSliceLocationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_slice_location = from._internal_slice_location();
  ::uint32_t raw_slice_location;
  memcpy(&raw_slice_location, &tmp_slice_location, sizeof(tmp_slice_location));
  if (raw_slice_location != 0) {
    _this->_internal_set_slice_location(from._internal_slice_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixSliceLocationResponse::CopyFrom(const DCMPixSliceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSliceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSliceLocationResponse::IsInitialized() const {
  return true;
}

void DCMPixSliceLocationResponse::InternalSwap(DCMPixSliceLocationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixSliceLocationResponse, _impl_.slice_location_)
      + sizeof(DCMPixSliceLocationResponse::_impl_.slice_location_)
      - PROTOBUF_FIELD_OFFSET(DCMPixSliceLocationResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSliceLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[12]);
}
// ===================================================================

class DCMPixSourceFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixSourceFileResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixSourceFileResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const DCMPixSourceFileResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
DCMPixSourceFileResponse::_Internal::status(const DCMPixSourceFileResponse* msg) {
  return *msg->_impl_.status_;
}
void DCMPixSourceFileResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixSourceFileResponse::DCMPixSourceFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSourceFileResponse)
}
DCMPixSourceFileResponse::DCMPixSourceFileResponse(const DCMPixSourceFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixSourceFileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_file_) {}

    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_file_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_file().empty()) {
    _this->_impl_.source_file_.Set(from._internal_source_file(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSourceFileResponse)
}

inline void DCMPixSourceFileResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_file_) {}

    , decltype(_impl_.status_){nullptr}
  };
  _impl_.source_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_file_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DCMPixSourceFileResponse::~DCMPixSourceFileResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSourceFileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixSourceFileResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_file_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DCMPixSourceFileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixSourceFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSourceFileResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_file_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSourceFileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "osirixgrpc.DCMPixSourceFileResponse.source_file"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixSourceFileResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSourceFileResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string source_file = 2;
  if (!this->_internal_source_file().empty()) {
    const std::string& _s = this->_internal_source_file();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "osirixgrpc.DCMPixSourceFileResponse.source_file");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSourceFileResponse)
  return target;
}

::size_t DCMPixSourceFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSourceFileResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_file = 2;
  if (!this->_internal_source_file().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_file());
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixSourceFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixSourceFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixSourceFileResponse::GetClassData() const { return &_class_data_; }


void DCMPixSourceFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixSourceFileResponse*>(&to_msg);
  auto& from = static_cast<const DCMPixSourceFileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSourceFileResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_file().empty()) {
    _this->_internal_set_source_file(from._internal_source_file());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixSourceFileResponse::CopyFrom(const DCMPixSourceFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSourceFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSourceFileResponse::IsInitialized() const {
  return true;
}

void DCMPixSourceFileResponse::InternalSwap(DCMPixSourceFileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_file_, lhs_arena,
                                       &other->_impl_.source_file_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSourceFileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[13]);
}
// ===================================================================

class DCMPixConvertToRGBRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixConvertToRGBRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixConvertToRGBRequest, _impl_._has_bits_);
  static const ::osirixgrpc::DCMPix& pix(const DCMPixConvertToRGBRequest* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::DCMPix&
DCMPixConvertToRGBRequest::_Internal::pix(const DCMPixConvertToRGBRequest* msg) {
  return *msg->_impl_.pix_;
}
void DCMPixConvertToRGBRequest::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixConvertToRGBRequest::DCMPixConvertToRGBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixConvertToRGBRequest)
}
DCMPixConvertToRGBRequest::DCMPixConvertToRGBRequest(const DCMPixConvertToRGBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixConvertToRGBRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.rgb_channel_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  _this->_impl_.rgb_channel_ = from._impl_.rgb_channel_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixConvertToRGBRequest)
}

inline void DCMPixConvertToRGBRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.rgb_channel_) { 0 }

  };
}

DCMPixConvertToRGBRequest::~DCMPixConvertToRGBRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixConvertToRGBRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixConvertToRGBRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pix_;
}

void DCMPixConvertToRGBRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixConvertToRGBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixConvertToRGBRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pix_ != nullptr);
    _impl_.pix_->Clear();
  }
  _impl_.rgb_channel_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixConvertToRGBRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 rgb_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.rgb_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixConvertToRGBRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixConvertToRGBRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.DCMPix pix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  // int32 rgb_channel = 2;
  if (this->_internal_rgb_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_rgb_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixConvertToRGBRequest)
  return target;
}

::size_t DCMPixConvertToRGBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixConvertToRGBRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pix_);
  }

  // int32 rgb_channel = 2;
  if (this->_internal_rgb_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rgb_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixConvertToRGBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixConvertToRGBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixConvertToRGBRequest::GetClassData() const { return &_class_data_; }


void DCMPixConvertToRGBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixConvertToRGBRequest*>(&to_msg);
  auto& from = static_cast<const DCMPixConvertToRGBRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixConvertToRGBRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
        from._internal_pix());
  }
  if (from._internal_rgb_channel() != 0) {
    _this->_internal_set_rgb_channel(from._internal_rgb_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixConvertToRGBRequest::CopyFrom(const DCMPixConvertToRGBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixConvertToRGBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixConvertToRGBRequest::IsInitialized() const {
  return true;
}

void DCMPixConvertToRGBRequest::InternalSwap(DCMPixConvertToRGBRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixConvertToRGBRequest, _impl_.rgb_channel_)
      + sizeof(DCMPixConvertToRGBRequest::_impl_.rgb_channel_)
      - PROTOBUF_FIELD_OFFSET(DCMPixConvertToRGBRequest, _impl_.pix_)>(
          reinterpret_cast<char*>(&_impl_.pix_),
          reinterpret_cast<char*>(&other->_impl_.pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixConvertToRGBRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[14]);
}
// ===================================================================

class DCMPixConvertToBWRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixConvertToBWRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixConvertToBWRequest, _impl_._has_bits_);
  static const ::osirixgrpc::DCMPix& pix(const DCMPixConvertToBWRequest* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::DCMPix&
DCMPixConvertToBWRequest::_Internal::pix(const DCMPixConvertToBWRequest* msg) {
  return *msg->_impl_.pix_;
}
void DCMPixConvertToBWRequest::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixConvertToBWRequest::DCMPixConvertToBWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixConvertToBWRequest)
}
DCMPixConvertToBWRequest::DCMPixConvertToBWRequest(const DCMPixConvertToBWRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixConvertToBWRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.bw_channel_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  _this->_impl_.bw_channel_ = from._impl_.bw_channel_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixConvertToBWRequest)
}

inline void DCMPixConvertToBWRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.bw_channel_) { 0 }

  };
}

DCMPixConvertToBWRequest::~DCMPixConvertToBWRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixConvertToBWRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixConvertToBWRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pix_;
}

void DCMPixConvertToBWRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixConvertToBWRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixConvertToBWRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pix_ != nullptr);
    _impl_.pix_->Clear();
  }
  _impl_.bw_channel_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixConvertToBWRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 bw_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.bw_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixConvertToBWRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixConvertToBWRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.DCMPix pix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  // int32 bw_channel = 2;
  if (this->_internal_bw_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_bw_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixConvertToBWRequest)
  return target;
}

::size_t DCMPixConvertToBWRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixConvertToBWRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pix_);
  }

  // int32 bw_channel = 2;
  if (this->_internal_bw_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_bw_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixConvertToBWRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixConvertToBWRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixConvertToBWRequest::GetClassData() const { return &_class_data_; }


void DCMPixConvertToBWRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixConvertToBWRequest*>(&to_msg);
  auto& from = static_cast<const DCMPixConvertToBWRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixConvertToBWRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
        from._internal_pix());
  }
  if (from._internal_bw_channel() != 0) {
    _this->_internal_set_bw_channel(from._internal_bw_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixConvertToBWRequest::CopyFrom(const DCMPixConvertToBWRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixConvertToBWRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixConvertToBWRequest::IsInitialized() const {
  return true;
}

void DCMPixConvertToBWRequest::InternalSwap(DCMPixConvertToBWRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixConvertToBWRequest, _impl_.bw_channel_)
      + sizeof(DCMPixConvertToBWRequest::_impl_.bw_channel_)
      - PROTOBUF_FIELD_OFFSET(DCMPixConvertToBWRequest, _impl_.pix_)>(
          reinterpret_cast<char*>(&_impl_.pix_),
          reinterpret_cast<char*>(&other->_impl_.pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixConvertToBWRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[15]);
}
// ===================================================================

class DCMPixComputeROIRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixComputeROIRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixComputeROIRequest, _impl_._has_bits_);
  static const ::osirixgrpc::DCMPix& pix(const DCMPixComputeROIRequest* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ROI& roi(const DCMPixComputeROIRequest* msg);
  static void set_has_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::DCMPix&
DCMPixComputeROIRequest::_Internal::pix(const DCMPixComputeROIRequest* msg) {
  return *msg->_impl_.pix_;
}
const ::osirixgrpc::ROI&
DCMPixComputeROIRequest::_Internal::roi(const DCMPixComputeROIRequest* msg) {
  return *msg->_impl_.roi_;
}
void DCMPixComputeROIRequest::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DCMPixComputeROIRequest::clear_roi() {
  if (_impl_.roi_ != nullptr) _impl_.roi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DCMPixComputeROIRequest::DCMPixComputeROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixComputeROIRequest)
}
DCMPixComputeROIRequest::DCMPixComputeROIRequest(const DCMPixComputeROIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixComputeROIRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.roi_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.roi_ = new ::osirixgrpc::ROI(*from._impl_.roi_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixComputeROIRequest)
}

inline void DCMPixComputeROIRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.roi_){nullptr}
  };
}

DCMPixComputeROIRequest::~DCMPixComputeROIRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixComputeROIRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixComputeROIRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pix_;
  if (this != internal_default_instance()) delete _impl_.roi_;
}

void DCMPixComputeROIRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixComputeROIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixComputeROIRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pix_ != nullptr);
      _impl_.pix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.roi_ != nullptr);
      _impl_.roi_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixComputeROIRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixComputeROIRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixComputeROIRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.DCMPix pix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roi(this),
        _Internal::roi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixComputeROIRequest)
  return target;
}

::size_t DCMPixComputeROIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixComputeROIRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.DCMPix pix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pix_);
    }

    // .osirixgrpc.ROI roi = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roi_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixComputeROIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixComputeROIRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixComputeROIRequest::GetClassData() const { return &_class_data_; }


void DCMPixComputeROIRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixComputeROIRequest*>(&to_msg);
  auto& from = static_cast<const DCMPixComputeROIRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixComputeROIRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
          from._internal_pix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(
          from._internal_roi());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixComputeROIRequest::CopyFrom(const DCMPixComputeROIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixComputeROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixComputeROIRequest::IsInitialized() const {
  return true;
}

void DCMPixComputeROIRequest::InternalSwap(DCMPixComputeROIRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixComputeROIRequest, _impl_.roi_)
      + sizeof(DCMPixComputeROIRequest::_impl_.roi_)
      - PROTOBUF_FIELD_OFFSET(DCMPixComputeROIRequest, _impl_.pix_)>(
          reinterpret_cast<char*>(&_impl_.pix_),
          reinterpret_cast<char*>(&other->_impl_.pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixComputeROIRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[16]);
}
// ===================================================================

class DCMPixROIValuesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixROIValuesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixROIValuesRequest, _impl_._has_bits_);
  static const ::osirixgrpc::DCMPix& pix(const DCMPixROIValuesRequest* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ROI& roi(const DCMPixROIValuesRequest* msg);
  static void set_has_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::DCMPix&
DCMPixROIValuesRequest::_Internal::pix(const DCMPixROIValuesRequest* msg) {
  return *msg->_impl_.pix_;
}
const ::osirixgrpc::ROI&
DCMPixROIValuesRequest::_Internal::roi(const DCMPixROIValuesRequest* msg) {
  return *msg->_impl_.roi_;
}
void DCMPixROIValuesRequest::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DCMPixROIValuesRequest::clear_roi() {
  if (_impl_.roi_ != nullptr) _impl_.roi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DCMPixROIValuesRequest::DCMPixROIValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixROIValuesRequest)
}
DCMPixROIValuesRequest::DCMPixROIValuesRequest(const DCMPixROIValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixROIValuesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.roi_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.roi_ = new ::osirixgrpc::ROI(*from._impl_.roi_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixROIValuesRequest)
}

inline void DCMPixROIValuesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.roi_){nullptr}
  };
}

DCMPixROIValuesRequest::~DCMPixROIValuesRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixROIValuesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixROIValuesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pix_;
  if (this != internal_default_instance()) delete _impl_.roi_;
}

void DCMPixROIValuesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixROIValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixROIValuesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pix_ != nullptr);
      _impl_.pix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.roi_ != nullptr);
      _impl_.roi_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixROIValuesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixROIValuesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixROIValuesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.DCMPix pix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roi(this),
        _Internal::roi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixROIValuesRequest)
  return target;
}

::size_t DCMPixROIValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixROIValuesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.DCMPix pix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pix_);
    }

    // .osirixgrpc.ROI roi = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roi_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixROIValuesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixROIValuesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixROIValuesRequest::GetClassData() const { return &_class_data_; }


void DCMPixROIValuesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixROIValuesRequest*>(&to_msg);
  auto& from = static_cast<const DCMPixROIValuesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixROIValuesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
          from._internal_pix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(
          from._internal_roi());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixROIValuesRequest::CopyFrom(const DCMPixROIValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixROIValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixROIValuesRequest::IsInitialized() const {
  return true;
}

void DCMPixROIValuesRequest::InternalSwap(DCMPixROIValuesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixROIValuesRequest, _impl_.roi_)
      + sizeof(DCMPixROIValuesRequest::_impl_.roi_)
      - PROTOBUF_FIELD_OFFSET(DCMPixROIValuesRequest, _impl_.pix_)>(
          reinterpret_cast<char*>(&_impl_.pix_),
          reinterpret_cast<char*>(&other->_impl_.pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixROIValuesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[17]);
}
// ===================================================================

class DCMPixSetImageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixSetImageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixSetImageRequest, _impl_._has_bits_);
  static const ::osirixgrpc::DCMPix& pix(const DCMPixSetImageRequest* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::DCMPix&
DCMPixSetImageRequest::_Internal::pix(const DCMPixSetImageRequest* msg) {
  return *msg->_impl_.pix_;
}
void DCMPixSetImageRequest::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DCMPixSetImageRequest::DCMPixSetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSetImageRequest)
}
DCMPixSetImageRequest::DCMPixSetImageRequest(const DCMPixSetImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixSetImageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_float_) { from._impl_.image_data_float_ }

    , decltype(_impl_.image_data_argb_) { from._impl_.image_data_argb_ }
    ,/* _impl_._image_data_argb_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.pix_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSetImageRequest)
}

inline void DCMPixSetImageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_float_) { arena }

    , decltype(_impl_.image_data_argb_) { arena }
    ,/* _impl_._image_data_argb_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.pix_){nullptr}
  };
}

DCMPixSetImageRequest::~DCMPixSetImageRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSetImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixSetImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_data_float_.~RepeatedField();
  _impl_.image_data_argb_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.pix_;
}

void DCMPixSetImageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixSetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSetImageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_image_data_float()->Clear();
  _internal_mutable_image_data_argb()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pix_ != nullptr);
    _impl_.pix_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSetImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float image_data_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_image_data_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 21) {
          _internal_add_image_data_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 image_data_argb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_image_data_argb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixSetImageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSetImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.DCMPix pix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  // repeated float image_data_float = 2;
  if (this->_internal_image_data_float_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_image_data_float(), target);
  }

  // repeated int32 image_data_argb = 3;
  {
    int byte_size = _impl_._image_data_argb_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_image_data_argb(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSetImageRequest)
  return target;
}

::size_t DCMPixSetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSetImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float image_data_float = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_image_data_float_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 image_data_argb = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_image_data_argb())
    ;
    _impl_._image_data_argb_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .osirixgrpc.DCMPix pix = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixSetImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixSetImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixSetImageRequest::GetClassData() const { return &_class_data_; }


void DCMPixSetImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixSetImageRequest*>(&to_msg);
  auto& from = static_cast<const DCMPixSetImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSetImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_data_float_.MergeFrom(from._impl_.image_data_float_);
  _this->_impl_.image_data_argb_.MergeFrom(from._impl_.image_data_argb_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
        from._internal_pix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixSetImageRequest::CopyFrom(const DCMPixSetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSetImageRequest::IsInitialized() const {
  return true;
}

void DCMPixSetImageRequest::InternalSwap(DCMPixSetImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_data_float_.InternalSwap(&other->_impl_.image_data_float_);
  _impl_.image_data_argb_.InternalSwap(&other->_impl_.image_data_argb_);
  swap(_impl_.pix_, other->_impl_.pix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSetImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[18]);
}
// ===================================================================

class DCMPixGetMapFromROIRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DCMPixGetMapFromROIRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIRequest, _impl_._has_bits_);
  static const ::osirixgrpc::DCMPix& pix(const DCMPixGetMapFromROIRequest* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ROI& roi(const DCMPixGetMapFromROIRequest* msg);
  static void set_has_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::DCMPix&
DCMPixGetMapFromROIRequest::_Internal::pix(const DCMPixGetMapFromROIRequest* msg) {
  return *msg->_impl_.pix_;
}
const ::osirixgrpc::ROI&
DCMPixGetMapFromROIRequest::_Internal::roi(const DCMPixGetMapFromROIRequest* msg) {
  return *msg->_impl_.roi_;
}
void DCMPixGetMapFromROIRequest::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DCMPixGetMapFromROIRequest::clear_roi() {
  if (_impl_.roi_ != nullptr) _impl_.roi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DCMPixGetMapFromROIRequest::DCMPixGetMapFromROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixGetMapFromROIRequest)
}
DCMPixGetMapFromROIRequest::DCMPixGetMapFromROIRequest(const DCMPixGetMapFromROIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DCMPixGetMapFromROIRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.roi_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.roi_ = new ::osirixgrpc::ROI(*from._impl_.roi_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixGetMapFromROIRequest)
}

inline void DCMPixGetMapFromROIRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){nullptr}
    , decltype(_impl_.roi_){nullptr}
  };
}

DCMPixGetMapFromROIRequest::~DCMPixGetMapFromROIRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixGetMapFromROIRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DCMPixGetMapFromROIRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pix_;
  if (this != internal_default_instance()) delete _impl_.roi_;
}

void DCMPixGetMapFromROIRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DCMPixGetMapFromROIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pix_ != nullptr);
      _impl_.pix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.roi_ != nullptr);
      _impl_.roi_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixGetMapFromROIRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DCMPixGetMapFromROIRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.DCMPix pix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roi(this),
        _Internal::roi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixGetMapFromROIRequest)
  return target;
}

::size_t DCMPixGetMapFromROIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.DCMPix pix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pix_);
    }

    // .osirixgrpc.ROI roi = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roi_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DCMPixGetMapFromROIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DCMPixGetMapFromROIRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DCMPixGetMapFromROIRequest::GetClassData() const { return &_class_data_; }


void DCMPixGetMapFromROIRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DCMPixGetMapFromROIRequest*>(&to_msg);
  auto& from = static_cast<const DCMPixGetMapFromROIRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
          from._internal_pix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(
          from._internal_roi());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DCMPixGetMapFromROIRequest::CopyFrom(const DCMPixGetMapFromROIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixGetMapFromROIRequest::IsInitialized() const {
  return true;
}

void DCMPixGetMapFromROIRequest::InternalSwap(DCMPixGetMapFromROIRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIRequest, _impl_.roi_)
      + sizeof(DCMPixGetMapFromROIRequest::_impl_.roi_)
      - PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIRequest, _impl_.pix_)>(
          reinterpret_cast<char*>(&_impl_.pix_),
          reinterpret_cast<char*>(&other->_impl_.pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixGetMapFromROIRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dcmpix_2eproto_getter, &descriptor_table_dcmpix_2eproto_once,
      file_level_metadata_dcmpix_2eproto[19]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixIsRGBResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixIsRGBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixIsRGBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixComputeROIResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixComputeROIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixComputeROIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixROIValuesResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixROIValuesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixROIValuesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixDicomImageResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixDicomImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixDicomImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixDicomSeriesResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixDicomSeriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixDicomSeriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixDicomStudyResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixDicomStudyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixDicomStudyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixImageResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixGetMapFromROIResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixGetMapFromROIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixGetMapFromROIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixShapeResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixShapeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixShapeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSpacingResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSpacingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSpacingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixOriginResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixOriginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixOriginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixOrientationResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixOrientationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixOrientationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSliceLocationResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSliceLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSliceLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSourceFileResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSourceFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSourceFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixConvertToRGBRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixConvertToRGBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixConvertToRGBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixConvertToBWRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixConvertToBWRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixConvertToBWRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixComputeROIRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixComputeROIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixComputeROIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixROIValuesRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixROIValuesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixROIValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSetImageRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSetImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSetImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixGetMapFromROIRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixGetMapFromROIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixGetMapFromROIRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
