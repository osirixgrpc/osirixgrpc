// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: osirix.proto

#include "osirix.pb.h"
#include "osirix.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace osirixgrpc {

static const char* OsiriXService_method_names[] = {
  "/osirixgrpc.OsiriXService/OsirixCurrentBrowser",
  "/osirixgrpc.OsiriXService/OsirixFrontmostViewer",
  "/osirixgrpc.OsiriXService/OsirixDisplayed2DViewers",
  "/osirixgrpc.OsiriXService/OsirixFrontmostVRController",
  "/osirixgrpc.OsiriXService/OsirixDisplayedVRControllers",
  "/osirixgrpc.OsiriXService/ROIFlipHorizontally",
  "/osirixgrpc.OsiriXService/ROIFlipVertically",
  "/osirixgrpc.OsiriXService/ROIArea",
  "/osirixgrpc.OsiriXService/ROICentroid",
  "/osirixgrpc.OsiriXService/ROIRotate",
  "/osirixgrpc.OsiriXService/ROIMove",
  "/osirixgrpc.OsiriXService/ROIPix",
  "/osirixgrpc.OsiriXService/ROIName",
  "/osirixgrpc.OsiriXService/ROIIType",
  "/osirixgrpc.OsiriXService/ROISetName",
  "/osirixgrpc.OsiriXService/ROIColor",
  "/osirixgrpc.OsiriXService/ROISetColor",
  "/osirixgrpc.OsiriXService/ROIOpacity",
  "/osirixgrpc.OsiriXService/ROISetOpacity",
  "/osirixgrpc.OsiriXService/ROIThickness",
  "/osirixgrpc.OsiriXService/ROISetThickness",
  "/osirixgrpc.OsiriXService/ROIPoints",
  "/osirixgrpc.OsiriXService/ROISetPoints",
  "/osirixgrpc.OsiriXService/ROIVolumeTexture",
  "/osirixgrpc.OsiriXService/ROIVolumeSetTexture",
  "/osirixgrpc.OsiriXService/ROIVolumeVolume",
  "/osirixgrpc.OsiriXService/ROIVolumeColor",
  "/osirixgrpc.OsiriXService/ROIVolumeSetColor",
  "/osirixgrpc.OsiriXService/ROIVolumeOpacity",
  "/osirixgrpc.OsiriXService/ROIVolumeSetOpacity",
  "/osirixgrpc.OsiriXService/ROIVolumeFactor",
  "/osirixgrpc.OsiriXService/ROIVolumeSetFactor",
  "/osirixgrpc.OsiriXService/ROIVolumeName",
  "/osirixgrpc.OsiriXService/ROIVolumeVisible",
  "/osirixgrpc.OsiriXService/DCMPixConvertToRGB",
  "/osirixgrpc.OsiriXService/DCMPixConvertToBW",
  "/osirixgrpc.OsiriXService/DCMPixIsRGB",
  "/osirixgrpc.OsiriXService/DCMPixComputeROI",
  "/osirixgrpc.OsiriXService/DCMPixROIValues",
  "/osirixgrpc.OsiriXService/DCMPixShape",
  "/osirixgrpc.OsiriXService/DCMPixSpacing",
  "/osirixgrpc.OsiriXService/DCMPixOrigin",
  "/osirixgrpc.OsiriXService/DCMPixOrientation",
  "/osirixgrpc.OsiriXService/DCMPixSliceLocation",
  "/osirixgrpc.OsiriXService/DCMPixSourceFile",
  "/osirixgrpc.OsiriXService/DCMPixImage",
  "/osirixgrpc.OsiriXService/DCMPixSetImage",
  "/osirixgrpc.OsiriXService/DCMPixGetMapFromROI",
  "/osirixgrpc.OsiriXService/DCMPixDicomImage",
  "/osirixgrpc.OsiriXService/DCMPixDicomSeries",
  "/osirixgrpc.OsiriXService/DCMPixDicomStudy",
  "/osirixgrpc.OsiriXService/VRControllerViewer2D",
  "/osirixgrpc.OsiriXService/VRControllerBlendingController",
  "/osirixgrpc.OsiriXService/VRControllerStyle",
  "/osirixgrpc.OsiriXService/VRControllerTitle",
  "/osirixgrpc.OsiriXService/VRControllerROIVolumes",
  "/osirixgrpc.OsiriXService/VRControllerRenderingMode",
  "/osirixgrpc.OsiriXService/VRControllerSetRenderingMode",
  "/osirixgrpc.OsiriXService/VRControllerWLWW",
  "/osirixgrpc.OsiriXService/VRControllerSetWLWW",
  "/osirixgrpc.OsiriXService/VRControllerHideROIVolume",
  "/osirixgrpc.OsiriXService/VRControllerDisplayROIVolume",
  "/osirixgrpc.OsiriXService/VRControllerNeedsDisplayUpdate",
  "/osirixgrpc.OsiriXService/ViewerControllerCloseViewer",
  "/osirixgrpc.OsiriXService/ViewerControllerPixList",
  "/osirixgrpc.OsiriXService/ViewerControllerNeedsDisplayUpdate",
  "/osirixgrpc.OsiriXService/ViewerControllerROIList",
  "/osirixgrpc.OsiriXService/ViewerControllerNewROI",
  "/osirixgrpc.OsiriXService/ViewerControllerCurDCM",
  "/osirixgrpc.OsiriXService/ViewerControllerROIsWithName",
  "/osirixgrpc.OsiriXService/ViewerControllerSelectedROIs",
  "/osirixgrpc.OsiriXService/ViewerControllerIsDataVolumic",
  "/osirixgrpc.OsiriXService/ViewerControllerCopyViewerWindow",
  "/osirixgrpc.OsiriXService/ViewerControllerResampleViewerController",
  "/osirixgrpc.OsiriXService/ViewerControllerBlendingController",
  "/osirixgrpc.OsiriXService/ViewerControllerVRControllers",
  "/osirixgrpc.OsiriXService/ViewerControllerTitle",
  "/osirixgrpc.OsiriXService/ViewerControllerModality",
  "/osirixgrpc.OsiriXService/ViewerControllerMovieIdx",
  "/osirixgrpc.OsiriXService/ViewerControllerSetMovieIdx",
  "/osirixgrpc.OsiriXService/ViewerControllerMaxMovieIdx",
  "/osirixgrpc.OsiriXService/ViewerControllerIdx",
  "/osirixgrpc.OsiriXService/ViewerControllerSetIdx",
  "/osirixgrpc.OsiriXService/ViewerControllerWLWW",
  "/osirixgrpc.OsiriXService/ViewerControllerSetWLWW",
  "/osirixgrpc.OsiriXService/ViewerControllerOpenVRViewerForMode",
  "/osirixgrpc.OsiriXService/BrowserControllerDatabaseSelection",
  "/osirixgrpc.OsiriXService/BrowserControllerCopyFilesIfNeeded",
  "/osirixgrpc.OsiriXService/DicomImageWidth",
  "/osirixgrpc.OsiriXService/DicomImageHeight",
  "/osirixgrpc.OsiriXService/DicomImageSOPInstanceUID",
  "/osirixgrpc.OsiriXService/DicomImageCompletePath",
  "/osirixgrpc.OsiriXService/DicomImageDate",
  "/osirixgrpc.OsiriXService/DicomImageNumberOfFrames",
  "/osirixgrpc.OsiriXService/DicomImageModality",
  "/osirixgrpc.OsiriXService/DicomImageSeries",
  "/osirixgrpc.OsiriXService/DicomImageSliceLocation",
  "/osirixgrpc.OsiriXService/DicomImageInstanceNumber",
  "/osirixgrpc.OsiriXService/DicomSeriesPaths",
  "/osirixgrpc.OsiriXService/DicomSeriesPreviousSeries",
  "/osirixgrpc.OsiriXService/DicomSeriesNextSeries",
  "/osirixgrpc.OsiriXService/DicomSeriesSortedImages",
  "/osirixgrpc.OsiriXService/DicomSeriesStudy",
  "/osirixgrpc.OsiriXService/DicomSeriesImages",
  "/osirixgrpc.OsiriXService/DicomSeriesSeriesInstanceUID",
  "/osirixgrpc.OsiriXService/DicomSeriesSeriesSOPClassUID",
  "/osirixgrpc.OsiriXService/DicomSeriesSeriesDescription",
  "/osirixgrpc.OsiriXService/DicomSeriesModality",
  "/osirixgrpc.OsiriXService/DicomSeriesName",
  "/osirixgrpc.OsiriXService/DicomSeriesDate",
  "/osirixgrpc.OsiriXService/DicomSeriesNumberOfImages",
  "/osirixgrpc.OsiriXService/DicomStudyPaths",
  "/osirixgrpc.OsiriXService/DicomStudyImages",
  "/osirixgrpc.OsiriXService/DicomStudyModalities",
  "/osirixgrpc.OsiriXService/DicomStudyNoFiles",
  "/osirixgrpc.OsiriXService/DicomStudyRawNoFiles",
  "/osirixgrpc.OsiriXService/DicomStudyNoFilesExcludingMultiFrames",
  "/osirixgrpc.OsiriXService/DicomStudyNumberOfImages",
  "/osirixgrpc.OsiriXService/DicomStudySeries",
  "/osirixgrpc.OsiriXService/DicomStudyName",
  "/osirixgrpc.OsiriXService/DicomStudyDate",
  "/osirixgrpc.OsiriXService/DicomStudyDateAdded",
  "/osirixgrpc.OsiriXService/DicomStudyDateOfBirth",
  "/osirixgrpc.OsiriXService/DicomStudyInstitutionName",
  "/osirixgrpc.OsiriXService/DicomStudyModality",
  "/osirixgrpc.OsiriXService/DicomStudyPatientID",
  "/osirixgrpc.OsiriXService/DicomStudyPatientUID",
  "/osirixgrpc.OsiriXService/DicomStudyPatientSex",
  "/osirixgrpc.OsiriXService/DicomStudyPerformingPhysician",
  "/osirixgrpc.OsiriXService/DicomStudyReferringPhysician",
  "/osirixgrpc.OsiriXService/DicomStudyStudyInstanceUID",
  "/osirixgrpc.OsiriXService/DicomStudyStudyName",
};

std::unique_ptr< OsiriXService::Stub> OsiriXService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OsiriXService::Stub> stub(new OsiriXService::Stub(channel, options));
  return stub;
}

OsiriXService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_OsirixCurrentBrowser_(OsiriXService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OsirixFrontmostViewer_(OsiriXService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OsirixDisplayed2DViewers_(OsiriXService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OsirixFrontmostVRController_(OsiriXService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OsirixDisplayedVRControllers_(OsiriXService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIFlipHorizontally_(OsiriXService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIFlipVertically_(OsiriXService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIArea_(OsiriXService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROICentroid_(OsiriXService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIRotate_(OsiriXService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIMove_(OsiriXService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIPix_(OsiriXService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIName_(OsiriXService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIIType_(OsiriXService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROISetName_(OsiriXService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIColor_(OsiriXService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROISetColor_(OsiriXService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIOpacity_(OsiriXService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROISetOpacity_(OsiriXService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIThickness_(OsiriXService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROISetThickness_(OsiriXService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIPoints_(OsiriXService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROISetPoints_(OsiriXService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeTexture_(OsiriXService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeSetTexture_(OsiriXService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeVolume_(OsiriXService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeColor_(OsiriXService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeSetColor_(OsiriXService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeOpacity_(OsiriXService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeSetOpacity_(OsiriXService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeFactor_(OsiriXService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeSetFactor_(OsiriXService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeName_(OsiriXService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ROIVolumeVisible_(OsiriXService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixConvertToRGB_(OsiriXService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixConvertToBW_(OsiriXService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixIsRGB_(OsiriXService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixComputeROI_(OsiriXService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixROIValues_(OsiriXService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixShape_(OsiriXService_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixSpacing_(OsiriXService_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixOrigin_(OsiriXService_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixOrientation_(OsiriXService_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixSliceLocation_(OsiriXService_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixSourceFile_(OsiriXService_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixImage_(OsiriXService_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixSetImage_(OsiriXService_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixGetMapFromROI_(OsiriXService_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixDicomImage_(OsiriXService_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixDicomSeries_(OsiriXService_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DCMPixDicomStudy_(OsiriXService_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerViewer2D_(OsiriXService_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerBlendingController_(OsiriXService_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerStyle_(OsiriXService_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerTitle_(OsiriXService_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerROIVolumes_(OsiriXService_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerRenderingMode_(OsiriXService_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerSetRenderingMode_(OsiriXService_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerWLWW_(OsiriXService_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerSetWLWW_(OsiriXService_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerHideROIVolume_(OsiriXService_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerDisplayROIVolume_(OsiriXService_method_names[61], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VRControllerNeedsDisplayUpdate_(OsiriXService_method_names[62], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerCloseViewer_(OsiriXService_method_names[63], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerPixList_(OsiriXService_method_names[64], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerNeedsDisplayUpdate_(OsiriXService_method_names[65], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerROIList_(OsiriXService_method_names[66], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerNewROI_(OsiriXService_method_names[67], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerCurDCM_(OsiriXService_method_names[68], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerROIsWithName_(OsiriXService_method_names[69], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerSelectedROIs_(OsiriXService_method_names[70], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerIsDataVolumic_(OsiriXService_method_names[71], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerCopyViewerWindow_(OsiriXService_method_names[72], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerResampleViewerController_(OsiriXService_method_names[73], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerBlendingController_(OsiriXService_method_names[74], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerVRControllers_(OsiriXService_method_names[75], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerTitle_(OsiriXService_method_names[76], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerModality_(OsiriXService_method_names[77], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerMovieIdx_(OsiriXService_method_names[78], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerSetMovieIdx_(OsiriXService_method_names[79], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerMaxMovieIdx_(OsiriXService_method_names[80], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerIdx_(OsiriXService_method_names[81], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerSetIdx_(OsiriXService_method_names[82], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerWLWW_(OsiriXService_method_names[83], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerSetWLWW_(OsiriXService_method_names[84], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewerControllerOpenVRViewerForMode_(OsiriXService_method_names[85], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BrowserControllerDatabaseSelection_(OsiriXService_method_names[86], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BrowserControllerCopyFilesIfNeeded_(OsiriXService_method_names[87], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageWidth_(OsiriXService_method_names[88], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageHeight_(OsiriXService_method_names[89], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageSOPInstanceUID_(OsiriXService_method_names[90], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageCompletePath_(OsiriXService_method_names[91], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageDate_(OsiriXService_method_names[92], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageNumberOfFrames_(OsiriXService_method_names[93], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageModality_(OsiriXService_method_names[94], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageSeries_(OsiriXService_method_names[95], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageSliceLocation_(OsiriXService_method_names[96], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomImageInstanceNumber_(OsiriXService_method_names[97], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesPaths_(OsiriXService_method_names[98], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesPreviousSeries_(OsiriXService_method_names[99], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesNextSeries_(OsiriXService_method_names[100], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesSortedImages_(OsiriXService_method_names[101], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesStudy_(OsiriXService_method_names[102], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesImages_(OsiriXService_method_names[103], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesSeriesInstanceUID_(OsiriXService_method_names[104], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesSeriesSOPClassUID_(OsiriXService_method_names[105], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesSeriesDescription_(OsiriXService_method_names[106], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesModality_(OsiriXService_method_names[107], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesName_(OsiriXService_method_names[108], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesDate_(OsiriXService_method_names[109], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomSeriesNumberOfImages_(OsiriXService_method_names[110], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyPaths_(OsiriXService_method_names[111], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyImages_(OsiriXService_method_names[112], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyModalities_(OsiriXService_method_names[113], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyNoFiles_(OsiriXService_method_names[114], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyRawNoFiles_(OsiriXService_method_names[115], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyNoFilesExcludingMultiFrames_(OsiriXService_method_names[116], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyNumberOfImages_(OsiriXService_method_names[117], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudySeries_(OsiriXService_method_names[118], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyName_(OsiriXService_method_names[119], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyDate_(OsiriXService_method_names[120], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyDateAdded_(OsiriXService_method_names[121], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyDateOfBirth_(OsiriXService_method_names[122], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyInstitutionName_(OsiriXService_method_names[123], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyModality_(OsiriXService_method_names[124], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyPatientID_(OsiriXService_method_names[125], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyPatientUID_(OsiriXService_method_names[126], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyPatientSex_(OsiriXService_method_names[127], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyPerformingPhysician_(OsiriXService_method_names[128], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyReferringPhysician_(OsiriXService_method_names[129], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyStudyInstanceUID_(OsiriXService_method_names[130], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DicomStudyStudyName_(OsiriXService_method_names[131], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OsiriXService::Stub::OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixCurrentBrowserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OsirixCurrentBrowser_, context, request, response);
}

void OsiriXService::Stub::async::OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixCurrentBrowser_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::OsirixCurrentBrowser(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixCurrentBrowser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>* OsiriXService::Stub::PrepareAsyncOsirixCurrentBrowserRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::OsirixCurrentBrowserResponse, ::osirixgrpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OsirixCurrentBrowser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixCurrentBrowserResponse>* OsiriXService::Stub::AsyncOsirixCurrentBrowserRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOsirixCurrentBrowserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixFrontmostViewerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OsirixFrontmostViewer_, context, request, response);
}

void OsiriXService::Stub::async::OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixFrontmostViewer_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::OsirixFrontmostViewer(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixFrontmostViewer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>* OsiriXService::Stub::PrepareAsyncOsirixFrontmostViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::OsirixFrontmostViewerResponse, ::osirixgrpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OsirixFrontmostViewer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostViewerResponse>* OsiriXService::Stub::AsyncOsirixFrontmostViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOsirixFrontmostViewerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OsirixDisplayed2DViewers_, context, request, response);
}

void OsiriXService::Stub::async::OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixDisplayed2DViewers_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::OsirixDisplayed2DViewers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixDisplayed2DViewers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* OsiriXService::Stub::PrepareAsyncOsirixDisplayed2DViewersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::OsirixDisplayed2DViewersResponse, ::osirixgrpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OsirixDisplayed2DViewers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayed2DViewersResponse>* OsiriXService::Stub::AsyncOsirixDisplayed2DViewersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOsirixDisplayed2DViewersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OsirixFrontmostVRController_, context, request, response);
}

void OsiriXService::Stub::async::OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixFrontmostVRController_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::OsirixFrontmostVRController(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixFrontmostVRController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* OsiriXService::Stub::PrepareAsyncOsirixFrontmostVRControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::OsirixFrontmostVRControllerResponse, ::osirixgrpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OsirixFrontmostVRController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixFrontmostVRControllerResponse>* OsiriXService::Stub::AsyncOsirixFrontmostVRControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOsirixFrontmostVRControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OsirixDisplayedVRControllers_, context, request, response);
}

void OsiriXService::Stub::async::OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixDisplayedVRControllers_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::OsirixDisplayedVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OsirixDisplayedVRControllers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* OsiriXService::Stub::PrepareAsyncOsirixDisplayedVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::OsirixDisplayedVRControllersResponse, ::osirixgrpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OsirixDisplayedVRControllers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::OsirixDisplayedVRControllersResponse>* OsiriXService::Stub::AsyncOsirixDisplayedVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOsirixDisplayedVRControllersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIFlipHorizontally_, context, request, response);
}

void OsiriXService::Stub::async::ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIFlipHorizontally_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIFlipHorizontally(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIFlipHorizontally_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIFlipHorizontallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIFlipHorizontally_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIFlipHorizontallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIFlipHorizontallyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIFlipVertically_, context, request, response);
}

void OsiriXService::Stub::async::ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIFlipVertically_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIFlipVertically(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIFlipVertically_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIFlipVerticallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIFlipVertically_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIFlipVerticallyRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIFlipVerticallyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIAreaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIArea_, context, request, response);
}

void OsiriXService::Stub::async::ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIArea_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIArea(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>* OsiriXService::Stub::PrepareAsyncROIAreaRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIAreaResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIAreaResponse>* OsiriXService::Stub::AsyncROIAreaRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROICentroidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROICentroid_, context, request, response);
}

void OsiriXService::Stub::async::ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROICentroid_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROICentroid(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROICentroid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>* OsiriXService::Stub::PrepareAsyncROICentroidRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROICentroidResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROICentroid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROICentroidResponse>* OsiriXService::Stub::AsyncROICentroidRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROICentroidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIRotate_, context, request, response);
}

void OsiriXService::Stub::async::ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIRotate_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIRotate(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIRotate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIRotateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROIRotateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIRotate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIRotateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIRotateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIRotateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIMove_, context, request, response);
}

void OsiriXService::Stub::async::ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIMove_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIMove(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIMoveRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROIMoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIMoveRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIMoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIPixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIPix_, context, request, response);
}

void OsiriXService::Stub::async::ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIPix_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIPix(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIPix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>* OsiriXService::Stub::PrepareAsyncROIPixRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIPixResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIPix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPixResponse>* OsiriXService::Stub::AsyncROIPixRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIPixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROINameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIName_, context, request, response);
}

void OsiriXService::Stub::async::ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIName(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>* OsiriXService::Stub::PrepareAsyncROINameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROINameResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROINameResponse>* OsiriXService::Stub::AsyncROINameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROINameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIITypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIIType_, context, request, response);
}

void OsiriXService::Stub::async::ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIIType_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIIType(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIIType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>* OsiriXService::Stub::PrepareAsyncROIITypeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIITypeResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIIType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIITypeResponse>* OsiriXService::Stub::AsyncROIITypeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIITypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROISetName_, context, request, response);
}

void OsiriXService::Stub::async::ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROISetName(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROISetNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROISetNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROISetName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROISetNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROISetNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIColor_, context, request, response);
}

void OsiriXService::Stub::async::ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIColor_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIColor(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>* OsiriXService::Stub::PrepareAsyncROIColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIColorResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIColorResponse>* OsiriXService::Stub::AsyncROIColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROISetColor_, context, request, response);
}

void OsiriXService::Stub::async::ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetColor_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROISetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROISetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROISetColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROISetColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROISetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROISetColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIOpacityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIOpacity_, context, request, response);
}

void OsiriXService::Stub::async::ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIOpacity_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIOpacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>* OsiriXService::Stub::PrepareAsyncROIOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIOpacityResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIOpacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIOpacityResponse>* OsiriXService::Stub::AsyncROIOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIOpacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROISetOpacity_, context, request, response);
}

void OsiriXService::Stub::async::ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetOpacity_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROISetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetOpacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROISetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROISetOpacityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROISetOpacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROISetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROISetOpacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIThicknessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIThickness_, context, request, response);
}

void OsiriXService::Stub::async::ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIThickness_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIThickness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>* OsiriXService::Stub::PrepareAsyncROIThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIThicknessResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIThickness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIThicknessResponse>* OsiriXService::Stub::AsyncROIThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIThicknessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROISetThickness_, context, request, response);
}

void OsiriXService::Stub::async::ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetThickness_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROISetThickness(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetThickness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROISetThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROISetThicknessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROISetThickness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROISetThicknessRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetThicknessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROISetThicknessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::osirixgrpc::ROIPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIPoints_, context, request, response);
}

void OsiriXService::Stub::async::ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIPoints_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>* OsiriXService::Stub::PrepareAsyncROIPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIPointsResponse, ::osirixgrpc::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIPointsResponse>* OsiriXService::Stub::AsyncROIPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROISetPoints_, context, request, response);
}

void OsiriXService::Stub::async::ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetPoints_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROISetPoints(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROISetPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROISetPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROISetPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROISetPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROISetPointsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROISetPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROISetPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeTextureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeTexture_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeTexture_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeTexture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeTextureResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeTexture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeTextureResponse>* OsiriXService::Stub::AsyncROIVolumeTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeTextureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeSetTexture_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetTexture_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeSetTexture(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetTexture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIVolumeSetTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROIVolumeSetTextureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeSetTexture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIVolumeSetTextureRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeSetTextureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeVolume_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeVolume_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeVolume(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeVolumeResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVolumeResponse>* OsiriXService::Stub::AsyncROIVolumeVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeColor_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeColor_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeColorResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeColorResponse>* OsiriXService::Stub::AsyncROIVolumeColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeSetColor_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetColor_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeSetColor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIVolumeSetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROIVolumeSetColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeSetColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIVolumeSetColorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeSetColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeOpacityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeOpacity_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeOpacity_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeOpacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeOpacityResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeOpacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeOpacityResponse>* OsiriXService::Stub::AsyncROIVolumeOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeOpacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeSetOpacity_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetOpacity_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeSetOpacity(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetOpacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIVolumeSetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROIVolumeSetOpacityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeSetOpacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIVolumeSetOpacityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeSetOpacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeFactorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeFactor_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeFactor_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeFactor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeFactorResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeFactor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeFactorResponse>* OsiriXService::Stub::AsyncROIVolumeFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeFactorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeSetFactor_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetFactor_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeSetFactor(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeSetFactor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncROIVolumeSetFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ROIVolumeSetFactorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeSetFactor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncROIVolumeSetFactorRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeSetFactorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeName_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeName(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeNameResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeNameResponse>* OsiriXService::Stub::AsyncROIVolumeNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::osirixgrpc::ROIVolumeVisibleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ROIVolumeVisible_, context, request, response);
}

void OsiriXService::Stub::async::ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeVisible_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ROIVolumeVisible(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ROIVolumeVisible_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>* OsiriXService::Stub::PrepareAsyncROIVolumeVisibleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ROIVolumeVisibleResponse, ::osirixgrpc::ROIVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ROIVolumeVisible_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ROIVolumeVisibleResponse>* OsiriXService::Stub::AsyncROIVolumeVisibleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ROIVolume& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncROIVolumeVisibleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixConvertToRGB_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixConvertToRGB_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixConvertToRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixConvertToRGB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncDCMPixConvertToRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::DCMPixConvertToRGBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixConvertToRGB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncDCMPixConvertToRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixConvertToRGBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixConvertToBW_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixConvertToBW_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixConvertToBW(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixConvertToBW_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncDCMPixConvertToBWRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::DCMPixConvertToBWRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixConvertToBW_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncDCMPixConvertToBWRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixConvertToBWRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixIsRGBResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixIsRGB_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixIsRGB_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixIsRGB(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixIsRGB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>* OsiriXService::Stub::PrepareAsyncDCMPixIsRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixIsRGBResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixIsRGB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixIsRGBResponse>* OsiriXService::Stub::AsyncDCMPixIsRGBRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixIsRGBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::osirixgrpc::DCMPixComputeROIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixComputeROI_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixComputeROI_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixComputeROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixComputeROI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>* OsiriXService::Stub::PrepareAsyncDCMPixComputeROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixComputeROIResponse, ::osirixgrpc::DCMPixComputeROIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixComputeROI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixComputeROIResponse>* OsiriXService::Stub::AsyncDCMPixComputeROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixComputeROIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixComputeROIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::osirixgrpc::DCMPixROIValuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixROIValues_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixROIValues_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixROIValues(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixROIValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>* OsiriXService::Stub::PrepareAsyncDCMPixROIValuesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixROIValuesResponse, ::osirixgrpc::DCMPixROIValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixROIValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixROIValuesResponse>* OsiriXService::Stub::AsyncDCMPixROIValuesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixROIValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixROIValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixShapeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixShape_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixShape_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixShape(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixShape_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>* OsiriXService::Stub::PrepareAsyncDCMPixShapeRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixShapeResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixShape_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixShapeResponse>* OsiriXService::Stub::AsyncDCMPixShapeRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixShapeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSpacingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixSpacing_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSpacing_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixSpacing(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSpacing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>* OsiriXService::Stub::PrepareAsyncDCMPixSpacingRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixSpacingResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixSpacing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSpacingResponse>* OsiriXService::Stub::AsyncDCMPixSpacingRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixSpacingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixOriginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixOrigin_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixOrigin_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixOrigin(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixOrigin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>* OsiriXService::Stub::PrepareAsyncDCMPixOriginRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixOriginResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixOrigin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOriginResponse>* OsiriXService::Stub::AsyncDCMPixOriginRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixOriginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixOrientationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixOrientation_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixOrientation_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixOrientation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixOrientation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>* OsiriXService::Stub::PrepareAsyncDCMPixOrientationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixOrientationResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixOrientation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixOrientationResponse>* OsiriXService::Stub::AsyncDCMPixOrientationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixOrientationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSliceLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixSliceLocation_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSliceLocation_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSliceLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>* OsiriXService::Stub::PrepareAsyncDCMPixSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixSliceLocationResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixSliceLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSliceLocationResponse>* OsiriXService::Stub::AsyncDCMPixSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixSliceLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixSourceFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixSourceFile_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSourceFile_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixSourceFile(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSourceFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>* OsiriXService::Stub::PrepareAsyncDCMPixSourceFileRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixSourceFileResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixSourceFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixSourceFileResponse>* OsiriXService::Stub::AsyncDCMPixSourceFileRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixSourceFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixImage_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixImage_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>* OsiriXService::Stub::PrepareAsyncDCMPixImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixImageResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixImageResponse>* OsiriXService::Stub::AsyncDCMPixImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixSetImage_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSetImage_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixSetImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixSetImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncDCMPixSetImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::DCMPixSetImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixSetImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncDCMPixSetImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixSetImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixSetImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixGetMapFromROI_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixGetMapFromROI_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixGetMapFromROI(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixGetMapFromROI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>* OsiriXService::Stub::PrepareAsyncDCMPixGetMapFromROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixGetMapFromROIResponse, ::osirixgrpc::DCMPixGetMapFromROIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixGetMapFromROI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixGetMapFromROIResponse>* OsiriXService::Stub::AsyncDCMPixGetMapFromROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixGetMapFromROIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixDicomImage_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixDicomImage_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixDicomImage(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixDicomImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>* OsiriXService::Stub::PrepareAsyncDCMPixDicomImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixDicomImageResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixDicomImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomImageResponse>* OsiriXService::Stub::AsyncDCMPixDicomImageRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixDicomImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomSeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixDicomSeries_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixDicomSeries_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixDicomSeries(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixDicomSeries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>* OsiriXService::Stub::PrepareAsyncDCMPixDicomSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixDicomSeriesResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixDicomSeries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomSeriesResponse>* OsiriXService::Stub::AsyncDCMPixDicomSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixDicomSeriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::osirixgrpc::DCMPixDicomStudyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DCMPixDicomStudy_, context, request, response);
}

void OsiriXService::Stub::async::DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixDicomStudy_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DCMPixDicomStudy(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DCMPixDicomStudy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>* OsiriXService::Stub::PrepareAsyncDCMPixDicomStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DCMPixDicomStudyResponse, ::osirixgrpc::DCMPix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DCMPixDicomStudy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DCMPixDicomStudyResponse>* OsiriXService::Stub::AsyncDCMPixDicomStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DCMPix& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDCMPixDicomStudyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerViewer2DResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerViewer2D_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerViewer2D_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerViewer2D(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerViewer2D_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>* OsiriXService::Stub::PrepareAsyncVRControllerViewer2DRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerViewer2DResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerViewer2D_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerViewer2DResponse>* OsiriXService::Stub::AsyncVRControllerViewer2DRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerViewer2DRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerBlendingControllerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerBlendingController_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerBlendingController_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerBlendingController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>* OsiriXService::Stub::PrepareAsyncVRControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerBlendingControllerResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerBlendingController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerBlendingControllerResponse>* OsiriXService::Stub::AsyncVRControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerBlendingControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerStyleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerStyle_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerStyle_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerStyle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerStyle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>* OsiriXService::Stub::PrepareAsyncVRControllerStyleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerStyleResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerStyle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerStyleResponse>* OsiriXService::Stub::AsyncVRControllerStyleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerStyleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerTitleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerTitle_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerTitle_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerTitle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>* OsiriXService::Stub::PrepareAsyncVRControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerTitleResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerTitle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerTitleResponse>* OsiriXService::Stub::AsyncVRControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerTitleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerROIVolumesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerROIVolumes_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerROIVolumes_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerROIVolumes(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerROIVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>* OsiriXService::Stub::PrepareAsyncVRControllerROIVolumesRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerROIVolumesResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerROIVolumes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerROIVolumesResponse>* OsiriXService::Stub::AsyncVRControllerROIVolumesRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerROIVolumesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerRenderingModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerRenderingMode_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerRenderingMode_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerRenderingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>* OsiriXService::Stub::PrepareAsyncVRControllerRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerRenderingModeResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerRenderingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerRenderingModeResponse>* OsiriXService::Stub::AsyncVRControllerRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerRenderingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerSetRenderingMode_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerSetRenderingMode_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerSetRenderingMode(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerSetRenderingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncVRControllerSetRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::VRControllerSetRenderingModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerSetRenderingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncVRControllerSetRenderingModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerSetRenderingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::VRControllerWLWWResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerWLWW_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerWLWW_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerWLWW_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>* OsiriXService::Stub::PrepareAsyncVRControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::VRControllerWLWWResponse, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerWLWW_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::VRControllerWLWWResponse>* OsiriXService::Stub::AsyncVRControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerWLWWRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerSetWLWW_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerSetWLWW_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerSetWLWW_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncVRControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::VRControllerSetWLWWRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerSetWLWW_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncVRControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerSetWLWWRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerHideROIVolume_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerHideROIVolume_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerHideROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerHideROIVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncVRControllerHideROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::VRControllerHideROIVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerHideROIVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncVRControllerHideROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerHideROIVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerDisplayROIVolume_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerDisplayROIVolume_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerDisplayROIVolume(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerDisplayROIVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncVRControllerDisplayROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerDisplayROIVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncVRControllerDisplayROIVolumeRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerDisplayROIVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VRControllerNeedsDisplayUpdate_, context, request, response);
}

void OsiriXService::Stub::async::VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::VRController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerNeedsDisplayUpdate_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::VRControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VRControllerNeedsDisplayUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncVRControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::VRController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VRControllerNeedsDisplayUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncVRControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::VRController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVRControllerNeedsDisplayUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerCloseViewer_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerCloseViewer_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerCloseViewer(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerCloseViewer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerCloseViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerCloseViewer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerCloseViewerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerCloseViewerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::osirixgrpc::ViewerControllerPixListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerPixList_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerPixList_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerPixList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerPixList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerPixListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerPixListResponse, ::osirixgrpc::ViewerControllerPixListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerPixList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerPixListResponse>* OsiriXService::Stub::AsyncViewerControllerPixListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerPixListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerPixListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerNeedsDisplayUpdate_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerNeedsDisplayUpdate_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerNeedsDisplayUpdate(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerNeedsDisplayUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerNeedsDisplayUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerNeedsDisplayUpdateRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerNeedsDisplayUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::osirixgrpc::ViewerControllerROIListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerROIList_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerROIList_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerROIList(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerROIList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerROIListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerROIListResponse, ::osirixgrpc::ViewerControllerROIListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerROIList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIListResponse>* OsiriXService::Stub::AsyncViewerControllerROIListRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerROIListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::osirixgrpc::ViewerControllerNewROIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerNewROI_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerNewROI_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerNewROI(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerNewROI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerNewROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerNewROIResponse, ::osirixgrpc::ViewerControllerNewROIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerNewROI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerNewROIResponse>* OsiriXService::Stub::AsyncViewerControllerNewROIRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerNewROIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerCurDCMResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerCurDCM_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerCurDCM_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerCurDCM(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerCurDCM_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerCurDCMRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerCurDCMResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerCurDCM_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerCurDCMResponse>* OsiriXService::Stub::AsyncViewerControllerCurDCMRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerCurDCMRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerROIsWithName_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerROIsWithName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerROIsWithName(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerROIsWithName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerROIsWithNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerROIsWithNameResponse, ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerROIsWithName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerROIsWithNameResponse>* OsiriXService::Stub::AsyncViewerControllerROIsWithNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerROIsWithNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerSelectedROIs_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSelectedROIs_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerSelectedROIs(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSelectedROIs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerSelectedROIsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerSelectedROIsResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerSelectedROIs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerSelectedROIsResponse>* OsiriXService::Stub::AsyncViewerControllerSelectedROIsRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerSelectedROIsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerIsDataVolumic_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerIsDataVolumic_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerIsDataVolumic(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerIsDataVolumic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerIsDataVolumicRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerIsDataVolumicResponse, ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerIsDataVolumic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIsDataVolumicResponse>* OsiriXService::Stub::AsyncViewerControllerIsDataVolumicRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerIsDataVolumicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerCopyViewerWindow_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerCopyViewerWindow_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerCopyViewerWindow(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerCopyViewerWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerCopyViewerWindowRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerCopyViewerWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerCopyViewerWindowRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerCopyViewerWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerResampleViewerController_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerResampleViewerController_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerResampleViewerController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerResampleViewerController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerResampleViewerControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerResampleViewerController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerResampleViewerControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerResampleViewerControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerBlendingController_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerBlendingController_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerBlendingController(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerBlendingController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerBlendingControllerResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerBlendingController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerBlendingControllerResponse>* OsiriXService::Stub::AsyncViewerControllerBlendingControllerRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerBlendingControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerVRControllersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerVRControllers_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerVRControllers_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerVRControllers(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerVRControllers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerVRControllersResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerVRControllers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerVRControllersResponse>* OsiriXService::Stub::AsyncViewerControllerVRControllersRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerVRControllersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerTitleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerTitle_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerTitle_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerTitle(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerTitle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerTitleResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerTitle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerTitleResponse>* OsiriXService::Stub::AsyncViewerControllerTitleRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerTitleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerModalityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerModality_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerModality_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerModality(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerModality_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerModalityResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerModality_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerModalityResponse>* OsiriXService::Stub::AsyncViewerControllerModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerModalityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerMovieIdx_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerMovieIdx_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerMovieIdx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerMovieIdxResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerMovieIdx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMovieIdxResponse>* OsiriXService::Stub::AsyncViewerControllerMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerMovieIdxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerSetMovieIdx_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSetMovieIdx_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerSetMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSetMovieIdx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerSetMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerSetMovieIdx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerSetMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerSetMovieIdxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerMaxMovieIdx_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerMaxMovieIdx_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerMaxMovieIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerMaxMovieIdx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerMaxMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerMaxMovieIdx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse>* OsiriXService::Stub::AsyncViewerControllerMaxMovieIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerMaxMovieIdxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerIdxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerIdx_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerIdx_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerIdx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerIdxResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerIdx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerIdxResponse>* OsiriXService::Stub::AsyncViewerControllerIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerIdxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerSetIdx_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSetIdx_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerSetIdx(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSetIdx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerSetIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerControllerSetIdxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerSetIdx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerSetIdxRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerSetIdxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::osirixgrpc::ViewerControllerWLWWResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerWLWW_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerWLWW_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerWLWW_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerWLWWResponse, ::osirixgrpc::ViewerController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerWLWW_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerWLWWResponse>* OsiriXService::Stub::AsyncViewerControllerWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerWLWWRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerSetWLWW_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSetWLWW_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerSetWLWW(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerSetWLWW_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncViewerControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::ViewerControllerSetWLWWRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerSetWLWW_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncViewerControllerSetWLWWRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerSetWLWWRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewerControllerOpenVRViewerForMode_, context, request, response);
}

void OsiriXService::Stub::async::ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerOpenVRViewerForMode_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::ViewerControllerOpenVRViewerForMode(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewerControllerOpenVRViewerForMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* OsiriXService::Stub::PrepareAsyncViewerControllerOpenVRViewerForModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewerControllerOpenVRViewerForMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse>* OsiriXService::Stub::AsyncViewerControllerOpenVRViewerForModeRaw(::grpc::ClientContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewerControllerOpenVRViewerForModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BrowserControllerDatabaseSelection_, context, request, response);
}

void OsiriXService::Stub::async::BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BrowserControllerDatabaseSelection_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::BrowserControllerDatabaseSelection(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BrowserControllerDatabaseSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* OsiriXService::Stub::PrepareAsyncBrowserControllerDatabaseSelectionRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse, ::osirixgrpc::BrowserController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BrowserControllerDatabaseSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse>* OsiriXService::Stub::AsyncBrowserControllerDatabaseSelectionRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserController& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBrowserControllerDatabaseSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::osirixgrpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BrowserControllerCopyFilesIfNeeded_, context, request, response);
}

void OsiriXService::Stub::async::BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BrowserControllerCopyFilesIfNeeded_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::BrowserControllerCopyFilesIfNeeded(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BrowserControllerCopyFilesIfNeeded_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::PrepareAsyncBrowserControllerCopyFilesIfNeededRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::Response, ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BrowserControllerCopyFilesIfNeeded_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::Response>* OsiriXService::Stub::AsyncBrowserControllerCopyFilesIfNeededRaw(::grpc::ClientContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBrowserControllerCopyFilesIfNeededRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageWidthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageWidth_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageWidth_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageWidth(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageWidth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>* OsiriXService::Stub::PrepareAsyncDicomImageWidthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageWidthResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageWidth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageWidthResponse>* OsiriXService::Stub::AsyncDicomImageWidthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageWidthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageHeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageHeight_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageHeight_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageHeight(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>* OsiriXService::Stub::PrepareAsyncDicomImageHeightRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageHeightResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageHeightResponse>* OsiriXService::Stub::AsyncDicomImageHeightRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageSOPInstanceUID_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageSOPInstanceUID_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageSOPInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageSOPInstanceUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* OsiriXService::Stub::PrepareAsyncDicomImageSOPInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageSOPInstanceUIDResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageSOPInstanceUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSOPInstanceUIDResponse>* OsiriXService::Stub::AsyncDicomImageSOPInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageSOPInstanceUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageCompletePathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageCompletePath_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageCompletePath_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageCompletePath(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageCompletePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>* OsiriXService::Stub::PrepareAsyncDicomImageCompletePathRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageCompletePathResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageCompletePath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageCompletePathResponse>* OsiriXService::Stub::AsyncDicomImageCompletePathRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageCompletePathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageDateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageDate_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageDate_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>* OsiriXService::Stub::PrepareAsyncDicomImageDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageDateResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageDateResponse>* OsiriXService::Stub::AsyncDicomImageDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageNumberOfFrames_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageNumberOfFrames_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageNumberOfFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageNumberOfFrames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>* OsiriXService::Stub::PrepareAsyncDicomImageNumberOfFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageNumberOfFramesResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageNumberOfFrames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageNumberOfFramesResponse>* OsiriXService::Stub::AsyncDicomImageNumberOfFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageNumberOfFramesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageModalityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageModality_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageModality_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageModality_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>* OsiriXService::Stub::PrepareAsyncDicomImageModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageModalityResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageModality_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageModalityResponse>* OsiriXService::Stub::AsyncDicomImageModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageModalityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageSeries_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageSeries_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageSeries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>* OsiriXService::Stub::PrepareAsyncDicomImageSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageSeriesResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageSeries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSeriesResponse>* OsiriXService::Stub::AsyncDicomImageSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageSeriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageSliceLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageSliceLocation_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageSliceLocation_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageSliceLocation(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageSliceLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>* OsiriXService::Stub::PrepareAsyncDicomImageSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageSliceLocationResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageSliceLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageSliceLocationResponse>* OsiriXService::Stub::AsyncDicomImageSliceLocationRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageSliceLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::osirixgrpc::DicomImageInstanceNumberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomImageInstanceNumber_, context, request, response);
}

void OsiriXService::Stub::async::DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageInstanceNumber_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomImageInstanceNumber(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomImageInstanceNumber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>* OsiriXService::Stub::PrepareAsyncDicomImageInstanceNumberRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomImageInstanceNumberResponse, ::osirixgrpc::DicomImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomImageInstanceNumber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomImageInstanceNumberResponse>* OsiriXService::Stub::AsyncDicomImageInstanceNumberRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomImageInstanceNumberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesPathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesPaths_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesPaths_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesPathsResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesPaths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPathsResponse>* OsiriXService::Stub::AsyncDicomSeriesPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesPreviousSeries_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesPreviousSeries_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesPreviousSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesPreviousSeries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesPreviousSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesPreviousSeriesResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesPreviousSeries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesPreviousSeriesResponse>* OsiriXService::Stub::AsyncDicomSeriesPreviousSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesPreviousSeriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesNextSeries_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesNextSeries_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesNextSeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesNextSeries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesNextSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesNextSeriesResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesNextSeries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNextSeriesResponse>* OsiriXService::Stub::AsyncDicomSeriesNextSeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesNextSeriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesSortedImages_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSortedImages_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesSortedImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSortedImages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesSortedImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesSortedImagesResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesSortedImages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSortedImagesResponse>* OsiriXService::Stub::AsyncDicomSeriesSortedImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesSortedImagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesStudyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesStudy_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesStudy_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesStudy(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesStudy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesStudyResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesStudy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesStudyResponse>* OsiriXService::Stub::AsyncDicomSeriesStudyRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesStudyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesImages_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesImages_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesImages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesImagesResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesImages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesImagesResponse>* OsiriXService::Stub::AsyncDicomSeriesImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesImagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesSeriesInstanceUID_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSeriesInstanceUID_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesSeriesInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSeriesInstanceUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesSeriesInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesSeriesInstanceUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse>* OsiriXService::Stub::AsyncDicomSeriesSeriesInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesSeriesInstanceUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesSeriesSOPClassUID_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSeriesSOPClassUID_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesSeriesSOPClassUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSeriesSOPClassUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesSeriesSOPClassUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesSeriesSOPClassUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse>* OsiriXService::Stub::AsyncDicomSeriesSeriesSOPClassUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesSeriesSOPClassUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesSeriesDescription_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSeriesDescription_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesSeriesDescription(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesSeriesDescription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesSeriesDescriptionRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesSeriesDescription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesSeriesDescriptionResponse>* OsiriXService::Stub::AsyncDicomSeriesSeriesDescriptionRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesSeriesDescriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesModalityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesModality_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesModality_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesModality_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesModalityResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesModality_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesModalityResponse>* OsiriXService::Stub::AsyncDicomSeriesModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesModalityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesName_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesName(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesNameResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNameResponse>* OsiriXService::Stub::AsyncDicomSeriesNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesDateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesDate_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesDate_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesDateResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesDateResponse>* OsiriXService::Stub::AsyncDicomSeriesDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomSeriesNumberOfImages_, context, request, response);
}

void OsiriXService::Stub::async::DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesNumberOfImages_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomSeriesNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomSeriesNumberOfImages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* OsiriXService::Stub::PrepareAsyncDicomSeriesNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomSeriesNumberOfImagesResponse, ::osirixgrpc::DicomSeries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomSeriesNumberOfImages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomSeriesNumberOfImagesResponse>* OsiriXService::Stub::AsyncDicomSeriesNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomSeries& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomSeriesNumberOfImagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyPaths_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPaths_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyPaths(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyPathsResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyPaths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPathsResponse>* OsiriXService::Stub::AsyncDicomStudyPathsRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyImages_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyImages_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyImages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyImagesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyImages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyImagesResponse>* OsiriXService::Stub::AsyncDicomStudyImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyImagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyModalitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyModalities_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyModalities_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyModalities(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyModalities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyModalitiesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyModalitiesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyModalities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalitiesResponse>* OsiriXService::Stub::AsyncDicomStudyModalitiesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyModalitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNoFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyNoFiles_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyNoFiles_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyNoFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyNoFilesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyNoFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesResponse>* OsiriXService::Stub::AsyncDicomStudyNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyNoFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyRawNoFiles_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyRawNoFiles_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyRawNoFiles(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyRawNoFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyRawNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyRawNoFilesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyRawNoFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyRawNoFilesResponse>* OsiriXService::Stub::AsyncDicomStudyRawNoFilesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyRawNoFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyNoFilesExcludingMultiFrames_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyNoFilesExcludingMultiFrames_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyNoFilesExcludingMultiFrames(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyNoFilesExcludingMultiFrames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyNoFilesExcludingMultiFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyNoFilesExcludingMultiFrames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse>* OsiriXService::Stub::AsyncDicomStudyNoFilesExcludingMultiFramesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyNoFilesExcludingMultiFramesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyNumberOfImages_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyNumberOfImages_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyNumberOfImages(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyNumberOfImages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyNumberOfImagesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyNumberOfImages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNumberOfImagesResponse>* OsiriXService::Stub::AsyncDicomStudyNumberOfImagesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyNumberOfImagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudySeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudySeries_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudySeries_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudySeries(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudySeries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>* OsiriXService::Stub::PrepareAsyncDicomStudySeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudySeriesResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudySeries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudySeriesResponse>* OsiriXService::Stub::AsyncDicomStudySeriesRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudySeriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyName_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyNameResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyNameResponse>* OsiriXService::Stub::AsyncDicomStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyDate_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyDate_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyDate(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyDateResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateResponse>* OsiriXService::Stub::AsyncDicomStudyDateRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateAddedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyDateAdded_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyDateAdded_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyDateAdded(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyDateAdded_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyDateAddedRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyDateAddedResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyDateAdded_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateAddedResponse>* OsiriXService::Stub::AsyncDicomStudyDateAddedRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyDateAddedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyDateOfBirth_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyDateOfBirth_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyDateOfBirth(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyDateOfBirth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyDateOfBirthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyDateOfBirthResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyDateOfBirth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyDateOfBirthResponse>* OsiriXService::Stub::AsyncDicomStudyDateOfBirthRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyDateOfBirthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyInstitutionName_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyInstitutionName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyInstitutionName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyInstitutionName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyInstitutionNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyInstitutionNameResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyInstitutionName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyInstitutionNameResponse>* OsiriXService::Stub::AsyncDicomStudyInstitutionNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyInstitutionNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyModalityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyModality_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyModality_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyModality(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyModality_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyModalityResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyModality_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyModalityResponse>* OsiriXService::Stub::AsyncDicomStudyModalityRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyModalityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyPatientID_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPatientID_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyPatientID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPatientID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyPatientIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyPatientIDResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyPatientID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientIDResponse>* OsiriXService::Stub::AsyncDicomStudyPatientIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyPatientIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyPatientUID_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPatientUID_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyPatientUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPatientUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyPatientUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyPatientUIDResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyPatientUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientUIDResponse>* OsiriXService::Stub::AsyncDicomStudyPatientUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyPatientUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPatientSexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyPatientSex_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPatientSex_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyPatientSex(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPatientSex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyPatientSexRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyPatientSexResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyPatientSex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPatientSexResponse>* OsiriXService::Stub::AsyncDicomStudyPatientSexRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyPatientSexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyPerformingPhysician_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPerformingPhysician_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyPerformingPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyPerformingPhysician_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyPerformingPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyPerformingPhysicianResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyPerformingPhysician_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyPerformingPhysicianResponse>* OsiriXService::Stub::AsyncDicomStudyPerformingPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyPerformingPhysicianRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyReferringPhysician_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyReferringPhysician_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyReferringPhysician(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyReferringPhysician_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyReferringPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyReferringPhysicianResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyReferringPhysician_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyReferringPhysicianResponse>* OsiriXService::Stub::AsyncDicomStudyReferringPhysicianRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyReferringPhysicianRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyStudyInstanceUID_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyStudyInstanceUID_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyStudyInstanceUID(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyStudyInstanceUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyStudyInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyStudyInstanceUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyInstanceUIDResponse>* OsiriXService::Stub::AsyncDicomStudyStudyInstanceUIDRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyStudyInstanceUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OsiriXService::Stub::DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::osirixgrpc::DicomStudyStudyNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DicomStudyStudyName_, context, request, response);
}

void OsiriXService::Stub::async::DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyStudyName_, context, request, response, std::move(f));
}

void OsiriXService::Stub::async::DicomStudyStudyName(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DicomStudyStudyName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>* OsiriXService::Stub::PrepareAsyncDicomStudyStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::osirixgrpc::DicomStudyStudyNameResponse, ::osirixgrpc::DicomStudy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DicomStudyStudyName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::osirixgrpc::DicomStudyStudyNameResponse>* OsiriXService::Stub::AsyncDicomStudyStudyNameRaw(::grpc::ClientContext* context, const ::osirixgrpc::DicomStudy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDicomStudyStudyNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

OsiriXService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::Empty, ::osirixgrpc::OsirixCurrentBrowserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::Empty* req,
             ::osirixgrpc::OsirixCurrentBrowserResponse* resp) {
               return service->OsirixCurrentBrowser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostViewerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::Empty* req,
             ::osirixgrpc::OsirixFrontmostViewerResponse* resp) {
               return service->OsirixFrontmostViewer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayed2DViewersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::Empty* req,
             ::osirixgrpc::OsirixDisplayed2DViewersResponse* resp) {
               return service->OsirixDisplayed2DViewers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::Empty, ::osirixgrpc::OsirixFrontmostVRControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::Empty* req,
             ::osirixgrpc::OsirixFrontmostVRControllerResponse* resp) {
               return service->OsirixFrontmostVRController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::Empty, ::osirixgrpc::OsirixDisplayedVRControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::Empty* req,
             ::osirixgrpc::OsirixDisplayedVRControllersResponse* resp) {
               return service->OsirixDisplayedVRControllers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIFlipHorizontally(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIFlipVertically(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIAreaResponse* resp) {
               return service->ROIArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROICentroidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROICentroidResponse* resp) {
               return service->ROICentroid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIRotateRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIRotateRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIRotate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIMoveRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIMoveRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIPixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIPixResponse* resp) {
               return service->ROIPix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROINameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROINameResponse* resp) {
               return service->ROIName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIITypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIITypeResponse* resp) {
               return service->ROIIType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROISetNameRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROISetNameRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROISetName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIColorResponse* resp) {
               return service->ROIColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROISetColorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROISetColorRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROISetColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIOpacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIOpacityResponse* resp) {
               return service->ROIOpacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROISetOpacityRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROISetOpacityRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROISetOpacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIThicknessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIThicknessResponse* resp) {
               return service->ROIThickness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROISetThicknessRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROISetThicknessRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROISetThickness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROI, ::osirixgrpc::ROIPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROI* req,
             ::osirixgrpc::ROIPointsResponse* resp) {
               return service->ROIPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROISetPointsRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROISetPointsRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROISetPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeTextureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeTextureResponse* resp) {
               return service->ROIVolumeTexture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolumeSetTextureRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolumeSetTextureRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIVolumeSetTexture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeVolumeResponse* resp) {
               return service->ROIVolumeVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeColorResponse* resp) {
               return service->ROIVolumeColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolumeSetColorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolumeSetColorRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIVolumeSetColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeOpacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeOpacityResponse* resp) {
               return service->ROIVolumeOpacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolumeSetOpacityRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolumeSetOpacityRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIVolumeSetOpacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeFactorResponse* resp) {
               return service->ROIVolumeFactor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolumeSetFactorRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolumeSetFactorRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ROIVolumeSetFactor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeNameResponse* resp) {
               return service->ROIVolumeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ROIVolume, ::osirixgrpc::ROIVolumeVisibleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ROIVolume* req,
             ::osirixgrpc::ROIVolumeVisibleResponse* resp) {
               return service->ROIVolumeVisible(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPixConvertToRGBRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPixConvertToRGBRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->DCMPixConvertToRGB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPixConvertToBWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPixConvertToBWRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->DCMPixConvertToBW(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixIsRGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixIsRGBResponse* resp) {
               return service->DCMPixIsRGB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPixComputeROIRequest, ::osirixgrpc::DCMPixComputeROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPixComputeROIRequest* req,
             ::osirixgrpc::DCMPixComputeROIResponse* resp) {
               return service->DCMPixComputeROI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPixROIValuesRequest, ::osirixgrpc::DCMPixROIValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPixROIValuesRequest* req,
             ::osirixgrpc::DCMPixROIValuesResponse* resp) {
               return service->DCMPixROIValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixShapeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixShapeResponse* resp) {
               return service->DCMPixShape(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSpacingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixSpacingResponse* resp) {
               return service->DCMPixSpacing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOriginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixOriginResponse* resp) {
               return service->DCMPixOrigin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixOrientationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixOrientationResponse* resp) {
               return service->DCMPixOrientation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSliceLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixSliceLocationResponse* resp) {
               return service->DCMPixSliceLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixSourceFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixSourceFileResponse* resp) {
               return service->DCMPixSourceFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixImageResponse* resp) {
               return service->DCMPixImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPixSetImageRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPixSetImageRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->DCMPixSetImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPixGetMapFromROIRequest, ::osirixgrpc::DCMPixGetMapFromROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPixGetMapFromROIRequest* req,
             ::osirixgrpc::DCMPixGetMapFromROIResponse* resp) {
               return service->DCMPixGetMapFromROI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixDicomImageResponse* resp) {
               return service->DCMPixDicomImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixDicomSeriesResponse* resp) {
               return service->DCMPixDicomSeries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DCMPix, ::osirixgrpc::DCMPixDicomStudyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DCMPix* req,
             ::osirixgrpc::DCMPixDicomStudyResponse* resp) {
               return service->DCMPixDicomStudy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerViewer2DResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerViewer2DResponse* resp) {
               return service->VRControllerViewer2D(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerBlendingControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerBlendingControllerResponse* resp) {
               return service->VRControllerBlendingController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerStyleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerStyleResponse* resp) {
               return service->VRControllerStyle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerTitleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerTitleResponse* resp) {
               return service->VRControllerTitle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerROIVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerROIVolumesResponse* resp) {
               return service->VRControllerROIVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerRenderingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerRenderingModeResponse* resp) {
               return service->VRControllerRenderingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRControllerSetRenderingModeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRControllerSetRenderingModeRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->VRControllerSetRenderingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::VRControllerWLWWResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::VRControllerWLWWResponse* resp) {
               return service->VRControllerWLWW(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRControllerSetWLWWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRControllerSetWLWWRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->VRControllerSetWLWW(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRControllerHideROIVolumeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRControllerHideROIVolumeRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->VRControllerHideROIVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRControllerDisplayROIVolumeRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->VRControllerDisplayROIVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::VRController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::VRController* req,
             ::osirixgrpc::Response* resp) {
               return service->VRControllerNeedsDisplayUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerCloseViewer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerPixListRequest, ::osirixgrpc::ViewerControllerPixListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerPixListRequest* req,
             ::osirixgrpc::ViewerControllerPixListResponse* resp) {
               return service->ViewerControllerPixList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerNeedsDisplayUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerROIListRequest, ::osirixgrpc::ViewerControllerROIListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerROIListRequest* req,
             ::osirixgrpc::ViewerControllerROIListResponse* resp) {
               return service->ViewerControllerROIList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerNewROIRequest, ::osirixgrpc::ViewerControllerNewROIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerNewROIRequest* req,
             ::osirixgrpc::ViewerControllerNewROIResponse* resp) {
               return service->ViewerControllerNewROI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerCurDCMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerCurDCMResponse* resp) {
               return service->ViewerControllerCurDCM(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerROIsWithNameRequest, ::osirixgrpc::ViewerControllerROIsWithNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerROIsWithNameRequest* req,
             ::osirixgrpc::ViewerControllerROIsWithNameResponse* resp) {
               return service->ViewerControllerROIsWithName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerSelectedROIsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerSelectedROIsResponse* resp) {
               return service->ViewerControllerSelectedROIs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerIsDataVolumicRequest, ::osirixgrpc::ViewerControllerIsDataVolumicResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* req,
             ::osirixgrpc::ViewerControllerIsDataVolumicResponse* resp) {
               return service->ViewerControllerIsDataVolumic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerCopyViewerWindowRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerCopyViewerWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerResampleViewerControllerRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerResampleViewerController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerBlendingControllerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerBlendingControllerResponse* resp) {
               return service->ViewerControllerBlendingController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerVRControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerVRControllersResponse* resp) {
               return service->ViewerControllerVRControllers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerTitleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerTitleResponse* resp) {
               return service->ViewerControllerTitle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerModalityResponse* resp) {
               return service->ViewerControllerModality(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMovieIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerMovieIdxResponse* resp) {
               return service->ViewerControllerMovieIdx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerSetMovieIdxRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerSetMovieIdx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* resp) {
               return service->ViewerControllerMaxMovieIdx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerIdxResponse* resp) {
               return service->ViewerControllerIdx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerSetIdxRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerSetIdxRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerSetIdx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[83],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerController, ::osirixgrpc::ViewerControllerWLWWResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerController* req,
             ::osirixgrpc::ViewerControllerWLWWResponse* resp) {
               return service->ViewerControllerWLWW(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[84],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerSetWLWWRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerSetWLWWRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->ViewerControllerSetWLWW(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[85],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* req,
             ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* resp) {
               return service->ViewerControllerOpenVRViewerForMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[86],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::BrowserController, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::BrowserController* req,
             ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* resp) {
               return service->BrowserControllerDatabaseSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[87],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, ::osirixgrpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* req,
             ::osirixgrpc::Response* resp) {
               return service->BrowserControllerCopyFilesIfNeeded(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[88],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageWidthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageWidthResponse* resp) {
               return service->DicomImageWidth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[89],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageHeightResponse* resp) {
               return service->DicomImageHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[90],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSOPInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageSOPInstanceUIDResponse* resp) {
               return service->DicomImageSOPInstanceUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[91],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageCompletePathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageCompletePathResponse* resp) {
               return service->DicomImageCompletePath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[92],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageDateResponse* resp) {
               return service->DicomImageDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[93],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageNumberOfFramesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageNumberOfFramesResponse* resp) {
               return service->DicomImageNumberOfFrames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[94],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageModalityResponse* resp) {
               return service->DicomImageModality(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[95],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageSeriesResponse* resp) {
               return service->DicomImageSeries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[96],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageSliceLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageSliceLocationResponse* resp) {
               return service->DicomImageSliceLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[97],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomImage, ::osirixgrpc::DicomImageInstanceNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomImage* req,
             ::osirixgrpc::DicomImageInstanceNumberResponse* resp) {
               return service->DicomImageInstanceNumber(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[98],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesPathsResponse* resp) {
               return service->DicomSeriesPaths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[99],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesPreviousSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesPreviousSeriesResponse* resp) {
               return service->DicomSeriesPreviousSeries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[100],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNextSeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesNextSeriesResponse* resp) {
               return service->DicomSeriesNextSeries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[101],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSortedImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesSortedImagesResponse* resp) {
               return service->DicomSeriesSortedImages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[102],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesStudyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesStudyResponse* resp) {
               return service->DicomSeriesStudy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[103],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesImagesResponse* resp) {
               return service->DicomSeriesImages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[104],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* resp) {
               return service->DicomSeriesSeriesInstanceUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[105],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* resp) {
               return service->DicomSeriesSeriesSOPClassUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[106],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* resp) {
               return service->DicomSeriesSeriesDescription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[107],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesModalityResponse* resp) {
               return service->DicomSeriesModality(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[108],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesNameResponse* resp) {
               return service->DicomSeriesName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[109],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesDateResponse* resp) {
               return service->DicomSeriesDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[110],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomSeries, ::osirixgrpc::DicomSeriesNumberOfImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomSeries* req,
             ::osirixgrpc::DicomSeriesNumberOfImagesResponse* resp) {
               return service->DicomSeriesNumberOfImages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[111],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyPathsResponse* resp) {
               return service->DicomStudyPaths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[112],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyImagesResponse* resp) {
               return service->DicomStudyImages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[113],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyModalitiesResponse* resp) {
               return service->DicomStudyModalities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[114],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyNoFilesResponse* resp) {
               return service->DicomStudyNoFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[115],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyRawNoFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyRawNoFilesResponse* resp) {
               return service->DicomStudyRawNoFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[116],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* resp) {
               return service->DicomStudyNoFilesExcludingMultiFrames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[117],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNumberOfImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyNumberOfImagesResponse* resp) {
               return service->DicomStudyNumberOfImages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[118],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudySeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudySeriesResponse* resp) {
               return service->DicomStudySeries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[119],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyNameResponse* resp) {
               return service->DicomStudyName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[120],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyDateResponse* resp) {
               return service->DicomStudyDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[121],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateAddedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyDateAddedResponse* resp) {
               return service->DicomStudyDateAdded(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[122],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyDateOfBirthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyDateOfBirthResponse* resp) {
               return service->DicomStudyDateOfBirth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[123],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyInstitutionNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyInstitutionNameResponse* resp) {
               return service->DicomStudyInstitutionName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[124],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyModalityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyModalityResponse* resp) {
               return service->DicomStudyModality(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[125],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyPatientIDResponse* resp) {
               return service->DicomStudyPatientID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[126],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyPatientUIDResponse* resp) {
               return service->DicomStudyPatientUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[127],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPatientSexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyPatientSexResponse* resp) {
               return service->DicomStudyPatientSex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[128],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyPerformingPhysicianResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyPerformingPhysicianResponse* resp) {
               return service->DicomStudyPerformingPhysician(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[129],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyReferringPhysicianResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyReferringPhysicianResponse* resp) {
               return service->DicomStudyReferringPhysician(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[130],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* resp) {
               return service->DicomStudyStudyInstanceUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsiriXService_method_names[131],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsiriXService::Service, ::osirixgrpc::DicomStudy, ::osirixgrpc::DicomStudyStudyNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OsiriXService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::osirixgrpc::DicomStudy* req,
             ::osirixgrpc::DicomStudyStudyNameResponse* resp) {
               return service->DicomStudyStudyName(ctx, req, resp);
             }, this)));
}

OsiriXService::Service::~Service() {
}

::grpc::Status OsiriXService::Service::OsirixCurrentBrowser(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixCurrentBrowserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::OsirixFrontmostViewer(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostViewerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::OsirixDisplayed2DViewers(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayed2DViewersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::OsirixFrontmostVRController(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixFrontmostVRControllerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::OsirixDisplayedVRControllers(::grpc::ServerContext* context, const ::osirixgrpc::Empty* request, ::osirixgrpc::OsirixDisplayedVRControllersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIFlipHorizontally(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIFlipVertically(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIArea(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIAreaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROICentroid(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROICentroidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIRotate(::grpc::ServerContext* context, const ::osirixgrpc::ROIRotateRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIMove(::grpc::ServerContext* context, const ::osirixgrpc::ROIMoveRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIPix(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIName(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROINameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIIType(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIITypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROISetName(::grpc::ServerContext* context, const ::osirixgrpc::ROISetNameRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIColor(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROISetColor(::grpc::ServerContext* context, const ::osirixgrpc::ROISetColorRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIOpacityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROISetOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROISetOpacityRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIThickness(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIThicknessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROISetThickness(::grpc::ServerContext* context, const ::osirixgrpc::ROISetThicknessRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIPoints(::grpc::ServerContext* context, const ::osirixgrpc::ROI* request, ::osirixgrpc::ROIPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROISetPoints(::grpc::ServerContext* context, const ::osirixgrpc::ROISetPointsRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeTexture(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeTextureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeSetTexture(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetTextureRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeVolume(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeColor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeSetColor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetColorRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeOpacityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeSetOpacity(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetOpacityRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeFactor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeFactorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeSetFactor(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolumeSetFactorRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeName(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ROIVolumeVisible(::grpc::ServerContext* context, const ::osirixgrpc::ROIVolume* request, ::osirixgrpc::ROIVolumeVisibleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixConvertToRGB(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixConvertToRGBRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixConvertToBW(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixConvertToBWRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixIsRGB(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixIsRGBResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixComputeROI(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixComputeROIRequest* request, ::osirixgrpc::DCMPixComputeROIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixROIValues(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixROIValuesRequest* request, ::osirixgrpc::DCMPixROIValuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixShape(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixShapeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixSpacing(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSpacingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixOrigin(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOriginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixOrientation(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixOrientationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixSliceLocation(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSliceLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixSourceFile(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixSourceFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixImage(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixSetImage(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixSetImageRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixGetMapFromROI(::grpc::ServerContext* context, const ::osirixgrpc::DCMPixGetMapFromROIRequest* request, ::osirixgrpc::DCMPixGetMapFromROIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixDicomImage(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixDicomSeries(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomSeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DCMPixDicomStudy(::grpc::ServerContext* context, const ::osirixgrpc::DCMPix* request, ::osirixgrpc::DCMPixDicomStudyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerViewer2D(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerViewer2DResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerBlendingController(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerBlendingControllerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerStyle(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerStyleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerTitle(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerTitleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerROIVolumes(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerROIVolumesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerRenderingMode(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerRenderingModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerSetRenderingMode(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerSetRenderingModeRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerWLWW(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::VRControllerWLWWResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerSetWLWW(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerSetWLWWRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerHideROIVolume(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerHideROIVolumeRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerDisplayROIVolume(::grpc::ServerContext* context, const ::osirixgrpc::VRControllerDisplayROIVolumeRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::VRControllerNeedsDisplayUpdate(::grpc::ServerContext* context, const ::osirixgrpc::VRController* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerCloseViewer(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerPixList(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerPixListRequest* request, ::osirixgrpc::ViewerControllerPixListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerNeedsDisplayUpdate(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerROIList(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerROIListRequest* request, ::osirixgrpc::ViewerControllerROIListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerNewROI(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerNewROIRequest* request, ::osirixgrpc::ViewerControllerNewROIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerCurDCM(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerCurDCMResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerROIsWithName(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerROIsWithNameRequest* request, ::osirixgrpc::ViewerControllerROIsWithNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerSelectedROIs(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerSelectedROIsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerIsDataVolumic(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerIsDataVolumicRequest* request, ::osirixgrpc::ViewerControllerIsDataVolumicResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerCopyViewerWindow(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerCopyViewerWindowRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerResampleViewerController(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerResampleViewerControllerRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerBlendingController(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerBlendingControllerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerVRControllers(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerVRControllersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerTitle(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerTitleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerModality(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerModalityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerMovieIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMovieIdxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerSetMovieIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerSetMovieIdxRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerMaxMovieIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerMaxMovieIdxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerIdxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerSetIdx(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerSetIdxRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerWLWW(::grpc::ServerContext* context, const ::osirixgrpc::ViewerController* request, ::osirixgrpc::ViewerControllerWLWWResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerSetWLWW(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerSetWLWWRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::ViewerControllerOpenVRViewerForMode(::grpc::ServerContext* context, const ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest* request, ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::BrowserControllerDatabaseSelection(::grpc::ServerContext* context, const ::osirixgrpc::BrowserController* request, ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::BrowserControllerCopyFilesIfNeeded(::grpc::ServerContext* context, const ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* request, ::osirixgrpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageWidth(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageWidthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageHeight(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageHeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageSOPInstanceUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSOPInstanceUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageCompletePath(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageCompletePathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageDate(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageDateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageNumberOfFrames(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageNumberOfFramesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageModality(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageModalityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageSeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageSliceLocation(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageSliceLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomImageInstanceNumber(::grpc::ServerContext* context, const ::osirixgrpc::DicomImage* request, ::osirixgrpc::DicomImageInstanceNumberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesPaths(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesPreviousSeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesPreviousSeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesNextSeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNextSeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesSortedImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSortedImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesStudy(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesStudyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesSeriesInstanceUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesInstanceUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesSeriesSOPClassUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesSOPClassUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesSeriesDescription(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesSeriesDescriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesModality(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesModalityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesName(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesDate(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesDateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomSeriesNumberOfImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomSeries* request, ::osirixgrpc::DicomSeriesNumberOfImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyPaths(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyModalities(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyNoFiles(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyRawNoFiles(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyRawNoFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyNoFilesExcludingMultiFrames(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNoFilesExcludingMultiFramesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyNumberOfImages(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNumberOfImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudySeries(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudySeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyName(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyDate(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyDateAdded(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateAddedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyDateOfBirth(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyDateOfBirthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyInstitutionName(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyInstitutionNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyModality(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyModalityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyPatientID(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyPatientUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyPatientSex(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPatientSexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyPerformingPhysician(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyPerformingPhysicianResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyReferringPhysician(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyReferringPhysicianResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyStudyInstanceUID(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyInstanceUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsiriXService::Service::DicomStudyStudyName(::grpc::ServerContext* context, const ::osirixgrpc::DicomStudy* request, ::osirixgrpc::DicomStudyStudyNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace osirixgrpc

