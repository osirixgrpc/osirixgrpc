// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: viewercontroller.proto

#include "viewercontroller.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace osirixgrpc {
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerPixListResponse::ViewerControllerPixListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pix_)*/{}
  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerPixListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerPixListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerPixListResponseDefaultTypeInternal() {}
  union {
    ViewerControllerPixListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerPixListResponseDefaultTypeInternal _ViewerControllerPixListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerROIListResponse_ROISlice::ViewerControllerROIListResponse_ROISlice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rois_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ViewerControllerROIListResponse_ROISliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerROIListResponse_ROISliceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerROIListResponse_ROISliceDefaultTypeInternal() {}
  union {
    ViewerControllerROIListResponse_ROISlice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerROIListResponse_ROISliceDefaultTypeInternal _ViewerControllerROIListResponse_ROISlice_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerROIListResponse::ViewerControllerROIListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roi_slices_)*/{}
  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerROIListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerROIListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerROIListResponseDefaultTypeInternal() {}
  union {
    ViewerControllerROIListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerROIListResponseDefaultTypeInternal _ViewerControllerROIListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerNewROIResponse::ViewerControllerNewROIResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.roi_)*/nullptr} {}
struct ViewerControllerNewROIResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerNewROIResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerNewROIResponseDefaultTypeInternal() {}
  union {
    ViewerControllerNewROIResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerNewROIResponseDefaultTypeInternal _ViewerControllerNewROIResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerCurDCMResponse::ViewerControllerCurDCMResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.pix_)*/nullptr} {}
struct ViewerControllerCurDCMResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerCurDCMResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerCurDCMResponseDefaultTypeInternal() {}
  union {
    ViewerControllerCurDCMResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerCurDCMResponseDefaultTypeInternal _ViewerControllerCurDCMResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerROIsWithNameResponse::ViewerControllerROIsWithNameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rois_)*/{}
  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerROIsWithNameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerROIsWithNameResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerROIsWithNameResponseDefaultTypeInternal() {}
  union {
    ViewerControllerROIsWithNameResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerROIsWithNameResponseDefaultTypeInternal _ViewerControllerROIsWithNameResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerSelectedROIsResponse::ViewerControllerSelectedROIsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rois_)*/{}
  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerSelectedROIsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerSelectedROIsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerSelectedROIsResponseDefaultTypeInternal() {}
  union {
    ViewerControllerSelectedROIsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerSelectedROIsResponseDefaultTypeInternal _ViewerControllerSelectedROIsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerIsDataVolumicResponse::ViewerControllerIsDataVolumicResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.is_volumic_)*/ false
} {}
struct ViewerControllerIsDataVolumicResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerIsDataVolumicResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerIsDataVolumicResponseDefaultTypeInternal() {}
  union {
    ViewerControllerIsDataVolumicResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerIsDataVolumicResponseDefaultTypeInternal _ViewerControllerIsDataVolumicResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerBlendingControllerResponse::ViewerControllerBlendingControllerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.blending_viewer_)*/nullptr} {}
struct ViewerControllerBlendingControllerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerBlendingControllerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerBlendingControllerResponseDefaultTypeInternal() {}
  union {
    ViewerControllerBlendingControllerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerBlendingControllerResponseDefaultTypeInternal _ViewerControllerBlendingControllerResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerVRControllersResponse::ViewerControllerVRControllersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vr_controllers_)*/{}
  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerVRControllersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerVRControllersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerVRControllersResponseDefaultTypeInternal() {}
  union {
    ViewerControllerVRControllersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerVRControllersResponseDefaultTypeInternal _ViewerControllerVRControllersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerTitleResponse::ViewerControllerTitleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerTitleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerTitleResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerTitleResponseDefaultTypeInternal() {}
  union {
    ViewerControllerTitleResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerTitleResponseDefaultTypeInternal _ViewerControllerTitleResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerModalityResponse::ViewerControllerModalityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modality_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/nullptr} {}
struct ViewerControllerModalityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerModalityResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerModalityResponseDefaultTypeInternal() {}
  union {
    ViewerControllerModalityResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerModalityResponseDefaultTypeInternal _ViewerControllerModalityResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerMovieIdxResponse::ViewerControllerMovieIdxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.movie_idx_)*/ 0
} {}
struct ViewerControllerMovieIdxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerMovieIdxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerMovieIdxResponseDefaultTypeInternal() {}
  union {
    ViewerControllerMovieIdxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerMovieIdxResponseDefaultTypeInternal _ViewerControllerMovieIdxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerMaxMovieIdxResponse::ViewerControllerMaxMovieIdxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.max_movie_idx_)*/ 0
} {}
struct ViewerControllerMaxMovieIdxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerMaxMovieIdxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerMaxMovieIdxResponseDefaultTypeInternal() {}
  union {
    ViewerControllerMaxMovieIdxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerMaxMovieIdxResponseDefaultTypeInternal _ViewerControllerMaxMovieIdxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerIdxResponse::ViewerControllerIdxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.idx_)*/ 0
} {}
struct ViewerControllerIdxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerIdxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerIdxResponseDefaultTypeInternal() {}
  union {
    ViewerControllerIdxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerIdxResponseDefaultTypeInternal _ViewerControllerIdxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerWLWWResponse::ViewerControllerWLWWResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.wl_)*/ 0

  , /*decltype(_impl_.ww_)*/ 0
} {}
struct ViewerControllerWLWWResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerWLWWResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerWLWWResponseDefaultTypeInternal() {}
  union {
    ViewerControllerWLWWResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerWLWWResponseDefaultTypeInternal _ViewerControllerWLWWResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerOpenVRViewerForModeResponse::ViewerControllerOpenVRViewerForModeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.vr_controller_)*/nullptr} {}
struct ViewerControllerOpenVRViewerForModeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerOpenVRViewerForModeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerOpenVRViewerForModeResponseDefaultTypeInternal() {}
  union {
    ViewerControllerOpenVRViewerForModeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerOpenVRViewerForModeResponseDefaultTypeInternal _ViewerControllerOpenVRViewerForModeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerPixListRequest::ViewerControllerPixListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.movie_idx_)*/ 0
} {}
struct ViewerControllerPixListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerPixListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerPixListRequestDefaultTypeInternal() {}
  union {
    ViewerControllerPixListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerPixListRequestDefaultTypeInternal _ViewerControllerPixListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerROIListRequest::ViewerControllerROIListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.movie_idx_)*/ 0
} {}
struct ViewerControllerROIListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerROIListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerROIListRequestDefaultTypeInternal() {}
  union {
    ViewerControllerROIListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerROIListRequestDefaultTypeInternal _ViewerControllerROIListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Buffer::ViewerControllerNewROIRequest_Buffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buffer_)*/ {}

  , /*decltype(_impl_.rows_)*/ 0

  , /*decltype(_impl_.columns_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ViewerControllerNewROIRequest_BufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_BufferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerNewROIRequest_BufferDefaultTypeInternal() {}
  union {
    ViewerControllerNewROIRequest_Buffer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerNewROIRequest_BufferDefaultTypeInternal _ViewerControllerNewROIRequest_Buffer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Point2D::ViewerControllerNewROIRequest_Point2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ViewerControllerNewROIRequest_Point2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Point2DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerNewROIRequest_Point2DDefaultTypeInternal() {}
  union {
    ViewerControllerNewROIRequest_Point2D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerNewROIRequest_Point2DDefaultTypeInternal _ViewerControllerNewROIRequest_Point2D_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Color::ViewerControllerNewROIRequest_Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/ 0

  , /*decltype(_impl_.g_)*/ 0

  , /*decltype(_impl_.b_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ViewerControllerNewROIRequest_ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_ColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerNewROIRequest_ColorDefaultTypeInternal() {}
  union {
    ViewerControllerNewROIRequest_Color _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerNewROIRequest_ColorDefaultTypeInternal _ViewerControllerNewROIRequest_Color_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_Rect::ViewerControllerNewROIRequest_Rect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.origin_x_)*/ 0

  , /*decltype(_impl_.origin_y_)*/ 0

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ViewerControllerNewROIRequest_RectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest_RectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerNewROIRequest_RectDefaultTypeInternal() {}
  union {
    ViewerControllerNewROIRequest_Rect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerNewROIRequest_RectDefaultTypeInternal _ViewerControllerNewROIRequest_Rect_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerNewROIRequest::ViewerControllerNewROIRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.buffer_)*/nullptr
  , /*decltype(_impl_.rectangle_)*/nullptr
  , /*decltype(_impl_.itype_)*/ 0

  , /*decltype(_impl_.position_)*/ 0

  , /*decltype(_impl_.movie_idx_)*/ 0

  , /*decltype(_impl_.buffer_position_x_)*/ 0

  , /*decltype(_impl_.buffer_position_y_)*/ 0

  , /*decltype(_impl_.thickness_)*/ 0

  , /*decltype(_impl_.opacity_)*/ 0
} {}
struct ViewerControllerNewROIRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerNewROIRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerNewROIRequestDefaultTypeInternal() {}
  union {
    ViewerControllerNewROIRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerNewROIRequestDefaultTypeInternal _ViewerControllerNewROIRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerROIsWithNameRequest::ViewerControllerROIsWithNameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.movie_idx_)*/ 0

  , /*decltype(_impl_.in_4d_)*/ false
} {}
struct ViewerControllerROIsWithNameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerROIsWithNameRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerROIsWithNameRequestDefaultTypeInternal() {}
  union {
    ViewerControllerROIsWithNameRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerROIsWithNameRequestDefaultTypeInternal _ViewerControllerROIsWithNameRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerResampleViewerControllerRequest::ViewerControllerResampleViewerControllerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.fixed_viewer_controller_)*/nullptr} {}
struct ViewerControllerResampleViewerControllerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerResampleViewerControllerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerResampleViewerControllerRequestDefaultTypeInternal() {}
  union {
    ViewerControllerResampleViewerControllerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerResampleViewerControllerRequestDefaultTypeInternal _ViewerControllerResampleViewerControllerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerCopyViewerWindowRequest::ViewerControllerCopyViewerWindowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.in_4d_)*/ false
} {}
struct ViewerControllerCopyViewerWindowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerCopyViewerWindowRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerCopyViewerWindowRequestDefaultTypeInternal() {}
  union {
    ViewerControllerCopyViewerWindowRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerCopyViewerWindowRequestDefaultTypeInternal _ViewerControllerCopyViewerWindowRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerSetMovieIdxRequest::ViewerControllerSetMovieIdxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.movie_idx_)*/ 0
} {}
struct ViewerControllerSetMovieIdxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerSetMovieIdxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerSetMovieIdxRequestDefaultTypeInternal() {}
  union {
    ViewerControllerSetMovieIdxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerSetMovieIdxRequestDefaultTypeInternal _ViewerControllerSetMovieIdxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerIsDataVolumicRequest::ViewerControllerIsDataVolumicRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.in_4d_)*/ false
} {}
struct ViewerControllerIsDataVolumicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerIsDataVolumicRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerIsDataVolumicRequestDefaultTypeInternal() {}
  union {
    ViewerControllerIsDataVolumicRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerIsDataVolumicRequestDefaultTypeInternal _ViewerControllerIsDataVolumicRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerSetIdxRequest::ViewerControllerSetIdxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.idx_)*/ 0
} {}
struct ViewerControllerSetIdxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerSetIdxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerSetIdxRequestDefaultTypeInternal() {}
  union {
    ViewerControllerSetIdxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerSetIdxRequestDefaultTypeInternal _ViewerControllerSetIdxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerSetWLWWRequest::ViewerControllerSetWLWWRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewer_controller_)*/nullptr
  , /*decltype(_impl_.wl_)*/ 0

  , /*decltype(_impl_.ww_)*/ 0
} {}
struct ViewerControllerSetWLWWRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerSetWLWWRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerSetWLWWRequestDefaultTypeInternal() {}
  union {
    ViewerControllerSetWLWWRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerSetWLWWRequestDefaultTypeInternal _ViewerControllerSetWLWWRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ViewerControllerOpenVRViewerForModeRequest::ViewerControllerOpenVRViewerForModeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.viewer_controller_)*/nullptr} {}
struct ViewerControllerOpenVRViewerForModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewerControllerOpenVRViewerForModeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewerControllerOpenVRViewerForModeRequestDefaultTypeInternal() {}
  union {
    ViewerControllerOpenVRViewerForModeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewerControllerOpenVRViewerForModeRequestDefaultTypeInternal _ViewerControllerOpenVRViewerForModeRequest_default_instance_;
}  // namespace osirixgrpc
static ::_pb::Metadata file_level_metadata_viewercontroller_2eproto[32];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_viewercontroller_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_viewercontroller_2eproto = nullptr;
const ::uint32_t TableStruct_viewercontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListResponse, _impl_.pix_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListResponse_ROISlice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListResponse_ROISlice, _impl_.rois_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListResponse, _impl_.roi_slices_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIResponse, _impl_.roi_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCurDCMResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCurDCMResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCurDCMResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCurDCMResponse, _impl_.pix_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameResponse, _impl_.rois_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSelectedROIsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSelectedROIsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSelectedROIsResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSelectedROIsResponse, _impl_.rois_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicResponse, _impl_.is_volumic_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerBlendingControllerResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerBlendingControllerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerBlendingControllerResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerBlendingControllerResponse, _impl_.blending_viewer_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerVRControllersResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerVRControllersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerVRControllersResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerVRControllersResponse, _impl_.vr_controllers_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerTitleResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerTitleResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerTitleResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerTitleResponse, _impl_.title_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerModalityResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerModalityResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerModalityResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerModalityResponse, _impl_.modality_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMovieIdxResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMovieIdxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMovieIdxResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMovieIdxResponse, _impl_.movie_idx_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMaxMovieIdxResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMaxMovieIdxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMaxMovieIdxResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerMaxMovieIdxResponse, _impl_.max_movie_idx_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIdxResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIdxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIdxResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIdxResponse, _impl_.idx_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerWLWWResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerWLWWResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerWLWWResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerWLWWResponse, _impl_.wl_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerWLWWResponse, _impl_.ww_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse, _impl_.vr_controller_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerPixListRequest, _impl_.movie_idx_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIListRequest, _impl_.movie_idx_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Buffer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Buffer, _impl_.buffer_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Buffer, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Buffer, _impl_.columns_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Point2D, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Point2D, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Point2D, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Color, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Color, _impl_.r_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Color, _impl_.g_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Color, _impl_.b_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Rect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Rect, _impl_.origin_x_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Rect, _impl_.origin_y_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Rect, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest_Rect, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.itype_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.movie_idx_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.buffer_position_x_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.buffer_position_y_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.thickness_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.opacity_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.buffer_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.points_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerNewROIRequest, _impl_.rectangle_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    3,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameRequest, _impl_.movie_idx_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerROIsWithNameRequest, _impl_.in_4d_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerResampleViewerControllerRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerResampleViewerControllerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerResampleViewerControllerRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerResampleViewerControllerRequest, _impl_.fixed_viewer_controller_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCopyViewerWindowRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCopyViewerWindowRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCopyViewerWindowRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerCopyViewerWindowRequest, _impl_.in_4d_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetMovieIdxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetMovieIdxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetMovieIdxRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetMovieIdxRequest, _impl_.movie_idx_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerIsDataVolumicRequest, _impl_.in_4d_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetIdxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetIdxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetIdxRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetIdxRequest, _impl_.idx_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetWLWWRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetWLWWRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetWLWWRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetWLWWRequest, _impl_.wl_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerSetWLWWRequest, _impl_.ww_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, _impl_.viewer_controller_),
    PROTOBUF_FIELD_OFFSET(::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest, _impl_.mode_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::osirixgrpc::ViewerControllerPixListResponse)},
        { 12, -1, -1, sizeof(::osirixgrpc::ViewerControllerROIListResponse_ROISlice)},
        { 21, 31, -1, sizeof(::osirixgrpc::ViewerControllerROIListResponse)},
        { 33, 43, -1, sizeof(::osirixgrpc::ViewerControllerNewROIResponse)},
        { 45, 55, -1, sizeof(::osirixgrpc::ViewerControllerCurDCMResponse)},
        { 57, 67, -1, sizeof(::osirixgrpc::ViewerControllerROIsWithNameResponse)},
        { 69, 79, -1, sizeof(::osirixgrpc::ViewerControllerSelectedROIsResponse)},
        { 81, 91, -1, sizeof(::osirixgrpc::ViewerControllerIsDataVolumicResponse)},
        { 93, 103, -1, sizeof(::osirixgrpc::ViewerControllerBlendingControllerResponse)},
        { 105, 115, -1, sizeof(::osirixgrpc::ViewerControllerVRControllersResponse)},
        { 117, 127, -1, sizeof(::osirixgrpc::ViewerControllerTitleResponse)},
        { 129, 139, -1, sizeof(::osirixgrpc::ViewerControllerModalityResponse)},
        { 141, 151, -1, sizeof(::osirixgrpc::ViewerControllerMovieIdxResponse)},
        { 153, 163, -1, sizeof(::osirixgrpc::ViewerControllerMaxMovieIdxResponse)},
        { 165, 175, -1, sizeof(::osirixgrpc::ViewerControllerIdxResponse)},
        { 177, 188, -1, sizeof(::osirixgrpc::ViewerControllerWLWWResponse)},
        { 191, 201, -1, sizeof(::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse)},
        { 203, 213, -1, sizeof(::osirixgrpc::ViewerControllerPixListRequest)},
        { 215, 225, -1, sizeof(::osirixgrpc::ViewerControllerROIListRequest)},
        { 227, -1, -1, sizeof(::osirixgrpc::ViewerControllerNewROIRequest_Buffer)},
        { 238, -1, -1, sizeof(::osirixgrpc::ViewerControllerNewROIRequest_Point2D)},
        { 248, -1, -1, sizeof(::osirixgrpc::ViewerControllerNewROIRequest_Color)},
        { 259, -1, -1, sizeof(::osirixgrpc::ViewerControllerNewROIRequest_Rect)},
        { 271, 292, -1, sizeof(::osirixgrpc::ViewerControllerNewROIRequest)},
        { 305, 317, -1, sizeof(::osirixgrpc::ViewerControllerROIsWithNameRequest)},
        { 321, 331, -1, sizeof(::osirixgrpc::ViewerControllerResampleViewerControllerRequest)},
        { 333, 343, -1, sizeof(::osirixgrpc::ViewerControllerCopyViewerWindowRequest)},
        { 345, 355, -1, sizeof(::osirixgrpc::ViewerControllerSetMovieIdxRequest)},
        { 357, 367, -1, sizeof(::osirixgrpc::ViewerControllerIsDataVolumicRequest)},
        { 369, 379, -1, sizeof(::osirixgrpc::ViewerControllerSetIdxRequest)},
        { 381, 392, -1, sizeof(::osirixgrpc::ViewerControllerSetWLWWRequest)},
        { 395, 405, -1, sizeof(::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::osirixgrpc::_ViewerControllerPixListResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerROIListResponse_ROISlice_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerROIListResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerNewROIResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerCurDCMResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerROIsWithNameResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerSelectedROIsResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerIsDataVolumicResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerBlendingControllerResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerVRControllersResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerTitleResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerModalityResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerMovieIdxResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerMaxMovieIdxResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerIdxResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerWLWWResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerOpenVRViewerForModeResponse_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerPixListRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerROIListRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerNewROIRequest_Buffer_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerNewROIRequest_Point2D_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerNewROIRequest_Color_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerNewROIRequest_Rect_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerNewROIRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerROIsWithNameRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerResampleViewerControllerRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerCopyViewerWindowRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerSetMovieIdxRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerIsDataVolumicRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerSetIdxRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerSetWLWWRequest_default_instance_._instance,
    &::osirixgrpc::_ViewerControllerOpenVRViewerForModeRequest_default_instance_._instance,
};
const char descriptor_table_protodef_viewercontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\026viewercontroller.proto\022\nosirixgrpc\032\017ut"
    "ilities.proto\032\013types.proto\"f\n\037ViewerCont"
    "rollerPixListResponse\022\"\n\006status\030\001 \001(\0132\022."
    "osirixgrpc.Status\022\037\n\003pix\030\002 \003(\0132\022.osirixg"
    "rpc.DCMPix\"\272\001\n\037ViewerControllerROIListRe"
    "sponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Stat"
    "us\022H\n\nroi_slices\030\002 \003(\01324.osirixgrpc.View"
    "erControllerROIListResponse.ROISlice\032)\n\010"
    "ROISlice\022\035\n\004rois\030\001 \003(\0132\017.osirixgrpc.ROI\""
    "b\n\036ViewerControllerNewROIResponse\022\"\n\006sta"
    "tus\030\001 \001(\0132\022.osirixgrpc.Status\022\034\n\003roi\030\002 \001"
    "(\0132\017.osirixgrpc.ROI\"e\n\036ViewerControllerC"
    "urDCMResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgr"
    "pc.Status\022\037\n\003pix\030\002 \001(\0132\022.osirixgrpc.DCMP"
    "ix\"i\n$ViewerControllerROIsWithNameRespon"
    "se\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\035"
    "\n\004rois\030\002 \003(\0132\017.osirixgrpc.ROI\"i\n$ViewerC"
    "ontrollerSelectedROIsResponse\022\"\n\006status\030"
    "\001 \001(\0132\022.osirixgrpc.Status\022\035\n\004rois\030\002 \003(\0132"
    "\017.osirixgrpc.ROI\"_\n%ViewerControllerIsDa"
    "taVolumicResponse\022\"\n\006status\030\001 \001(\0132\022.osir"
    "ixgrpc.Status\022\022\n\nis_volumic\030\002 \001(\010\"\207\001\n*Vi"
    "ewerControllerBlendingControllerResponse"
    "\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\0225\n\017"
    "blending_viewer\030\002 \001(\0132\034.osirixgrpc.Viewe"
    "rController\"}\n%ViewerControllerVRControl"
    "lersResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrp"
    "c.Status\0220\n\016vr_controllers\030\002 \003(\0132\030.osiri"
    "xgrpc.VRController\"R\n\035ViewerControllerTi"
    "tleResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc"
    ".Status\022\r\n\005title\030\002 \001(\t\"X\n ViewerControll"
    "erModalityResponse\022\"\n\006status\030\001 \001(\0132\022.osi"
    "rixgrpc.Status\022\020\n\010modality\030\002 \001(\t\"Y\n View"
    "erControllerMovieIdxResponse\022\"\n\006status\030\001"
    " \001(\0132\022.osirixgrpc.Status\022\021\n\tmovie_idx\030\002 "
    "\001(\005\"`\n#ViewerControllerMaxMovieIdxRespon"
    "se\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\025"
    "\n\rmax_movie_idx\030\002 \001(\005\"N\n\033ViewerControlle"
    "rIdxResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrp"
    "c.Status\022\013\n\003idx\030\002 \001(\005\"Z\n\034ViewerControlle"
    "rWLWWResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgr"
    "pc.Status\022\n\n\002wl\030\002 \001(\002\022\n\n\002ww\030\003 \001(\002\"\202\001\n+Vi"
    "ewerControllerOpenVRViewerForModeRespons"
    "e\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022/\n"
    "\rvr_controller\030\002 \001(\0132\030.osirixgrpc.VRCont"
    "roller\"l\n\036ViewerControllerPixListRequest"
    "\0227\n\021viewer_controller\030\001 \001(\0132\034.osirixgrpc"
    ".ViewerController\022\021\n\tmovie_idx\030\002 \001(\005\"l\n\036"
    "ViewerControllerROIListRequest\0227\n\021viewer"
    "_controller\030\001 \001(\0132\034.osirixgrpc.ViewerCon"
    "troller\022\021\n\tmovie_idx\030\002 \001(\005\"\313\005\n\035ViewerCon"
    "trollerNewROIRequest\0227\n\021viewer_controlle"
    "r\030\001 \001(\0132\034.osirixgrpc.ViewerController\022\r\n"
    "\005itype\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\020\n\010position\030\004"
    " \001(\005\022\021\n\tmovie_idx\030\005 \001(\005\022\031\n\021buffer_positi"
    "on_x\030\006 \001(\005\022\031\n\021buffer_position_y\030\007 \001(\005\022>\n"
    "\005color\030\010 \001(\0132/.osirixgrpc.ViewerControll"
    "erNewROIRequest.Color\022\021\n\tthickness\030\t \001(\002"
    "\022\017\n\007opacity\030\n \001(\002\022@\n\006buffer\030\013 \001(\01320.osir"
    "ixgrpc.ViewerControllerNewROIRequest.Buf"
    "fer\022A\n\006points\030\014 \003(\01321.osirixgrpc.ViewerC"
    "ontrollerNewROIRequest.Point2D\022A\n\trectan"
    "gle\030\r \001(\0132..osirixgrpc.ViewerControllerN"
    "ewROIRequest.Rect\0327\n\006Buffer\022\016\n\006buffer\030\001 "
    "\003(\010\022\014\n\004rows\030\002 \001(\005\022\017\n\007columns\030\003 \001(\005\032\037\n\007Po"
    "int2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\032(\n\005Color\022\t\n\001"
    "r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\032I\n\004Rect\022\020\n"
    "\010origin_x\030\001 \001(\002\022\020\n\010origin_y\030\002 \001(\002\022\016\n\006hei"
    "ght\030\003 \001(\002\022\r\n\005width\030\004 \001(\002\"\216\001\n#ViewerContr"
    "ollerROIsWithNameRequest\0227\n\021viewer_contr"
    "oller\030\001 \001(\0132\034.osirixgrpc.ViewerControlle"
    "r\022\014\n\004name\030\002 \001(\t\022\021\n\tmovie_idx\030\003 \001(\005\022\r\n\005in"
    "_4d\030\004 \001(\010\"\251\001\n/ViewerControllerResampleVi"
    "ewerControllerRequest\0227\n\021viewer_controll"
    "er\030\001 \001(\0132\034.osirixgrpc.ViewerController\022="
    "\n\027fixed_viewer_controller\030\002 \001(\0132\034.osirix"
    "grpc.ViewerController\"q\n\'ViewerControlle"
    "rCopyViewerWindowRequest\0227\n\021viewer_contr"
    "oller\030\001 \001(\0132\034.osirixgrpc.ViewerControlle"
    "r\022\r\n\005in_4d\030\002 \001(\010\"p\n\"ViewerControllerSetM"
    "ovieIdxRequest\0227\n\021viewer_controller\030\001 \001("
    "\0132\034.osirixgrpc.ViewerController\022\021\n\tmovie"
    "_idx\030\002 \001(\005\"n\n$ViewerControllerIsDataVolu"
    "micRequest\0227\n\021viewer_controller\030\001 \001(\0132\034."
    "osirixgrpc.ViewerController\022\r\n\005in_4d\030\002 \001"
    "(\010\"e\n\035ViewerControllerSetIdxRequest\0227\n\021v"
    "iewer_controller\030\001 \001(\0132\034.osirixgrpc.View"
    "erController\022\013\n\003idx\030\002 \001(\005\"q\n\036ViewerContr"
    "ollerSetWLWWRequest\0227\n\021viewer_controller"
    "\030\001 \001(\0132\034.osirixgrpc.ViewerController\022\n\n\002"
    "wl\030\002 \001(\002\022\n\n\002ww\030\003 \001(\002\"s\n*ViewerController"
    "OpenVRViewerForModeRequest\0227\n\021viewer_con"
    "troller\030\001 \001(\0132\034.osirixgrpc.ViewerControl"
    "ler\022\014\n\004mode\030\002 \001(\tb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_viewercontroller_2eproto_deps[2] =
    {
        &::descriptor_table_types_2eproto,
        &::descriptor_table_utilities_2eproto,
};
static ::absl::once_flag descriptor_table_viewercontroller_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_viewercontroller_2eproto = {
    false,
    false,
    3745,
    descriptor_table_protodef_viewercontroller_2eproto,
    "viewercontroller.proto",
    &descriptor_table_viewercontroller_2eproto_once,
    descriptor_table_viewercontroller_2eproto_deps,
    2,
    32,
    schemas,
    file_default_instances,
    TableStruct_viewercontroller_2eproto::offsets,
    file_level_metadata_viewercontroller_2eproto,
    file_level_enum_descriptors_viewercontroller_2eproto,
    file_level_service_descriptors_viewercontroller_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_viewercontroller_2eproto_getter() {
  return &descriptor_table_viewercontroller_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_viewercontroller_2eproto(&descriptor_table_viewercontroller_2eproto);
namespace osirixgrpc {
// ===================================================================

class ViewerControllerPixListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerPixListResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerPixListResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerPixListResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerPixListResponse::_Internal::status(const ViewerControllerPixListResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerPixListResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerPixListResponse::clear_pix() {
  _internal_mutable_pix()->Clear();
}
ViewerControllerPixListResponse::ViewerControllerPixListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerPixListResponse)
}
ViewerControllerPixListResponse::ViewerControllerPixListResponse(const ViewerControllerPixListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerPixListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){from._impl_.pix_}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerPixListResponse)
}

inline void ViewerControllerPixListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pix_){arena}
    , decltype(_impl_.status_){nullptr}
  };
}

ViewerControllerPixListResponse::~ViewerControllerPixListResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerPixListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerPixListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_pix()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerPixListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerPixListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerPixListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pix()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerPixListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .osirixgrpc.DCMPix pix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerPixListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerPixListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .osirixgrpc.DCMPix pix = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pix_size()); i < n; i++) {
    const auto& repfield = this->_internal_pix(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerPixListResponse)
  return target;
}

::size_t ViewerControllerPixListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerPixListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.DCMPix pix = 2;
  total_size += 1UL * this->_internal_pix_size();
  for (const auto& msg : this->_internal_pix()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerPixListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerPixListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerPixListResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerPixListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerPixListResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerPixListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerPixListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pix()->MergeFrom(from._internal_pix());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerPixListResponse::CopyFrom(const ViewerControllerPixListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerPixListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerPixListResponse::IsInitialized() const {
  return true;
}

void ViewerControllerPixListResponse::InternalSwap(ViewerControllerPixListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_pix()->InternalSwap(other->_internal_mutable_pix());
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerPixListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[0]);
}
// ===================================================================

class ViewerControllerROIListResponse_ROISlice::_Internal {
 public:
};

void ViewerControllerROIListResponse_ROISlice::clear_rois() {
  _internal_mutable_rois()->Clear();
}
ViewerControllerROIListResponse_ROISlice::ViewerControllerROIListResponse_ROISlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
}
ViewerControllerROIListResponse_ROISlice::ViewerControllerROIListResponse_ROISlice(const ViewerControllerROIListResponse_ROISlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerROIListResponse_ROISlice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rois_){from._impl_.rois_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
}

inline void ViewerControllerROIListResponse_ROISlice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rois_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ViewerControllerROIListResponse_ROISlice::~ViewerControllerROIListResponse_ROISlice() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerROIListResponse_ROISlice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rois()->~RepeatedPtrField();
}

void ViewerControllerROIListResponse_ROISlice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerROIListResponse_ROISlice::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rois()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerROIListResponse_ROISlice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osirixgrpc.ROI rois = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rois(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerROIListResponse_ROISlice::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osirixgrpc.ROI rois = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rois_size()); i < n; i++) {
    const auto& repfield = this->_internal_rois(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  return target;
}

::size_t ViewerControllerROIListResponse_ROISlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.ROI rois = 1;
  total_size += 1UL * this->_internal_rois_size();
  for (const auto& msg : this->_internal_rois()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerROIListResponse_ROISlice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerROIListResponse_ROISlice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerROIListResponse_ROISlice::GetClassData() const { return &_class_data_; }


void ViewerControllerROIListResponse_ROISlice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerROIListResponse_ROISlice*>(&to_msg);
  auto& from = static_cast<const ViewerControllerROIListResponse_ROISlice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rois()->MergeFrom(from._internal_rois());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerROIListResponse_ROISlice::CopyFrom(const ViewerControllerROIListResponse_ROISlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerROIListResponse.ROISlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerROIListResponse_ROISlice::IsInitialized() const {
  return true;
}

void ViewerControllerROIListResponse_ROISlice::InternalSwap(ViewerControllerROIListResponse_ROISlice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rois()->InternalSwap(other->_internal_mutable_rois());
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerROIListResponse_ROISlice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[1]);
}
// ===================================================================

class ViewerControllerROIListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerROIListResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerROIListResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerROIListResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerROIListResponse::_Internal::status(const ViewerControllerROIListResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerROIListResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerROIListResponse::ViewerControllerROIListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerROIListResponse)
}
ViewerControllerROIListResponse::ViewerControllerROIListResponse(const ViewerControllerROIListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerROIListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_slices_){from._impl_.roi_slices_}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerROIListResponse)
}

inline void ViewerControllerROIListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_slices_){arena}
    , decltype(_impl_.status_){nullptr}
  };
}

ViewerControllerROIListResponse::~ViewerControllerROIListResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerROIListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerROIListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_roi_slices()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerROIListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerROIListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerROIListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_roi_slices()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerROIListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .osirixgrpc.ViewerControllerROIListResponse.ROISlice roi_slices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roi_slices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerROIListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerROIListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .osirixgrpc.ViewerControllerROIListResponse.ROISlice roi_slices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roi_slices_size()); i < n; i++) {
    const auto& repfield = this->_internal_roi_slices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerROIListResponse)
  return target;
}

::size_t ViewerControllerROIListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerROIListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.ViewerControllerROIListResponse.ROISlice roi_slices = 2;
  total_size += 1UL * this->_internal_roi_slices_size();
  for (const auto& msg : this->_internal_roi_slices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerROIListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerROIListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerROIListResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerROIListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerROIListResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerROIListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerROIListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_roi_slices()->MergeFrom(from._internal_roi_slices());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerROIListResponse::CopyFrom(const ViewerControllerROIListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerROIListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerROIListResponse::IsInitialized() const {
  return true;
}

void ViewerControllerROIListResponse::InternalSwap(ViewerControllerROIListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_roi_slices()->InternalSwap(other->_internal_mutable_roi_slices());
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerROIListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[2]);
}
// ===================================================================

class ViewerControllerNewROIResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerNewROIResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerNewROIResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ROI& roi(const ViewerControllerNewROIResponse* msg);
  static void set_has_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerNewROIResponse::_Internal::status(const ViewerControllerNewROIResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::ROI&
ViewerControllerNewROIResponse::_Internal::roi(const ViewerControllerNewROIResponse* msg) {
  return *msg->_impl_.roi_;
}
void ViewerControllerNewROIResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerNewROIResponse::clear_roi() {
  if (_impl_.roi_ != nullptr) _impl_.roi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewerControllerNewROIResponse::ViewerControllerNewROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerNewROIResponse)
}
ViewerControllerNewROIResponse::ViewerControllerNewROIResponse(const ViewerControllerNewROIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerNewROIResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.roi_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.roi_ = new ::osirixgrpc::ROI(*from._impl_.roi_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerNewROIResponse)
}

inline void ViewerControllerNewROIResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.roi_){nullptr}
  };
}

ViewerControllerNewROIResponse::~ViewerControllerNewROIResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerNewROIResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerNewROIResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.roi_;
}

void ViewerControllerNewROIResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerNewROIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerNewROIResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.roi_ != nullptr);
      _impl_.roi_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerNewROIResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerNewROIResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerNewROIResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roi(this),
        _Internal::roi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerNewROIResponse)
  return target;
}

::size_t ViewerControllerNewROIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerNewROIResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.ROI roi = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roi_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerNewROIResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerNewROIResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerNewROIResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerNewROIResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerNewROIResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerNewROIResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerNewROIResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(
          from._internal_roi());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerNewROIResponse::CopyFrom(const ViewerControllerNewROIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerNewROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerNewROIResponse::IsInitialized() const {
  return true;
}

void ViewerControllerNewROIResponse::InternalSwap(ViewerControllerNewROIResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIResponse, _impl_.roi_)
      + sizeof(ViewerControllerNewROIResponse::_impl_.roi_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerNewROIResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[3]);
}
// ===================================================================

class ViewerControllerCurDCMResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerCurDCMResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerCurDCMResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerCurDCMResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::DCMPix& pix(const ViewerControllerCurDCMResponse* msg);
  static void set_has_pix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerCurDCMResponse::_Internal::status(const ViewerControllerCurDCMResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::DCMPix&
ViewerControllerCurDCMResponse::_Internal::pix(const ViewerControllerCurDCMResponse* msg) {
  return *msg->_impl_.pix_;
}
void ViewerControllerCurDCMResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerCurDCMResponse::clear_pix() {
  if (_impl_.pix_ != nullptr) _impl_.pix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewerControllerCurDCMResponse::ViewerControllerCurDCMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerCurDCMResponse)
}
ViewerControllerCurDCMResponse::ViewerControllerCurDCMResponse(const ViewerControllerCurDCMResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerCurDCMResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pix_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.pix_ = new ::osirixgrpc::DCMPix(*from._impl_.pix_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerCurDCMResponse)
}

inline void ViewerControllerCurDCMResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pix_){nullptr}
  };
}

ViewerControllerCurDCMResponse::~ViewerControllerCurDCMResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerCurDCMResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerCurDCMResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.pix_;
}

void ViewerControllerCurDCMResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerCurDCMResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerCurDCMResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pix_ != nullptr);
      _impl_.pix_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerCurDCMResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.DCMPix pix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerCurDCMResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerCurDCMResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.DCMPix pix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pix(this),
        _Internal::pix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerCurDCMResponse)
  return target;
}

::size_t ViewerControllerCurDCMResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerCurDCMResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.DCMPix pix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pix_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerCurDCMResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerCurDCMResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerCurDCMResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerCurDCMResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerCurDCMResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerCurDCMResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerCurDCMResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(
          from._internal_pix());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerCurDCMResponse::CopyFrom(const ViewerControllerCurDCMResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerCurDCMResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerCurDCMResponse::IsInitialized() const {
  return true;
}

void ViewerControllerCurDCMResponse::InternalSwap(ViewerControllerCurDCMResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerCurDCMResponse, _impl_.pix_)
      + sizeof(ViewerControllerCurDCMResponse::_impl_.pix_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerCurDCMResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerCurDCMResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[4]);
}
// ===================================================================

class ViewerControllerROIsWithNameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerROIsWithNameResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerROIsWithNameResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerROIsWithNameResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerROIsWithNameResponse::_Internal::status(const ViewerControllerROIsWithNameResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerROIsWithNameResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerROIsWithNameResponse::clear_rois() {
  _internal_mutable_rois()->Clear();
}
ViewerControllerROIsWithNameResponse::ViewerControllerROIsWithNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerROIsWithNameResponse)
}
ViewerControllerROIsWithNameResponse::ViewerControllerROIsWithNameResponse(const ViewerControllerROIsWithNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerROIsWithNameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rois_){from._impl_.rois_}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerROIsWithNameResponse)
}

inline void ViewerControllerROIsWithNameResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rois_){arena}
    , decltype(_impl_.status_){nullptr}
  };
}

ViewerControllerROIsWithNameResponse::~ViewerControllerROIsWithNameResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerROIsWithNameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerROIsWithNameResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rois()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerROIsWithNameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerROIsWithNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerROIsWithNameResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rois()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerROIsWithNameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .osirixgrpc.ROI rois = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rois(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerROIsWithNameResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerROIsWithNameResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .osirixgrpc.ROI rois = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rois_size()); i < n; i++) {
    const auto& repfield = this->_internal_rois(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerROIsWithNameResponse)
  return target;
}

::size_t ViewerControllerROIsWithNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerROIsWithNameResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.ROI rois = 2;
  total_size += 1UL * this->_internal_rois_size();
  for (const auto& msg : this->_internal_rois()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerROIsWithNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerROIsWithNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerROIsWithNameResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerROIsWithNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerROIsWithNameResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerROIsWithNameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerROIsWithNameResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rois()->MergeFrom(from._internal_rois());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerROIsWithNameResponse::CopyFrom(const ViewerControllerROIsWithNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerROIsWithNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerROIsWithNameResponse::IsInitialized() const {
  return true;
}

void ViewerControllerROIsWithNameResponse::InternalSwap(ViewerControllerROIsWithNameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_rois()->InternalSwap(other->_internal_mutable_rois());
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerROIsWithNameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[5]);
}
// ===================================================================

class ViewerControllerSelectedROIsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerSelectedROIsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerSelectedROIsResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerSelectedROIsResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerSelectedROIsResponse::_Internal::status(const ViewerControllerSelectedROIsResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerSelectedROIsResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerSelectedROIsResponse::clear_rois() {
  _internal_mutable_rois()->Clear();
}
ViewerControllerSelectedROIsResponse::ViewerControllerSelectedROIsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerSelectedROIsResponse)
}
ViewerControllerSelectedROIsResponse::ViewerControllerSelectedROIsResponse(const ViewerControllerSelectedROIsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerSelectedROIsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rois_){from._impl_.rois_}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerSelectedROIsResponse)
}

inline void ViewerControllerSelectedROIsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rois_){arena}
    , decltype(_impl_.status_){nullptr}
  };
}

ViewerControllerSelectedROIsResponse::~ViewerControllerSelectedROIsResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerSelectedROIsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerSelectedROIsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rois()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerSelectedROIsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerSelectedROIsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerSelectedROIsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rois()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerSelectedROIsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .osirixgrpc.ROI rois = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rois(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerSelectedROIsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerSelectedROIsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .osirixgrpc.ROI rois = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rois_size()); i < n; i++) {
    const auto& repfield = this->_internal_rois(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerSelectedROIsResponse)
  return target;
}

::size_t ViewerControllerSelectedROIsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerSelectedROIsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.ROI rois = 2;
  total_size += 1UL * this->_internal_rois_size();
  for (const auto& msg : this->_internal_rois()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerSelectedROIsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerSelectedROIsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerSelectedROIsResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerSelectedROIsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerSelectedROIsResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerSelectedROIsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerSelectedROIsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rois()->MergeFrom(from._internal_rois());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerSelectedROIsResponse::CopyFrom(const ViewerControllerSelectedROIsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerSelectedROIsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerSelectedROIsResponse::IsInitialized() const {
  return true;
}

void ViewerControllerSelectedROIsResponse::InternalSwap(ViewerControllerSelectedROIsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_rois()->InternalSwap(other->_internal_mutable_rois());
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerSelectedROIsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[6]);
}
// ===================================================================

class ViewerControllerIsDataVolumicResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerIsDataVolumicResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerIsDataVolumicResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerIsDataVolumicResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerIsDataVolumicResponse::_Internal::status(const ViewerControllerIsDataVolumicResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerIsDataVolumicResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerIsDataVolumicResponse::ViewerControllerIsDataVolumicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerIsDataVolumicResponse)
}
ViewerControllerIsDataVolumicResponse::ViewerControllerIsDataVolumicResponse(const ViewerControllerIsDataVolumicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerIsDataVolumicResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.is_volumic_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  _this->_impl_.is_volumic_ = from._impl_.is_volumic_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerIsDataVolumicResponse)
}

inline void ViewerControllerIsDataVolumicResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.is_volumic_) { false }

  };
}

ViewerControllerIsDataVolumicResponse::~ViewerControllerIsDataVolumicResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerIsDataVolumicResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerIsDataVolumicResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerIsDataVolumicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.is_volumic_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerIsDataVolumicResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_volumic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_volumic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerIsDataVolumicResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool is_volumic = 2;
  if (this->_internal_is_volumic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_volumic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  return target;
}

::size_t ViewerControllerIsDataVolumicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool is_volumic = 2;
  if (this->_internal_is_volumic() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerIsDataVolumicResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerIsDataVolumicResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerIsDataVolumicResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerIsDataVolumicResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerIsDataVolumicResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerIsDataVolumicResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_is_volumic() != 0) {
    _this->_internal_set_is_volumic(from._internal_is_volumic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerIsDataVolumicResponse::CopyFrom(const ViewerControllerIsDataVolumicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerIsDataVolumicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerIsDataVolumicResponse::IsInitialized() const {
  return true;
}

void ViewerControllerIsDataVolumicResponse::InternalSwap(ViewerControllerIsDataVolumicResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerIsDataVolumicResponse, _impl_.is_volumic_)
      + sizeof(ViewerControllerIsDataVolumicResponse::_impl_.is_volumic_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerIsDataVolumicResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerIsDataVolumicResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[7]);
}
// ===================================================================

class ViewerControllerBlendingControllerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerBlendingControllerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerBlendingControllerResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerBlendingControllerResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ViewerController& blending_viewer(const ViewerControllerBlendingControllerResponse* msg);
  static void set_has_blending_viewer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerBlendingControllerResponse::_Internal::status(const ViewerControllerBlendingControllerResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::ViewerController&
ViewerControllerBlendingControllerResponse::_Internal::blending_viewer(const ViewerControllerBlendingControllerResponse* msg) {
  return *msg->_impl_.blending_viewer_;
}
void ViewerControllerBlendingControllerResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerBlendingControllerResponse::clear_blending_viewer() {
  if (_impl_.blending_viewer_ != nullptr) _impl_.blending_viewer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewerControllerBlendingControllerResponse::ViewerControllerBlendingControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerBlendingControllerResponse)
}
ViewerControllerBlendingControllerResponse::ViewerControllerBlendingControllerResponse(const ViewerControllerBlendingControllerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerBlendingControllerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.blending_viewer_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_viewer_ = new ::osirixgrpc::ViewerController(*from._impl_.blending_viewer_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerBlendingControllerResponse)
}

inline void ViewerControllerBlendingControllerResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.blending_viewer_){nullptr}
  };
}

ViewerControllerBlendingControllerResponse::~ViewerControllerBlendingControllerResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerBlendingControllerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerBlendingControllerResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.blending_viewer_;
}

void ViewerControllerBlendingControllerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerBlendingControllerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerBlendingControllerResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_viewer_ != nullptr);
      _impl_.blending_viewer_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerBlendingControllerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ViewerController blending_viewer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blending_viewer(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerBlendingControllerResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerBlendingControllerResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ViewerController blending_viewer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending_viewer(this),
        _Internal::blending_viewer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerBlendingControllerResponse)
  return target;
}

::size_t ViewerControllerBlendingControllerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerBlendingControllerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.ViewerController blending_viewer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.blending_viewer_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerBlendingControllerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerBlendingControllerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerBlendingControllerResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerBlendingControllerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerBlendingControllerResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerBlendingControllerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerBlendingControllerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending_viewer()->::osirixgrpc::ViewerController::MergeFrom(
          from._internal_blending_viewer());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerBlendingControllerResponse::CopyFrom(const ViewerControllerBlendingControllerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerBlendingControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerBlendingControllerResponse::IsInitialized() const {
  return true;
}

void ViewerControllerBlendingControllerResponse::InternalSwap(ViewerControllerBlendingControllerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerBlendingControllerResponse, _impl_.blending_viewer_)
      + sizeof(ViewerControllerBlendingControllerResponse::_impl_.blending_viewer_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerBlendingControllerResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerBlendingControllerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[8]);
}
// ===================================================================

class ViewerControllerVRControllersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerVRControllersResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerVRControllersResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerVRControllersResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerVRControllersResponse::_Internal::status(const ViewerControllerVRControllersResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerVRControllersResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerVRControllersResponse::clear_vr_controllers() {
  _internal_mutable_vr_controllers()->Clear();
}
ViewerControllerVRControllersResponse::ViewerControllerVRControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerVRControllersResponse)
}
ViewerControllerVRControllersResponse::ViewerControllerVRControllersResponse(const ViewerControllerVRControllersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerVRControllersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vr_controllers_){from._impl_.vr_controllers_}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerVRControllersResponse)
}

inline void ViewerControllerVRControllersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vr_controllers_){arena}
    , decltype(_impl_.status_){nullptr}
  };
}

ViewerControllerVRControllersResponse::~ViewerControllerVRControllersResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerVRControllersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerVRControllersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_vr_controllers()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerVRControllersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerVRControllersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerVRControllersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vr_controllers()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerVRControllersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .osirixgrpc.VRController vr_controllers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vr_controllers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerVRControllersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerVRControllersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .osirixgrpc.VRController vr_controllers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vr_controllers_size()); i < n; i++) {
    const auto& repfield = this->_internal_vr_controllers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerVRControllersResponse)
  return target;
}

::size_t ViewerControllerVRControllersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerVRControllersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.VRController vr_controllers = 2;
  total_size += 1UL * this->_internal_vr_controllers_size();
  for (const auto& msg : this->_internal_vr_controllers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerVRControllersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerVRControllersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerVRControllersResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerVRControllersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerVRControllersResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerVRControllersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerVRControllersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vr_controllers()->MergeFrom(from._internal_vr_controllers());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerVRControllersResponse::CopyFrom(const ViewerControllerVRControllersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerVRControllersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerVRControllersResponse::IsInitialized() const {
  return true;
}

void ViewerControllerVRControllersResponse::InternalSwap(ViewerControllerVRControllersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_vr_controllers()->InternalSwap(other->_internal_mutable_vr_controllers());
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerVRControllersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[9]);
}
// ===================================================================

class ViewerControllerTitleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerTitleResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerTitleResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerTitleResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerTitleResponse::_Internal::status(const ViewerControllerTitleResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerTitleResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerTitleResponse::ViewerControllerTitleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerTitleResponse)
}
ViewerControllerTitleResponse::ViewerControllerTitleResponse(const ViewerControllerTitleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerTitleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerTitleResponse)
}

inline void ViewerControllerTitleResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.status_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewerControllerTitleResponse::~ViewerControllerTitleResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerTitleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerTitleResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerTitleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerTitleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerTitleResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerTitleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "osirixgrpc.ViewerControllerTitleResponse.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerTitleResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerTitleResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "osirixgrpc.ViewerControllerTitleResponse.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerTitleResponse)
  return target;
}

::size_t ViewerControllerTitleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerTitleResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerTitleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerTitleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerTitleResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerTitleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerTitleResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerTitleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerTitleResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerTitleResponse::CopyFrom(const ViewerControllerTitleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerTitleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerTitleResponse::IsInitialized() const {
  return true;
}

void ViewerControllerTitleResponse::InternalSwap(ViewerControllerTitleResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerTitleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[10]);
}
// ===================================================================

class ViewerControllerModalityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerModalityResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerModalityResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerModalityResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerModalityResponse::_Internal::status(const ViewerControllerModalityResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerModalityResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerModalityResponse::ViewerControllerModalityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerModalityResponse)
}
ViewerControllerModalityResponse::ViewerControllerModalityResponse(const ViewerControllerModalityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerModalityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modality_) {}

    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modality_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modality().empty()) {
    _this->_impl_.modality_.Set(from._internal_modality(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerModalityResponse)
}

inline void ViewerControllerModalityResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modality_) {}

    , decltype(_impl_.status_){nullptr}
  };
  _impl_.modality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modality_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewerControllerModalityResponse::~ViewerControllerModalityResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerModalityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerModalityResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modality_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerModalityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerModalityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerModalityResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modality_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerModalityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string modality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_modality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "osirixgrpc.ViewerControllerModalityResponse.modality"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerModalityResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerModalityResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string modality = 2;
  if (!this->_internal_modality().empty()) {
    const std::string& _s = this->_internal_modality();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "osirixgrpc.ViewerControllerModalityResponse.modality");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerModalityResponse)
  return target;
}

::size_t ViewerControllerModalityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerModalityResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modality = 2;
  if (!this->_internal_modality().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_modality());
  }

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerModalityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerModalityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerModalityResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerModalityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerModalityResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerModalityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerModalityResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modality().empty()) {
    _this->_internal_set_modality(from._internal_modality());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerModalityResponse::CopyFrom(const ViewerControllerModalityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerModalityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerModalityResponse::IsInitialized() const {
  return true;
}

void ViewerControllerModalityResponse::InternalSwap(ViewerControllerModalityResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modality_, lhs_arena,
                                       &other->_impl_.modality_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerModalityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[11]);
}
// ===================================================================

class ViewerControllerMovieIdxResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerMovieIdxResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerMovieIdxResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerMovieIdxResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerMovieIdxResponse::_Internal::status(const ViewerControllerMovieIdxResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerMovieIdxResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerMovieIdxResponse::ViewerControllerMovieIdxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerMovieIdxResponse)
}
ViewerControllerMovieIdxResponse::ViewerControllerMovieIdxResponse(const ViewerControllerMovieIdxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerMovieIdxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.movie_idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  _this->_impl_.movie_idx_ = from._impl_.movie_idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerMovieIdxResponse)
}

inline void ViewerControllerMovieIdxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.movie_idx_) { 0 }

  };
}

ViewerControllerMovieIdxResponse::~ViewerControllerMovieIdxResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerMovieIdxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerMovieIdxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerMovieIdxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerMovieIdxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerMovieIdxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.movie_idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerMovieIdxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 movie_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerMovieIdxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerMovieIdxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_movie_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerMovieIdxResponse)
  return target;
}

::size_t ViewerControllerMovieIdxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerMovieIdxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_movie_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerMovieIdxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerMovieIdxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerMovieIdxResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerMovieIdxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerMovieIdxResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerMovieIdxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerMovieIdxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_movie_idx() != 0) {
    _this->_internal_set_movie_idx(from._internal_movie_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerMovieIdxResponse::CopyFrom(const ViewerControllerMovieIdxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerMovieIdxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerMovieIdxResponse::IsInitialized() const {
  return true;
}

void ViewerControllerMovieIdxResponse::InternalSwap(ViewerControllerMovieIdxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerMovieIdxResponse, _impl_.movie_idx_)
      + sizeof(ViewerControllerMovieIdxResponse::_impl_.movie_idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerMovieIdxResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerMovieIdxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[12]);
}
// ===================================================================

class ViewerControllerMaxMovieIdxResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerMaxMovieIdxResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerMaxMovieIdxResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerMaxMovieIdxResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerMaxMovieIdxResponse::_Internal::status(const ViewerControllerMaxMovieIdxResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerMaxMovieIdxResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerMaxMovieIdxResponse::ViewerControllerMaxMovieIdxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
}
ViewerControllerMaxMovieIdxResponse::ViewerControllerMaxMovieIdxResponse(const ViewerControllerMaxMovieIdxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerMaxMovieIdxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.max_movie_idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  _this->_impl_.max_movie_idx_ = from._impl_.max_movie_idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
}

inline void ViewerControllerMaxMovieIdxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.max_movie_idx_) { 0 }

  };
}

ViewerControllerMaxMovieIdxResponse::~ViewerControllerMaxMovieIdxResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerMaxMovieIdxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerMaxMovieIdxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerMaxMovieIdxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.max_movie_idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerMaxMovieIdxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 max_movie_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerMaxMovieIdxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 max_movie_idx = 2;
  if (this->_internal_max_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_max_movie_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  return target;
}

::size_t ViewerControllerMaxMovieIdxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 max_movie_idx = 2;
  if (this->_internal_max_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_movie_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerMaxMovieIdxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerMaxMovieIdxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerMaxMovieIdxResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerMaxMovieIdxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerMaxMovieIdxResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerMaxMovieIdxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_max_movie_idx() != 0) {
    _this->_internal_set_max_movie_idx(from._internal_max_movie_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerMaxMovieIdxResponse::CopyFrom(const ViewerControllerMaxMovieIdxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerMaxMovieIdxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerMaxMovieIdxResponse::IsInitialized() const {
  return true;
}

void ViewerControllerMaxMovieIdxResponse::InternalSwap(ViewerControllerMaxMovieIdxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerMaxMovieIdxResponse, _impl_.max_movie_idx_)
      + sizeof(ViewerControllerMaxMovieIdxResponse::_impl_.max_movie_idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerMaxMovieIdxResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerMaxMovieIdxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[13]);
}
// ===================================================================

class ViewerControllerIdxResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerIdxResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerIdxResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerIdxResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerIdxResponse::_Internal::status(const ViewerControllerIdxResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerIdxResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerIdxResponse::ViewerControllerIdxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerIdxResponse)
}
ViewerControllerIdxResponse::ViewerControllerIdxResponse(const ViewerControllerIdxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerIdxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  _this->_impl_.idx_ = from._impl_.idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerIdxResponse)
}

inline void ViewerControllerIdxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.idx_) { 0 }

  };
}

ViewerControllerIdxResponse::~ViewerControllerIdxResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerIdxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerIdxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerIdxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerIdxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerIdxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerIdxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerIdxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerIdxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 idx = 2;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerIdxResponse)
  return target;
}

::size_t ViewerControllerIdxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerIdxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 idx = 2;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerIdxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerIdxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerIdxResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerIdxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerIdxResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerIdxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerIdxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerIdxResponse::CopyFrom(const ViewerControllerIdxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerIdxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerIdxResponse::IsInitialized() const {
  return true;
}

void ViewerControllerIdxResponse::InternalSwap(ViewerControllerIdxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerIdxResponse, _impl_.idx_)
      + sizeof(ViewerControllerIdxResponse::_impl_.idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerIdxResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerIdxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[14]);
}
// ===================================================================

class ViewerControllerWLWWResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerWLWWResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerWLWWResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerWLWWResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerWLWWResponse::_Internal::status(const ViewerControllerWLWWResponse* msg) {
  return *msg->_impl_.status_;
}
void ViewerControllerWLWWResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerWLWWResponse::ViewerControllerWLWWResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerWLWWResponse)
}
ViewerControllerWLWWResponse::ViewerControllerWLWWResponse(const ViewerControllerWLWWResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerWLWWResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.wl_) {}

    , decltype(_impl_.ww_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.wl_, &from._impl_.wl_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ww_) -
    reinterpret_cast<char*>(&_impl_.wl_)) + sizeof(_impl_.ww_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerWLWWResponse)
}

inline void ViewerControllerWLWWResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.wl_) { 0 }

    , decltype(_impl_.ww_) { 0 }

  };
}

ViewerControllerWLWWResponse::~ViewerControllerWLWWResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerWLWWResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerWLWWResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ViewerControllerWLWWResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerWLWWResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerWLWWResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  ::memset(&_impl_.wl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ww_) -
      reinterpret_cast<char*>(&_impl_.wl_)) + sizeof(_impl_.ww_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerWLWWResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float wl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.wl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float ww = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.ww_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerWLWWResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerWLWWResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // float wl = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wl = this->_internal_wl();
  ::uint32_t raw_wl;
  memcpy(&raw_wl, &tmp_wl, sizeof(tmp_wl));
  if (raw_wl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_wl(), target);
  }

  // float ww = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_ww = this->_internal_ww();
  ::uint32_t raw_ww;
  memcpy(&raw_ww, &tmp_ww, sizeof(tmp_ww));
  if (raw_ww != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_ww(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerWLWWResponse)
  return target;
}

::size_t ViewerControllerWLWWResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerWLWWResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // float wl = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wl = this->_internal_wl();
  ::uint32_t raw_wl;
  memcpy(&raw_wl, &tmp_wl, sizeof(tmp_wl));
  if (raw_wl != 0) {
    total_size += 5;
  }

  // float ww = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_ww = this->_internal_ww();
  ::uint32_t raw_ww;
  memcpy(&raw_ww, &tmp_ww, sizeof(tmp_ww));
  if (raw_ww != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerWLWWResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerWLWWResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerWLWWResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerWLWWResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerWLWWResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerWLWWResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerWLWWResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
        from._internal_status());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wl = from._internal_wl();
  ::uint32_t raw_wl;
  memcpy(&raw_wl, &tmp_wl, sizeof(tmp_wl));
  if (raw_wl != 0) {
    _this->_internal_set_wl(from._internal_wl());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_ww = from._internal_ww();
  ::uint32_t raw_ww;
  memcpy(&raw_ww, &tmp_ww, sizeof(tmp_ww));
  if (raw_ww != 0) {
    _this->_internal_set_ww(from._internal_ww());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerWLWWResponse::CopyFrom(const ViewerControllerWLWWResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerWLWWResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerWLWWResponse::IsInitialized() const {
  return true;
}

void ViewerControllerWLWWResponse::InternalSwap(ViewerControllerWLWWResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerWLWWResponse, _impl_.ww_)
      + sizeof(ViewerControllerWLWWResponse::_impl_.ww_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerWLWWResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerWLWWResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[15]);
}
// ===================================================================

class ViewerControllerOpenVRViewerForModeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerOpenVRViewerForModeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerOpenVRViewerForModeResponse, _impl_._has_bits_);
  static const ::osirixgrpc::Status& status(const ViewerControllerOpenVRViewerForModeResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::VRController& vr_controller(const ViewerControllerOpenVRViewerForModeResponse* msg);
  static void set_has_vr_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::Status&
ViewerControllerOpenVRViewerForModeResponse::_Internal::status(const ViewerControllerOpenVRViewerForModeResponse* msg) {
  return *msg->_impl_.status_;
}
const ::osirixgrpc::VRController&
ViewerControllerOpenVRViewerForModeResponse::_Internal::vr_controller(const ViewerControllerOpenVRViewerForModeResponse* msg) {
  return *msg->_impl_.vr_controller_;
}
void ViewerControllerOpenVRViewerForModeResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerOpenVRViewerForModeResponse::clear_vr_controller() {
  if (_impl_.vr_controller_ != nullptr) _impl_.vr_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewerControllerOpenVRViewerForModeResponse::ViewerControllerOpenVRViewerForModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
}
ViewerControllerOpenVRViewerForModeResponse::ViewerControllerOpenVRViewerForModeResponse(const ViewerControllerOpenVRViewerForModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerOpenVRViewerForModeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.vr_controller_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.status_ = new ::osirixgrpc::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.vr_controller_ = new ::osirixgrpc::VRController(*from._impl_.vr_controller_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
}

inline void ViewerControllerOpenVRViewerForModeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.vr_controller_){nullptr}
  };
}

ViewerControllerOpenVRViewerForModeResponse::~ViewerControllerOpenVRViewerForModeResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerOpenVRViewerForModeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.vr_controller_;
}

void ViewerControllerOpenVRViewerForModeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerOpenVRViewerForModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.vr_controller_ != nullptr);
      _impl_.vr_controller_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerOpenVRViewerForModeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.VRController vr_controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vr_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerOpenVRViewerForModeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.VRController vr_controller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vr_controller(this),
        _Internal::vr_controller(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  return target;
}

::size_t ViewerControllerOpenVRViewerForModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .osirixgrpc.VRController vr_controller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vr_controller_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerOpenVRViewerForModeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerOpenVRViewerForModeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerOpenVRViewerForModeResponse::GetClassData() const { return &_class_data_; }


void ViewerControllerOpenVRViewerForModeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerOpenVRViewerForModeResponse*>(&to_msg);
  auto& from = static_cast<const ViewerControllerOpenVRViewerForModeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_status()->::osirixgrpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vr_controller()->::osirixgrpc::VRController::MergeFrom(
          from._internal_vr_controller());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerOpenVRViewerForModeResponse::CopyFrom(const ViewerControllerOpenVRViewerForModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerOpenVRViewerForModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerOpenVRViewerForModeResponse::IsInitialized() const {
  return true;
}

void ViewerControllerOpenVRViewerForModeResponse::InternalSwap(ViewerControllerOpenVRViewerForModeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerOpenVRViewerForModeResponse, _impl_.vr_controller_)
      + sizeof(ViewerControllerOpenVRViewerForModeResponse::_impl_.vr_controller_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerOpenVRViewerForModeResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerOpenVRViewerForModeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[16]);
}
// ===================================================================

class ViewerControllerPixListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerPixListRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerPixListRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerPixListRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerPixListRequest::_Internal::viewer_controller(const ViewerControllerPixListRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerPixListRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerPixListRequest::ViewerControllerPixListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerPixListRequest)
}
ViewerControllerPixListRequest::ViewerControllerPixListRequest(const ViewerControllerPixListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerPixListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  _this->_impl_.movie_idx_ = from._impl_.movie_idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerPixListRequest)
}

inline void ViewerControllerPixListRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) { 0 }

  };
}

ViewerControllerPixListRequest::~ViewerControllerPixListRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerPixListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerPixListRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerPixListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerPixListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerPixListRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_.movie_idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerPixListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 movie_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerPixListRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerPixListRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_movie_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerPixListRequest)
  return target;
}

::size_t ViewerControllerPixListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerPixListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_movie_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerPixListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerPixListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerPixListRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerPixListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerPixListRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerPixListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerPixListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_movie_idx() != 0) {
    _this->_internal_set_movie_idx(from._internal_movie_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerPixListRequest::CopyFrom(const ViewerControllerPixListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerPixListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerPixListRequest::IsInitialized() const {
  return true;
}

void ViewerControllerPixListRequest::InternalSwap(ViewerControllerPixListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerPixListRequest, _impl_.movie_idx_)
      + sizeof(ViewerControllerPixListRequest::_impl_.movie_idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerPixListRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerPixListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[17]);
}
// ===================================================================

class ViewerControllerROIListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerROIListRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerROIListRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerROIListRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerROIListRequest::_Internal::viewer_controller(const ViewerControllerROIListRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerROIListRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerROIListRequest::ViewerControllerROIListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerROIListRequest)
}
ViewerControllerROIListRequest::ViewerControllerROIListRequest(const ViewerControllerROIListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerROIListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  _this->_impl_.movie_idx_ = from._impl_.movie_idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerROIListRequest)
}

inline void ViewerControllerROIListRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) { 0 }

  };
}

ViewerControllerROIListRequest::~ViewerControllerROIListRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerROIListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerROIListRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerROIListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerROIListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerROIListRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_.movie_idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerROIListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 movie_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerROIListRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerROIListRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_movie_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerROIListRequest)
  return target;
}

::size_t ViewerControllerROIListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerROIListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_movie_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerROIListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerROIListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerROIListRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerROIListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerROIListRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerROIListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerROIListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_movie_idx() != 0) {
    _this->_internal_set_movie_idx(from._internal_movie_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerROIListRequest::CopyFrom(const ViewerControllerROIListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerROIListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerROIListRequest::IsInitialized() const {
  return true;
}

void ViewerControllerROIListRequest::InternalSwap(ViewerControllerROIListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerROIListRequest, _impl_.movie_idx_)
      + sizeof(ViewerControllerROIListRequest::_impl_.movie_idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerROIListRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerROIListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[18]);
}
// ===================================================================

class ViewerControllerNewROIRequest_Buffer::_Internal {
 public:
};

ViewerControllerNewROIRequest_Buffer::ViewerControllerNewROIRequest_Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
}
ViewerControllerNewROIRequest_Buffer::ViewerControllerNewROIRequest_Buffer(const ViewerControllerNewROIRequest_Buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerNewROIRequest_Buffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buffer_) { from._impl_.buffer_ }

    , decltype(_impl_.rows_) {}

    , decltype(_impl_.columns_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.columns_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
}

inline void ViewerControllerNewROIRequest_Buffer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buffer_) { arena }

    , decltype(_impl_.rows_) { 0 }

    , decltype(_impl_.columns_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ViewerControllerNewROIRequest_Buffer::~ViewerControllerNewROIRequest_Buffer() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerNewROIRequest_Buffer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffer_.~RepeatedField();
}

void ViewerControllerNewROIRequest_Buffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerNewROIRequest_Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buffer()->Clear();
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.columns_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerNewROIRequest_Buffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_buffer(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_buffer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerNewROIRequest_Buffer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool buffer = 1;
  if (this->_internal_buffer_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_buffer(), target);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  return target;
}

::size_t ViewerControllerNewROIRequest_Buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool buffer = 1;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_buffer_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->_internal_columns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_columns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerNewROIRequest_Buffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerNewROIRequest_Buffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerNewROIRequest_Buffer::GetClassData() const { return &_class_data_; }


void ViewerControllerNewROIRequest_Buffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerNewROIRequest_Buffer*>(&to_msg);
  auto& from = static_cast<const ViewerControllerNewROIRequest_Buffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buffer_.MergeFrom(from._impl_.buffer_);
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_columns() != 0) {
    _this->_internal_set_columns(from._internal_columns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerNewROIRequest_Buffer::CopyFrom(const ViewerControllerNewROIRequest_Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerNewROIRequest.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerNewROIRequest_Buffer::IsInitialized() const {
  return true;
}

void ViewerControllerNewROIRequest_Buffer::InternalSwap(ViewerControllerNewROIRequest_Buffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buffer_.InternalSwap(&other->_impl_.buffer_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Buffer, _impl_.columns_)
      + sizeof(ViewerControllerNewROIRequest_Buffer::_impl_.columns_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Buffer, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerNewROIRequest_Buffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[19]);
}
// ===================================================================

class ViewerControllerNewROIRequest_Point2D::_Internal {
 public:
};

ViewerControllerNewROIRequest_Point2D::ViewerControllerNewROIRequest_Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
}
ViewerControllerNewROIRequest_Point2D::ViewerControllerNewROIRequest_Point2D(const ViewerControllerNewROIRequest_Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
}

inline void ViewerControllerNewROIRequest_Point2D::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ViewerControllerNewROIRequest_Point2D::~ViewerControllerNewROIRequest_Point2D() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerNewROIRequest_Point2D::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewerControllerNewROIRequest_Point2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerNewROIRequest_Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerNewROIRequest_Point2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerNewROIRequest_Point2D::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  return target;
}

::size_t ViewerControllerNewROIRequest_Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerNewROIRequest_Point2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerNewROIRequest_Point2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerNewROIRequest_Point2D::GetClassData() const { return &_class_data_; }


void ViewerControllerNewROIRequest_Point2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerNewROIRequest_Point2D*>(&to_msg);
  auto& from = static_cast<const ViewerControllerNewROIRequest_Point2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerNewROIRequest_Point2D::CopyFrom(const ViewerControllerNewROIRequest_Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerNewROIRequest.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerNewROIRequest_Point2D::IsInitialized() const {
  return true;
}

void ViewerControllerNewROIRequest_Point2D::InternalSwap(ViewerControllerNewROIRequest_Point2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Point2D, _impl_.y_)
      + sizeof(ViewerControllerNewROIRequest_Point2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Point2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerNewROIRequest_Point2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[20]);
}
// ===================================================================

class ViewerControllerNewROIRequest_Color::_Internal {
 public:
};

ViewerControllerNewROIRequest_Color::ViewerControllerNewROIRequest_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerNewROIRequest.Color)
}
ViewerControllerNewROIRequest_Color::ViewerControllerNewROIRequest_Color(const ViewerControllerNewROIRequest_Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerNewROIRequest.Color)
}

inline void ViewerControllerNewROIRequest_Color::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.r_) { 0 }

    , decltype(_impl_.g_) { 0 }

    , decltype(_impl_.b_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ViewerControllerNewROIRequest_Color::~ViewerControllerNewROIRequest_Color() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerNewROIRequest.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerNewROIRequest_Color::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewerControllerNewROIRequest_Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerNewROIRequest_Color::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerNewROIRequest.Color)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.b_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerNewROIRequest_Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerNewROIRequest_Color::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerNewROIRequest.Color)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_r(), target);
  }

  // int32 g = 2;
  if (this->_internal_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_g(), target);
  }

  // int32 b = 3;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerNewROIRequest.Color)
  return target;
}

::size_t ViewerControllerNewROIRequest_Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerNewROIRequest.Color)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->_internal_r() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_r());
  }

  // int32 g = 2;
  if (this->_internal_g() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_g());
  }

  // int32 b = 3;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerNewROIRequest_Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerNewROIRequest_Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerNewROIRequest_Color::GetClassData() const { return &_class_data_; }


void ViewerControllerNewROIRequest_Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerNewROIRequest_Color*>(&to_msg);
  auto& from = static_cast<const ViewerControllerNewROIRequest_Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerNewROIRequest.Color)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  if (from._internal_g() != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerNewROIRequest_Color::CopyFrom(const ViewerControllerNewROIRequest_Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerNewROIRequest.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerNewROIRequest_Color::IsInitialized() const {
  return true;
}

void ViewerControllerNewROIRequest_Color::InternalSwap(ViewerControllerNewROIRequest_Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Color, _impl_.b_)
      + sizeof(ViewerControllerNewROIRequest_Color::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Color, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerNewROIRequest_Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[21]);
}
// ===================================================================

class ViewerControllerNewROIRequest_Rect::_Internal {
 public:
};

ViewerControllerNewROIRequest_Rect::ViewerControllerNewROIRequest_Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerNewROIRequest.Rect)
}
ViewerControllerNewROIRequest_Rect::ViewerControllerNewROIRequest_Rect(const ViewerControllerNewROIRequest_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerNewROIRequest.Rect)
}

inline void ViewerControllerNewROIRequest_Rect::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_x_) { 0 }

    , decltype(_impl_.origin_y_) { 0 }

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.width_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ViewerControllerNewROIRequest_Rect::~ViewerControllerNewROIRequest_Rect() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerNewROIRequest_Rect::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewerControllerNewROIRequest_Rect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerNewROIRequest_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.origin_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.width_) -
      reinterpret_cast<char*>(&_impl_.origin_x_)) + sizeof(_impl_.width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerNewROIRequest_Rect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float origin_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float origin_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerNewROIRequest_Rect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float origin_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_x = this->_internal_origin_x();
  ::uint32_t raw_origin_x;
  memcpy(&raw_origin_x, &tmp_origin_x, sizeof(tmp_origin_x));
  if (raw_origin_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_origin_x(), target);
  }

  // float origin_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_y = this->_internal_origin_y();
  ::uint32_t raw_origin_y;
  memcpy(&raw_origin_y, &tmp_origin_y, sizeof(tmp_origin_y));
  if (raw_origin_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_origin_y(), target);
  }

  // float height = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_height(), target);
  }

  // float width = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  return target;
}

::size_t ViewerControllerNewROIRequest_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float origin_x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_x = this->_internal_origin_x();
  ::uint32_t raw_origin_x;
  memcpy(&raw_origin_x, &tmp_origin_x, sizeof(tmp_origin_x));
  if (raw_origin_x != 0) {
    total_size += 5;
  }

  // float origin_y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_y = this->_internal_origin_y();
  ::uint32_t raw_origin_y;
  memcpy(&raw_origin_y, &tmp_origin_y, sizeof(tmp_origin_y));
  if (raw_origin_y != 0) {
    total_size += 5;
  }

  // float height = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  // float width = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerNewROIRequest_Rect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerNewROIRequest_Rect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerNewROIRequest_Rect::GetClassData() const { return &_class_data_; }


void ViewerControllerNewROIRequest_Rect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerNewROIRequest_Rect*>(&to_msg);
  auto& from = static_cast<const ViewerControllerNewROIRequest_Rect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_x = from._internal_origin_x();
  ::uint32_t raw_origin_x;
  memcpy(&raw_origin_x, &tmp_origin_x, sizeof(tmp_origin_x));
  if (raw_origin_x != 0) {
    _this->_internal_set_origin_x(from._internal_origin_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_origin_y = from._internal_origin_y();
  ::uint32_t raw_origin_y;
  memcpy(&raw_origin_y, &tmp_origin_y, sizeof(tmp_origin_y));
  if (raw_origin_y != 0) {
    _this->_internal_set_origin_y(from._internal_origin_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerNewROIRequest_Rect::CopyFrom(const ViewerControllerNewROIRequest_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerNewROIRequest.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerNewROIRequest_Rect::IsInitialized() const {
  return true;
}

void ViewerControllerNewROIRequest_Rect::InternalSwap(ViewerControllerNewROIRequest_Rect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Rect, _impl_.width_)
      + sizeof(ViewerControllerNewROIRequest_Rect::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest_Rect, _impl_.origin_x_)>(
          reinterpret_cast<char*>(&_impl_.origin_x_),
          reinterpret_cast<char*>(&other->_impl_.origin_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerNewROIRequest_Rect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[22]);
}
// ===================================================================

class ViewerControllerNewROIRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerNewROIRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerNewROIRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ViewerControllerNewROIRequest_Color& color(const ViewerControllerNewROIRequest* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer& buffer(const ViewerControllerNewROIRequest* msg);
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osirixgrpc::ViewerControllerNewROIRequest_Rect& rectangle(const ViewerControllerNewROIRequest* msg);
  static void set_has_rectangle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerNewROIRequest::_Internal::viewer_controller(const ViewerControllerNewROIRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
const ::osirixgrpc::ViewerControllerNewROIRequest_Color&
ViewerControllerNewROIRequest::_Internal::color(const ViewerControllerNewROIRequest* msg) {
  return *msg->_impl_.color_;
}
const ::osirixgrpc::ViewerControllerNewROIRequest_Buffer&
ViewerControllerNewROIRequest::_Internal::buffer(const ViewerControllerNewROIRequest* msg) {
  return *msg->_impl_.buffer_;
}
const ::osirixgrpc::ViewerControllerNewROIRequest_Rect&
ViewerControllerNewROIRequest::_Internal::rectangle(const ViewerControllerNewROIRequest* msg) {
  return *msg->_impl_.rectangle_;
}
void ViewerControllerNewROIRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerNewROIRequest::ViewerControllerNewROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerNewROIRequest)
}
ViewerControllerNewROIRequest::ViewerControllerNewROIRequest(const ViewerControllerNewROIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerNewROIRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.buffer_){nullptr}
    , decltype(_impl_.rectangle_){nullptr}
    , decltype(_impl_.itype_) {}

    , decltype(_impl_.position_) {}

    , decltype(_impl_.movie_idx_) {}

    , decltype(_impl_.buffer_position_x_) {}

    , decltype(_impl_.buffer_position_y_) {}

    , decltype(_impl_.thickness_) {}

    , decltype(_impl_.opacity_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.color_ = new ::osirixgrpc::ViewerControllerNewROIRequest_Color(*from._impl_.color_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.buffer_ = new ::osirixgrpc::ViewerControllerNewROIRequest_Buffer(*from._impl_.buffer_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.rectangle_ = new ::osirixgrpc::ViewerControllerNewROIRequest_Rect(*from._impl_.rectangle_);
  }
  ::memcpy(&_impl_.itype_, &from._impl_.itype_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.opacity_) -
    reinterpret_cast<char*>(&_impl_.itype_)) + sizeof(_impl_.opacity_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerNewROIRequest)
}

inline void ViewerControllerNewROIRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.points_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.buffer_){nullptr}
    , decltype(_impl_.rectangle_){nullptr}
    , decltype(_impl_.itype_) { 0 }

    , decltype(_impl_.position_) { 0 }

    , decltype(_impl_.movie_idx_) { 0 }

    , decltype(_impl_.buffer_position_x_) { 0 }

    , decltype(_impl_.buffer_position_y_) { 0 }

    , decltype(_impl_.thickness_) { 0 }

    , decltype(_impl_.opacity_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewerControllerNewROIRequest::~ViewerControllerNewROIRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerNewROIRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerNewROIRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_points()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.buffer_;
  if (this != internal_default_instance()) delete _impl_.rectangle_;
}

void ViewerControllerNewROIRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerNewROIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerNewROIRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_points()->Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
      _impl_.viewer_controller_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.buffer_ != nullptr);
      _impl_.buffer_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rectangle_ != nullptr);
      _impl_.rectangle_->Clear();
    }
  }
  ::memset(&_impl_.itype_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.opacity_) -
      reinterpret_cast<char*>(&_impl_.itype_)) + sizeof(_impl_.opacity_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerNewROIRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 itype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.itype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "osirixgrpc.ViewerControllerNewROIRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 movie_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 buffer_position_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.buffer_position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 buffer_position_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.buffer_position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ViewerControllerNewROIRequest.Color color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float thickness = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 77)) {
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float opacity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 85)) {
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ViewerControllerNewROIRequest.Buffer buffer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .osirixgrpc.ViewerControllerNewROIRequest.Point2D points = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ViewerControllerNewROIRequest.Rect rectangle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_rectangle(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerNewROIRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerNewROIRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // int32 itype = 2;
  if (this->_internal_itype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_itype(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "osirixgrpc.ViewerControllerNewROIRequest.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 position = 4;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_position(), target);
  }

  // int32 movie_idx = 5;
  if (this->_internal_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_movie_idx(), target);
  }

  // int32 buffer_position_x = 6;
  if (this->_internal_buffer_position_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_buffer_position_x(), target);
  }

  // int32 buffer_position_y = 7;
  if (this->_internal_buffer_position_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_buffer_position_y(), target);
  }

  // .osirixgrpc.ViewerControllerNewROIRequest.Color color = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // float thickness = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  ::uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_thickness(), target);
  }

  // float opacity = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_opacity = this->_internal_opacity();
  ::uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_opacity(), target);
  }

  // .osirixgrpc.ViewerControllerNewROIRequest.Buffer buffer = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::buffer(this),
        _Internal::buffer(this).GetCachedSize(), target, stream);
  }

  // repeated .osirixgrpc.ViewerControllerNewROIRequest.Point2D points = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ViewerControllerNewROIRequest.Rect rectangle = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::rectangle(this),
        _Internal::rectangle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerNewROIRequest)
  return target;
}

::size_t ViewerControllerNewROIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerNewROIRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.ViewerControllerNewROIRequest.Point2D points = 12;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .osirixgrpc.ViewerController viewer_controller = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.viewer_controller_);
    }

    // .osirixgrpc.ViewerControllerNewROIRequest.Color color = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // .osirixgrpc.ViewerControllerNewROIRequest.Buffer buffer = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buffer_);
    }

    // .osirixgrpc.ViewerControllerNewROIRequest.Rect rectangle = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rectangle_);
    }

  }
  // int32 itype = 2;
  if (this->_internal_itype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_itype());
  }

  // int32 position = 4;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_position());
  }

  // int32 movie_idx = 5;
  if (this->_internal_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_movie_idx());
  }

  // int32 buffer_position_x = 6;
  if (this->_internal_buffer_position_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_buffer_position_x());
  }

  // int32 buffer_position_y = 7;
  if (this->_internal_buffer_position_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_buffer_position_y());
  }

  // float thickness = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  ::uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 5;
  }

  // float opacity = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_opacity = this->_internal_opacity();
  ::uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerNewROIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerNewROIRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerNewROIRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerNewROIRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerNewROIRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerNewROIRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerNewROIRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
          from._internal_viewer_controller());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_color()->::osirixgrpc::ViewerControllerNewROIRequest_Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buffer()->::osirixgrpc::ViewerControllerNewROIRequest_Buffer::MergeFrom(
          from._internal_buffer());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rectangle()->::osirixgrpc::ViewerControllerNewROIRequest_Rect::MergeFrom(
          from._internal_rectangle());
    }
  }
  if (from._internal_itype() != 0) {
    _this->_internal_set_itype(from._internal_itype());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_movie_idx() != 0) {
    _this->_internal_set_movie_idx(from._internal_movie_idx());
  }
  if (from._internal_buffer_position_x() != 0) {
    _this->_internal_set_buffer_position_x(from._internal_buffer_position_x());
  }
  if (from._internal_buffer_position_y() != 0) {
    _this->_internal_set_buffer_position_y(from._internal_buffer_position_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_thickness = from._internal_thickness();
  ::uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_opacity = from._internal_opacity();
  ::uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _this->_internal_set_opacity(from._internal_opacity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerNewROIRequest::CopyFrom(const ViewerControllerNewROIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerNewROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerNewROIRequest::IsInitialized() const {
  return true;
}

void ViewerControllerNewROIRequest::InternalSwap(ViewerControllerNewROIRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_points()->InternalSwap(other->_internal_mutable_points());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest, _impl_.opacity_)
      + sizeof(ViewerControllerNewROIRequest::_impl_.opacity_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerNewROIRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerNewROIRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[23]);
}
// ===================================================================

class ViewerControllerROIsWithNameRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerROIsWithNameRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerROIsWithNameRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerROIsWithNameRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerROIsWithNameRequest::_Internal::viewer_controller(const ViewerControllerROIsWithNameRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerROIsWithNameRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerROIsWithNameRequest::ViewerControllerROIsWithNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerROIsWithNameRequest)
}
ViewerControllerROIsWithNameRequest::ViewerControllerROIsWithNameRequest(const ViewerControllerROIsWithNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerROIsWithNameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) {}

    , decltype(_impl_.in_4d_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  ::memcpy(&_impl_.movie_idx_, &from._impl_.movie_idx_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.in_4d_) -
    reinterpret_cast<char*>(&_impl_.movie_idx_)) + sizeof(_impl_.in_4d_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerROIsWithNameRequest)
}

inline void ViewerControllerROIsWithNameRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) { 0 }

    , decltype(_impl_.in_4d_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewerControllerROIsWithNameRequest::~ViewerControllerROIsWithNameRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerROIsWithNameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerROIsWithNameRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerROIsWithNameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerROIsWithNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerROIsWithNameRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  ::memset(&_impl_.movie_idx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.in_4d_) -
      reinterpret_cast<char*>(&_impl_.movie_idx_)) + sizeof(_impl_.in_4d_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerROIsWithNameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "osirixgrpc.ViewerControllerROIsWithNameRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 movie_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool in_4d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.in_4d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerROIsWithNameRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerROIsWithNameRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "osirixgrpc.ViewerControllerROIsWithNameRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 movie_idx = 3;
  if (this->_internal_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_movie_idx(), target);
  }

  // bool in_4d = 4;
  if (this->_internal_in_4d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_in_4d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerROIsWithNameRequest)
  return target;
}

::size_t ViewerControllerROIsWithNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerROIsWithNameRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // int32 movie_idx = 3;
  if (this->_internal_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_movie_idx());
  }

  // bool in_4d = 4;
  if (this->_internal_in_4d() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerROIsWithNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerROIsWithNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerROIsWithNameRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerROIsWithNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerROIsWithNameRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerROIsWithNameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerROIsWithNameRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_movie_idx() != 0) {
    _this->_internal_set_movie_idx(from._internal_movie_idx());
  }
  if (from._internal_in_4d() != 0) {
    _this->_internal_set_in_4d(from._internal_in_4d());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerROIsWithNameRequest::CopyFrom(const ViewerControllerROIsWithNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerROIsWithNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerROIsWithNameRequest::IsInitialized() const {
  return true;
}

void ViewerControllerROIsWithNameRequest::InternalSwap(ViewerControllerROIsWithNameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerROIsWithNameRequest, _impl_.in_4d_)
      + sizeof(ViewerControllerROIsWithNameRequest::_impl_.in_4d_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerROIsWithNameRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerROIsWithNameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[24]);
}
// ===================================================================

class ViewerControllerResampleViewerControllerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerResampleViewerControllerRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerResampleViewerControllerRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerResampleViewerControllerRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osirixgrpc::ViewerController& fixed_viewer_controller(const ViewerControllerResampleViewerControllerRequest* msg);
  static void set_has_fixed_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerResampleViewerControllerRequest::_Internal::viewer_controller(const ViewerControllerResampleViewerControllerRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
const ::osirixgrpc::ViewerController&
ViewerControllerResampleViewerControllerRequest::_Internal::fixed_viewer_controller(const ViewerControllerResampleViewerControllerRequest* msg) {
  return *msg->_impl_.fixed_viewer_controller_;
}
void ViewerControllerResampleViewerControllerRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ViewerControllerResampleViewerControllerRequest::clear_fixed_viewer_controller() {
  if (_impl_.fixed_viewer_controller_ != nullptr) _impl_.fixed_viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ViewerControllerResampleViewerControllerRequest::ViewerControllerResampleViewerControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
}
ViewerControllerResampleViewerControllerRequest::ViewerControllerResampleViewerControllerRequest(const ViewerControllerResampleViewerControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerResampleViewerControllerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.fixed_viewer_controller_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.fixed_viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.fixed_viewer_controller_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
}

inline void ViewerControllerResampleViewerControllerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.fixed_viewer_controller_){nullptr}
  };
}

ViewerControllerResampleViewerControllerRequest::~ViewerControllerResampleViewerControllerRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerResampleViewerControllerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
  if (this != internal_default_instance()) delete _impl_.fixed_viewer_controller_;
}

void ViewerControllerResampleViewerControllerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerResampleViewerControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
      _impl_.viewer_controller_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fixed_viewer_controller_ != nullptr);
      _impl_.fixed_viewer_controller_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerResampleViewerControllerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .osirixgrpc.ViewerController fixed_viewer_controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerResampleViewerControllerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // .osirixgrpc.ViewerController fixed_viewer_controller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fixed_viewer_controller(this),
        _Internal::fixed_viewer_controller(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  return target;
}

::size_t ViewerControllerResampleViewerControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .osirixgrpc.ViewerController viewer_controller = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.viewer_controller_);
    }

    // .osirixgrpc.ViewerController fixed_viewer_controller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fixed_viewer_controller_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerResampleViewerControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerResampleViewerControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerResampleViewerControllerRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerResampleViewerControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerResampleViewerControllerRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerResampleViewerControllerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
          from._internal_viewer_controller());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fixed_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
          from._internal_fixed_viewer_controller());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerResampleViewerControllerRequest::CopyFrom(const ViewerControllerResampleViewerControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerResampleViewerControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerResampleViewerControllerRequest::IsInitialized() const {
  return true;
}

void ViewerControllerResampleViewerControllerRequest::InternalSwap(ViewerControllerResampleViewerControllerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerResampleViewerControllerRequest, _impl_.fixed_viewer_controller_)
      + sizeof(ViewerControllerResampleViewerControllerRequest::_impl_.fixed_viewer_controller_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerResampleViewerControllerRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerResampleViewerControllerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[25]);
}
// ===================================================================

class ViewerControllerCopyViewerWindowRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerCopyViewerWindowRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerCopyViewerWindowRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerCopyViewerWindowRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerCopyViewerWindowRequest::_Internal::viewer_controller(const ViewerControllerCopyViewerWindowRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerCopyViewerWindowRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerCopyViewerWindowRequest::ViewerControllerCopyViewerWindowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
}
ViewerControllerCopyViewerWindowRequest::ViewerControllerCopyViewerWindowRequest(const ViewerControllerCopyViewerWindowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerCopyViewerWindowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.in_4d_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  _this->_impl_.in_4d_ = from._impl_.in_4d_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
}

inline void ViewerControllerCopyViewerWindowRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.in_4d_) { false }

  };
}

ViewerControllerCopyViewerWindowRequest::~ViewerControllerCopyViewerWindowRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerCopyViewerWindowRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerCopyViewerWindowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerCopyViewerWindowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_.in_4d_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerCopyViewerWindowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool in_4d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.in_4d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerCopyViewerWindowRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // bool in_4d = 2;
  if (this->_internal_in_4d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_in_4d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  return target;
}

::size_t ViewerControllerCopyViewerWindowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // bool in_4d = 2;
  if (this->_internal_in_4d() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerCopyViewerWindowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerCopyViewerWindowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerCopyViewerWindowRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerCopyViewerWindowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerCopyViewerWindowRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerCopyViewerWindowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_in_4d() != 0) {
    _this->_internal_set_in_4d(from._internal_in_4d());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerCopyViewerWindowRequest::CopyFrom(const ViewerControllerCopyViewerWindowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerCopyViewerWindowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerCopyViewerWindowRequest::IsInitialized() const {
  return true;
}

void ViewerControllerCopyViewerWindowRequest::InternalSwap(ViewerControllerCopyViewerWindowRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerCopyViewerWindowRequest, _impl_.in_4d_)
      + sizeof(ViewerControllerCopyViewerWindowRequest::_impl_.in_4d_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerCopyViewerWindowRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerCopyViewerWindowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[26]);
}
// ===================================================================

class ViewerControllerSetMovieIdxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerSetMovieIdxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerSetMovieIdxRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerSetMovieIdxRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerSetMovieIdxRequest::_Internal::viewer_controller(const ViewerControllerSetMovieIdxRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerSetMovieIdxRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerSetMovieIdxRequest::ViewerControllerSetMovieIdxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerSetMovieIdxRequest)
}
ViewerControllerSetMovieIdxRequest::ViewerControllerSetMovieIdxRequest(const ViewerControllerSetMovieIdxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerSetMovieIdxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  _this->_impl_.movie_idx_ = from._impl_.movie_idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerSetMovieIdxRequest)
}

inline void ViewerControllerSetMovieIdxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.movie_idx_) { 0 }

  };
}

ViewerControllerSetMovieIdxRequest::~ViewerControllerSetMovieIdxRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerSetMovieIdxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerSetMovieIdxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerSetMovieIdxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_.movie_idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerSetMovieIdxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 movie_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.movie_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerSetMovieIdxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_movie_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  return target;
}

::size_t ViewerControllerSetMovieIdxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // int32 movie_idx = 2;
  if (this->_internal_movie_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_movie_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerSetMovieIdxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerSetMovieIdxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerSetMovieIdxRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerSetMovieIdxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerSetMovieIdxRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerSetMovieIdxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_movie_idx() != 0) {
    _this->_internal_set_movie_idx(from._internal_movie_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerSetMovieIdxRequest::CopyFrom(const ViewerControllerSetMovieIdxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerSetMovieIdxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerSetMovieIdxRequest::IsInitialized() const {
  return true;
}

void ViewerControllerSetMovieIdxRequest::InternalSwap(ViewerControllerSetMovieIdxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerSetMovieIdxRequest, _impl_.movie_idx_)
      + sizeof(ViewerControllerSetMovieIdxRequest::_impl_.movie_idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerSetMovieIdxRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerSetMovieIdxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[27]);
}
// ===================================================================

class ViewerControllerIsDataVolumicRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerIsDataVolumicRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerIsDataVolumicRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerIsDataVolumicRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerIsDataVolumicRequest::_Internal::viewer_controller(const ViewerControllerIsDataVolumicRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerIsDataVolumicRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerIsDataVolumicRequest::ViewerControllerIsDataVolumicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerIsDataVolumicRequest)
}
ViewerControllerIsDataVolumicRequest::ViewerControllerIsDataVolumicRequest(const ViewerControllerIsDataVolumicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerIsDataVolumicRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.in_4d_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  _this->_impl_.in_4d_ = from._impl_.in_4d_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerIsDataVolumicRequest)
}

inline void ViewerControllerIsDataVolumicRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.in_4d_) { false }

  };
}

ViewerControllerIsDataVolumicRequest::~ViewerControllerIsDataVolumicRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerIsDataVolumicRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerIsDataVolumicRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerIsDataVolumicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_.in_4d_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerIsDataVolumicRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool in_4d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.in_4d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerIsDataVolumicRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // bool in_4d = 2;
  if (this->_internal_in_4d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_in_4d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  return target;
}

::size_t ViewerControllerIsDataVolumicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // bool in_4d = 2;
  if (this->_internal_in_4d() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerIsDataVolumicRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerIsDataVolumicRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerIsDataVolumicRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerIsDataVolumicRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerIsDataVolumicRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerIsDataVolumicRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_in_4d() != 0) {
    _this->_internal_set_in_4d(from._internal_in_4d());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerIsDataVolumicRequest::CopyFrom(const ViewerControllerIsDataVolumicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerIsDataVolumicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerIsDataVolumicRequest::IsInitialized() const {
  return true;
}

void ViewerControllerIsDataVolumicRequest::InternalSwap(ViewerControllerIsDataVolumicRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerIsDataVolumicRequest, _impl_.in_4d_)
      + sizeof(ViewerControllerIsDataVolumicRequest::_impl_.in_4d_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerIsDataVolumicRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerIsDataVolumicRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[28]);
}
// ===================================================================

class ViewerControllerSetIdxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerSetIdxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerSetIdxRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerSetIdxRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerSetIdxRequest::_Internal::viewer_controller(const ViewerControllerSetIdxRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerSetIdxRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerSetIdxRequest::ViewerControllerSetIdxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerSetIdxRequest)
}
ViewerControllerSetIdxRequest::ViewerControllerSetIdxRequest(const ViewerControllerSetIdxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerSetIdxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.idx_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  _this->_impl_.idx_ = from._impl_.idx_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerSetIdxRequest)
}

inline void ViewerControllerSetIdxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.idx_) { 0 }

  };
}

ViewerControllerSetIdxRequest::~ViewerControllerSetIdxRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerSetIdxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerSetIdxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerSetIdxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerSetIdxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerSetIdxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_.idx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerSetIdxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerSetIdxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerSetIdxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // int32 idx = 2;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerSetIdxRequest)
  return target;
}

::size_t ViewerControllerSetIdxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerSetIdxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // int32 idx = 2;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerSetIdxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerSetIdxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerSetIdxRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerSetIdxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerSetIdxRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerSetIdxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerSetIdxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerSetIdxRequest::CopyFrom(const ViewerControllerSetIdxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerSetIdxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerSetIdxRequest::IsInitialized() const {
  return true;
}

void ViewerControllerSetIdxRequest::InternalSwap(ViewerControllerSetIdxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerSetIdxRequest, _impl_.idx_)
      + sizeof(ViewerControllerSetIdxRequest::_impl_.idx_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerSetIdxRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerSetIdxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[29]);
}
// ===================================================================

class ViewerControllerSetWLWWRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerSetWLWWRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerSetWLWWRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerSetWLWWRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerSetWLWWRequest::_Internal::viewer_controller(const ViewerControllerSetWLWWRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerSetWLWWRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerSetWLWWRequest::ViewerControllerSetWLWWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerSetWLWWRequest)
}
ViewerControllerSetWLWWRequest::ViewerControllerSetWLWWRequest(const ViewerControllerSetWLWWRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerSetWLWWRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.wl_) {}

    , decltype(_impl_.ww_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  ::memcpy(&_impl_.wl_, &from._impl_.wl_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ww_) -
    reinterpret_cast<char*>(&_impl_.wl_)) + sizeof(_impl_.ww_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerSetWLWWRequest)
}

inline void ViewerControllerSetWLWWRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewer_controller_){nullptr}
    , decltype(_impl_.wl_) { 0 }

    , decltype(_impl_.ww_) { 0 }

  };
}

ViewerControllerSetWLWWRequest::~ViewerControllerSetWLWWRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerSetWLWWRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerSetWLWWRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerSetWLWWRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerSetWLWWRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerSetWLWWRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  ::memset(&_impl_.wl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ww_) -
      reinterpret_cast<char*>(&_impl_.wl_)) + sizeof(_impl_.ww_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerSetWLWWRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float wl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.wl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float ww = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.ww_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerSetWLWWRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerSetWLWWRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // float wl = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wl = this->_internal_wl();
  ::uint32_t raw_wl;
  memcpy(&raw_wl, &tmp_wl, sizeof(tmp_wl));
  if (raw_wl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_wl(), target);
  }

  // float ww = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_ww = this->_internal_ww();
  ::uint32_t raw_ww;
  memcpy(&raw_ww, &tmp_ww, sizeof(tmp_ww));
  if (raw_ww != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_ww(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerSetWLWWRequest)
  return target;
}

::size_t ViewerControllerSetWLWWRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerSetWLWWRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  // float wl = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wl = this->_internal_wl();
  ::uint32_t raw_wl;
  memcpy(&raw_wl, &tmp_wl, sizeof(tmp_wl));
  if (raw_wl != 0) {
    total_size += 5;
  }

  // float ww = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_ww = this->_internal_ww();
  ::uint32_t raw_ww;
  memcpy(&raw_ww, &tmp_ww, sizeof(tmp_ww));
  if (raw_ww != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerSetWLWWRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerSetWLWWRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerSetWLWWRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerSetWLWWRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerSetWLWWRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerSetWLWWRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerSetWLWWRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wl = from._internal_wl();
  ::uint32_t raw_wl;
  memcpy(&raw_wl, &tmp_wl, sizeof(tmp_wl));
  if (raw_wl != 0) {
    _this->_internal_set_wl(from._internal_wl());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_ww = from._internal_ww();
  ::uint32_t raw_ww;
  memcpy(&raw_ww, &tmp_ww, sizeof(tmp_ww));
  if (raw_ww != 0) {
    _this->_internal_set_ww(from._internal_ww());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerSetWLWWRequest::CopyFrom(const ViewerControllerSetWLWWRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerSetWLWWRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerSetWLWWRequest::IsInitialized() const {
  return true;
}

void ViewerControllerSetWLWWRequest::InternalSwap(ViewerControllerSetWLWWRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewerControllerSetWLWWRequest, _impl_.ww_)
      + sizeof(ViewerControllerSetWLWWRequest::_impl_.ww_)
      - PROTOBUF_FIELD_OFFSET(ViewerControllerSetWLWWRequest, _impl_.viewer_controller_)>(
          reinterpret_cast<char*>(&_impl_.viewer_controller_),
          reinterpret_cast<char*>(&other->_impl_.viewer_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerSetWLWWRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[30]);
}
// ===================================================================

class ViewerControllerOpenVRViewerForModeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewerControllerOpenVRViewerForModeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViewerControllerOpenVRViewerForModeRequest, _impl_._has_bits_);
  static const ::osirixgrpc::ViewerController& viewer_controller(const ViewerControllerOpenVRViewerForModeRequest* msg);
  static void set_has_viewer_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osirixgrpc::ViewerController&
ViewerControllerOpenVRViewerForModeRequest::_Internal::viewer_controller(const ViewerControllerOpenVRViewerForModeRequest* msg) {
  return *msg->_impl_.viewer_controller_;
}
void ViewerControllerOpenVRViewerForModeRequest::clear_viewer_controller() {
  if (_impl_.viewer_controller_ != nullptr) _impl_.viewer_controller_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewerControllerOpenVRViewerForModeRequest::ViewerControllerOpenVRViewerForModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
}
ViewerControllerOpenVRViewerForModeRequest::ViewerControllerOpenVRViewerForModeRequest(const ViewerControllerOpenVRViewerForModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewerControllerOpenVRViewerForModeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_) {}

    , decltype(_impl_.viewer_controller_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.viewer_controller_ = new ::osirixgrpc::ViewerController(*from._impl_.viewer_controller_);
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
}

inline void ViewerControllerOpenVRViewerForModeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_) {}

    , decltype(_impl_.viewer_controller_){nullptr}
  };
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewerControllerOpenVRViewerForModeRequest::~ViewerControllerOpenVRViewerForModeRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewerControllerOpenVRViewerForModeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.viewer_controller_;
}

void ViewerControllerOpenVRViewerForModeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewerControllerOpenVRViewerForModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.viewer_controller_ != nullptr);
    _impl_.viewer_controller_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewerControllerOpenVRViewerForModeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .osirixgrpc.ViewerController viewer_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ViewerControllerOpenVRViewerForModeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .osirixgrpc.ViewerController viewer_controller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::viewer_controller(this),
        _Internal::viewer_controller(this).GetCachedSize(), target, stream);
  }

  // string mode = 2;
  if (!this->_internal_mode().empty()) {
    const std::string& _s = this->_internal_mode();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "osirixgrpc.ViewerControllerOpenVRViewerForModeRequest.mode");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  return target;
}

::size_t ViewerControllerOpenVRViewerForModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mode = 2;
  if (!this->_internal_mode().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mode());
  }

  // .osirixgrpc.ViewerController viewer_controller = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.viewer_controller_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewerControllerOpenVRViewerForModeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewerControllerOpenVRViewerForModeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewerControllerOpenVRViewerForModeRequest::GetClassData() const { return &_class_data_; }


void ViewerControllerOpenVRViewerForModeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewerControllerOpenVRViewerForModeRequest*>(&to_msg);
  auto& from = static_cast<const ViewerControllerOpenVRViewerForModeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(
        from._internal_viewer_controller());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewerControllerOpenVRViewerForModeRequest::CopyFrom(const ViewerControllerOpenVRViewerForModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.ViewerControllerOpenVRViewerForModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerControllerOpenVRViewerForModeRequest::IsInitialized() const {
  return true;
}

void ViewerControllerOpenVRViewerForModeRequest::InternalSwap(ViewerControllerOpenVRViewerForModeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_, lhs_arena,
                                       &other->_impl_.mode_, rhs_arena);
  swap(_impl_.viewer_controller_, other->_impl_.viewer_controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewerControllerOpenVRViewerForModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_viewercontroller_2eproto_getter, &descriptor_table_viewercontroller_2eproto_once,
      file_level_metadata_viewercontroller_2eproto[31]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerPixListResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerPixListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerPixListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerROIListResponse_ROISlice*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerROIListResponse_ROISlice >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerROIListResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerROIListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerROIListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerNewROIResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerNewROIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerNewROIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerCurDCMResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerCurDCMResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerCurDCMResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerROIsWithNameResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerROIsWithNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerROIsWithNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerSelectedROIsResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerSelectedROIsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerSelectedROIsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerIsDataVolumicResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerIsDataVolumicResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerIsDataVolumicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerBlendingControllerResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerBlendingControllerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerBlendingControllerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerVRControllersResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerVRControllersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerVRControllersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerTitleResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerTitleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerTitleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerModalityResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerModalityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerModalityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerMovieIdxResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerMovieIdxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerMovieIdxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerMaxMovieIdxResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerMaxMovieIdxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerIdxResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerIdxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerIdxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerWLWWResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerWLWWResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerWLWWResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerOpenVRViewerForModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerPixListRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerPixListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerPixListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerROIListRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerROIListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerROIListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerNewROIRequest_Buffer*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerNewROIRequest_Buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerNewROIRequest_Buffer >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerNewROIRequest_Point2D*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerNewROIRequest_Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerNewROIRequest_Color*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerNewROIRequest_Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerNewROIRequest_Color >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerNewROIRequest_Rect*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerNewROIRequest_Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerNewROIRequest_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerNewROIRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerNewROIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerNewROIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerROIsWithNameRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerROIsWithNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerROIsWithNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerResampleViewerControllerRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerResampleViewerControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerCopyViewerWindowRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerCopyViewerWindowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerSetMovieIdxRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerSetMovieIdxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerSetMovieIdxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerIsDataVolumicRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerIsDataVolumicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerIsDataVolumicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerSetIdxRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerSetIdxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerSetIdxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerSetWLWWRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerSetWLWWRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerSetWLWWRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest*
Arena::CreateMaybeMessage< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::ViewerControllerOpenVRViewerForModeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
